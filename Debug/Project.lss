
Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000006b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000063e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000023  00800100  00800100  000006b2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006b2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  00000724  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001148  00000000  00000000  00000884  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b1a  00000000  00000000  000019cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000096d  00000000  00000000  000024e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002a0  00000000  00000000  00002e54  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005f3  00000000  00000000  000030f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006a7  00000000  00000000  000036e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00003d8e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e3       	ldi	r30, 0x3E	; 62
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 32       	cpi	r26, 0x23	; 35
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 11 01 	call	0x222	; 0x222 <main>
  9e:	0c 94 1d 03 	jmp	0x63a	; 0x63a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SCH_Add_Task>:
  Task will be first executed at T = 300 ticks, then 1300, 2300, etc.

-*------------------------------------------------------------------*/

unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
  a6:	0f 93       	push	r16
  a8:	1f 93       	push	r17
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
  ae:	8c 01       	movw	r16, r24
   unsigned char Index = 0;

   // First find a gap in the array (if there is one)
   while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
  b0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
  b4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_end+0x1>
  b8:	89 2b       	or	r24, r25
  ba:	81 f0       	breq	.+32     	; 0xdc <SCH_Add_Task+0x36>
  bc:	e0 e0       	ldi	r30, 0x00	; 0
  be:	f1 e0       	ldi	r31, 0x01	; 1
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	30 e0       	ldi	r19, 0x00	; 0
   {
      Index++;
  c4:	82 2f       	mov	r24, r18
unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
   unsigned char Index = 0;

   // First find a gap in the array (if there is one)
   while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
  c6:	e9 01       	movw	r28, r18
  c8:	a7 81       	ldd	r26, Z+7	; 0x07
  ca:	b0 85       	ldd	r27, Z+8	; 0x08
  cc:	2f 5f       	subi	r18, 0xFF	; 255
  ce:	3f 4f       	sbci	r19, 0xFF	; 255
  d0:	37 96       	adiw	r30, 0x07	; 7
  d2:	ab 2b       	or	r26, r27
  d4:	b9 f7       	brne	.-18     	; 0xc4 <SCH_Add_Task+0x1e>
   {
      Index++;
   }

   // Have we reached the end of the list?
   if(Index == SCH_MAX_TASKS)
  d6:	85 30       	cpi	r24, 0x05	; 5
  d8:	21 f4       	brne	.+8      	; 0xe2 <SCH_Add_Task+0x3c>
  da:	15 c0       	rjmp	.+42     	; 0x106 <SCH_Add_Task+0x60>
unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
   unsigned char Index = 0;

   // First find a gap in the array (if there is one)
   while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
  dc:	c0 e0       	ldi	r28, 0x00	; 0
  de:	d0 e0       	ldi	r29, 0x00	; 0

-*------------------------------------------------------------------*/

unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
   unsigned char Index = 0;
  e0:	80 e0       	ldi	r24, 0x00	; 0
      // Task list is full, return an error code
      return SCH_MAX_TASKS;
   }

   // If we're here, there is a space in the task array
   SCH_tasks_G[Index].pTask = pFunction;
  e2:	fe 01       	movw	r30, r28
  e4:	ee 0f       	add	r30, r30
  e6:	ff 1f       	adc	r31, r31
  e8:	ee 0f       	add	r30, r30
  ea:	ff 1f       	adc	r31, r31
  ec:	ee 0f       	add	r30, r30
  ee:	ff 1f       	adc	r31, r31
  f0:	ec 1b       	sub	r30, r28
  f2:	fd 0b       	sbc	r31, r29
  f4:	e0 50       	subi	r30, 0x00	; 0
  f6:	ff 4f       	sbci	r31, 0xFF	; 255
  f8:	11 83       	std	Z+1, r17	; 0x01
  fa:	00 83       	st	Z, r16
   SCH_tasks_G[Index].Delay =DELAY;
  fc:	73 83       	std	Z+3, r23	; 0x03
  fe:	62 83       	std	Z+2, r22	; 0x02
   SCH_tasks_G[Index].Period = PERIOD;
 100:	55 83       	std	Z+5, r21	; 0x05
 102:	44 83       	std	Z+4, r20	; 0x04
   SCH_tasks_G[Index].RunMe = 0;
 104:	16 82       	std	Z+6, r1	; 0x06

   // return position of task (to allow later deletion)
   return Index;
}
 106:	df 91       	pop	r29
 108:	cf 91       	pop	r28
 10a:	1f 91       	pop	r17
 10c:	0f 91       	pop	r16
 10e:	08 95       	ret

00000110 <SCH_Delete_Task>:
unsigned char SCH_Delete_Task(const unsigned char TASK_INDEX)
{
   // Return_code can be used for error reporting, NOT USED HERE THOUGH!
   unsigned char Return_code = 0;

   SCH_tasks_G[TASK_INDEX].pTask = 0;
 110:	27 e0       	ldi	r18, 0x07	; 7
 112:	82 9f       	mul	r24, r18
 114:	c0 01       	movw	r24, r0
 116:	11 24       	eor	r1, r1
 118:	fc 01       	movw	r30, r24
 11a:	e0 50       	subi	r30, 0x00	; 0
 11c:	ff 4f       	sbci	r31, 0xFF	; 255
 11e:	11 82       	std	Z+1, r1	; 0x01
 120:	10 82       	st	Z, r1
   SCH_tasks_G[TASK_INDEX].Delay = 0;
 122:	13 82       	std	Z+3, r1	; 0x03
 124:	12 82       	std	Z+2, r1	; 0x02
   SCH_tasks_G[TASK_INDEX].Period = 0;
 126:	15 82       	std	Z+5, r1	; 0x05
 128:	14 82       	std	Z+4, r1	; 0x04
   SCH_tasks_G[TASK_INDEX].RunMe = 0;
 12a:	16 82       	std	Z+6, r1	; 0x06

   return Return_code;
}
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	08 95       	ret

00000130 <SCH_Dispatch_Tasks>:
  This function must be called (repeatedly) from the main loop.

-*------------------------------------------------------------------*/

void SCH_Dispatch_Tasks(void)
{
 130:	ef 92       	push	r14
 132:	ff 92       	push	r15
 134:	1f 93       	push	r17
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	c0 e0       	ldi	r28, 0x00	; 0
 13c:	d1 e0       	ldi	r29, 0x01	; 1
   unsigned char Index;

   // Dispatches (runs) the next task (if one is ready)
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
 13e:	10 e0       	ldi	r17, 0x00	; 0
   {
      if((SCH_tasks_G[Index].RunMe > 0) && (SCH_tasks_G[Index].pTask != 0))
 140:	8e 81       	ldd	r24, Y+6	; 0x06
 142:	88 23       	and	r24, r24
 144:	79 f0       	breq	.+30     	; 0x164 <SCH_Dispatch_Tasks+0x34>
 146:	e8 81       	ld	r30, Y
 148:	f9 81       	ldd	r31, Y+1	; 0x01
 14a:	30 97       	sbiw	r30, 0x00	; 0
 14c:	59 f0       	breq	.+22     	; 0x164 <SCH_Dispatch_Tasks+0x34>
      {
         (*SCH_tasks_G[Index].pTask)();  // Run the task
 14e:	09 95       	icall
         SCH_tasks_G[Index].RunMe -= 1;   // Reset / reduce RunMe flag
 150:	8e 81       	ldd	r24, Y+6	; 0x06
 152:	81 50       	subi	r24, 0x01	; 1
 154:	8e 83       	std	Y+6, r24	; 0x06

         // Periodic tasks will automatically run again
         // - if this is a 'one shot' task, remove it from the array
         if(SCH_tasks_G[Index].Period == 0)
 156:	8c 81       	ldd	r24, Y+4	; 0x04
 158:	9d 81       	ldd	r25, Y+5	; 0x05
 15a:	89 2b       	or	r24, r25
 15c:	19 f4       	brne	.+6      	; 0x164 <SCH_Dispatch_Tasks+0x34>
         {
            SCH_Delete_Task(Index);
 15e:	81 2f       	mov	r24, r17
 160:	0e 94 88 00 	call	0x110	; 0x110 <SCH_Delete_Task>
void SCH_Dispatch_Tasks(void)
{
   unsigned char Index;

   // Dispatches (runs) the next task (if one is ready)
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
 164:	1f 5f       	subi	r17, 0xFF	; 255
 166:	27 96       	adiw	r28, 0x07	; 7
 168:	15 30       	cpi	r17, 0x05	; 5
 16a:	51 f7       	brne	.-44     	; 0x140 <SCH_Dispatch_Tasks+0x10>
         {
            SCH_Delete_Task(Index);
         }
      }
   }
}
 16c:	df 91       	pop	r29
 16e:	cf 91       	pop	r28
 170:	1f 91       	pop	r17
 172:	ff 90       	pop	r15
 174:	ef 90       	pop	r14
 176:	08 95       	ret

00000178 <SCH_Init_T1>:
  You must call this function before using the scheduler.

-*------------------------------------------------------------------*/

void SCH_Init_T1(void)
{
 178:	cf 93       	push	r28
   unsigned char i;

   for(i = 0; i < SCH_MAX_TASKS; i++)
 17a:	c0 e0       	ldi	r28, 0x00	; 0
   {
      SCH_Delete_Task(i);
 17c:	8c 2f       	mov	r24, r28
 17e:	0e 94 88 00 	call	0x110	; 0x110 <SCH_Delete_Task>

void SCH_Init_T1(void)
{
   unsigned char i;

   for(i = 0; i < SCH_MAX_TASKS; i++)
 182:	cf 5f       	subi	r28, 0xFF	; 255
 184:	c5 30       	cpi	r28, 0x05	; 5
 186:	d1 f7       	brne	.-12     	; 0x17c <SCH_Init_T1+0x4>

   // Set up Timer 1
   // Values for 1ms and 10ms ticks are provided for various crystals

   // Hier moet de timer periode worden aangepast ....!
   OCR1A = (uint16_t)625;   		     // 10ms = (256/16.000.000) * 625
 188:	81 e7       	ldi	r24, 0x71	; 113
 18a:	92 e0       	ldi	r25, 0x02	; 2
 18c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 190:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
   TCCR1B = (1 << CS12) | (1 << WGM12);  // prescale op 64, top counter = value OCR1A (CTC mode)
 194:	8c e0       	ldi	r24, 0x0C	; 12
 196:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
   TIMSK1 = 1 << OCIE1A;   		     // Timer 1 Output Compare A Match Interrupt Enable
 19a:	82 e0       	ldi	r24, 0x02	; 2
 19c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
}
 1a0:	cf 91       	pop	r28
 1a2:	08 95       	ret

000001a4 <SCH_Start>:

-*------------------------------------------------------------------*/

void SCH_Start(void)
{
      sei();
 1a4:	78 94       	sei
 1a6:	08 95       	ret

000001a8 <__vector_11>:
  determined by the timer settings in SCH_Init_T1().

-*------------------------------------------------------------------*/

ISR(TIMER1_COMPA_vect)
{
 1a8:	1f 92       	push	r1
 1aa:	0f 92       	push	r0
 1ac:	0f b6       	in	r0, 0x3f	; 63
 1ae:	0f 92       	push	r0
 1b0:	11 24       	eor	r1, r1
 1b2:	2f 93       	push	r18
 1b4:	3f 93       	push	r19
 1b6:	8f 93       	push	r24
 1b8:	9f 93       	push	r25
 1ba:	af 93       	push	r26
 1bc:	bf 93       	push	r27
 1be:	ef 93       	push	r30
 1c0:	ff 93       	push	r31
 1c2:	e0 e0       	ldi	r30, 0x00	; 0
 1c4:	f1 e0       	ldi	r31, 0x01	; 1
 1c6:	23 e2       	ldi	r18, 0x23	; 35
 1c8:	31 e0       	ldi	r19, 0x01	; 1
   unsigned char Index;
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
   {
      // Check if there is a task at this location
      if(SCH_tasks_G[Index].pTask)
 1ca:	80 81       	ld	r24, Z
 1cc:	91 81       	ldd	r25, Z+1	; 0x01
 1ce:	89 2b       	or	r24, r25
 1d0:	91 f0       	breq	.+36     	; 0x1f6 <__vector_11+0x4e>
      {
         if(SCH_tasks_G[Index].Delay == 0)
 1d2:	82 81       	ldd	r24, Z+2	; 0x02
 1d4:	93 81       	ldd	r25, Z+3	; 0x03
 1d6:	00 97       	sbiw	r24, 0x00	; 0
 1d8:	59 f4       	brne	.+22     	; 0x1f0 <__vector_11+0x48>
         {
            // The task is due to run, Inc. the 'RunMe' flag
            SCH_tasks_G[Index].RunMe += 1;
 1da:	86 81       	ldd	r24, Z+6	; 0x06
 1dc:	8f 5f       	subi	r24, 0xFF	; 255
 1de:	86 83       	std	Z+6, r24	; 0x06

            if(SCH_tasks_G[Index].Period)
 1e0:	84 81       	ldd	r24, Z+4	; 0x04
 1e2:	95 81       	ldd	r25, Z+5	; 0x05
 1e4:	00 97       	sbiw	r24, 0x00	; 0
 1e6:	39 f0       	breq	.+14     	; 0x1f6 <__vector_11+0x4e>
            {
               // Schedule periodic tasks to run again
               SCH_tasks_G[Index].Delay = SCH_tasks_G[Index].Period;
               SCH_tasks_G[Index].Delay -= 1;
 1e8:	01 97       	sbiw	r24, 0x01	; 1
 1ea:	93 83       	std	Z+3, r25	; 0x03
 1ec:	82 83       	std	Z+2, r24	; 0x02
 1ee:	03 c0       	rjmp	.+6      	; 0x1f6 <__vector_11+0x4e>
            }
         }
         else
         {
            // Not yet ready to run: just decrement the delay
            SCH_tasks_G[Index].Delay -= 1;
 1f0:	01 97       	sbiw	r24, 0x01	; 1
 1f2:	93 83       	std	Z+3, r25	; 0x03
 1f4:	82 83       	std	Z+2, r24	; 0x02
 1f6:	37 96       	adiw	r30, 0x07	; 7
-*------------------------------------------------------------------*/

ISR(TIMER1_COMPA_vect)
{
   unsigned char Index;
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
 1f8:	e2 17       	cp	r30, r18
 1fa:	f3 07       	cpc	r31, r19
 1fc:	31 f7       	brne	.-52     	; 0x1ca <__vector_11+0x22>
            // Not yet ready to run: just decrement the delay
            SCH_tasks_G[Index].Delay -= 1;
         }
      }
   }
}
 1fe:	ff 91       	pop	r31
 200:	ef 91       	pop	r30
 202:	bf 91       	pop	r27
 204:	af 91       	pop	r26
 206:	9f 91       	pop	r25
 208:	8f 91       	pop	r24
 20a:	3f 91       	pop	r19
 20c:	2f 91       	pop	r18
 20e:	0f 90       	pop	r0
 210:	0f be       	out	0x3f, r0	; 63
 212:	0f 90       	pop	r0
 214:	1f 90       	pop	r1
 216:	18 95       	reti

00000218 <Temperature>:
	transmitSerial(getTemp());
}

void Distance(){
	
	transmitSerial(getDistance());
 218:	0e 94 63 01 	call	0x2c6	; 0x2c6 <getTemp>
 21c:	0e 94 77 01 	call	0x2ee	; 0x2ee <transmitSerial>
 220:	08 95       	ret

00000222 <main>:
}


int main(void)
{
	initSerial();
 222:	0e 94 69 01 	call	0x2d2	; 0x2d2 <initSerial>
	
	SCH_Init_T1(); // stel de scheduler in
 226:	0e 94 bc 00 	call	0x178	; 0x178 <SCH_Init_T1>

	//SCH_Add_Task(Light, 0, 30);// Voeg taken toe aan de scheduler Light zit op A1.
	SCH_Add_Task(Temperature, 0, 30);
 22a:	4e e1       	ldi	r20, 0x1E	; 30
 22c:	50 e0       	ldi	r21, 0x00	; 0
 22e:	60 e0       	ldi	r22, 0x00	; 0
 230:	70 e0       	ldi	r23, 0x00	; 0
 232:	8c e0       	ldi	r24, 0x0C	; 12
 234:	91 e0       	ldi	r25, 0x01	; 1
 236:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	//SCH_Add_Task(Distance, 0, 30); 


	SCH_Start();// start de scheduler
 23a:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <SCH_Start>
   
    while (1) 
    {
		SCH_Dispatch_Tasks(); // verzend de taken
 23e:	0e 94 98 00 	call	0x130	; 0x130 <SCH_Dispatch_Tasks>
 242:	fd cf       	rjmp	.-6      	; 0x23e <main+0x1c>

00000244 <analog_read>:
	/* adcx is the analog pin we want to use.  ADMUX's first few bits are
	 * the binary representations of the numbers of the pins so we can
	 * just 'OR' the pin's number with ADMUX to select that pin.
	 * We first zero the four bits by setting ADMUX equal to its higher
	 * four bits. */
	ADMUX	&=	0xf0;
 244:	ec e7       	ldi	r30, 0x7C	; 124
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	90 81       	ld	r25, Z
 24a:	90 7f       	andi	r25, 0xF0	; 240
 24c:	90 83       	st	Z, r25
	ADMUX	|=	adcx;
 24e:	90 81       	ld	r25, Z
 250:	89 2b       	or	r24, r25
 252:	80 83       	st	Z, r24

	/* This starts the conversion. */
	ADCSRA |= _BV(ADSC);
 254:	ea e7       	ldi	r30, 0x7A	; 122
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	80 81       	ld	r24, Z
 25a:	80 64       	ori	r24, 0x40	; 64
 25c:	80 83       	st	Z, r24
	/* This is an idle loop that just wait around until the conversion
	 * is finished.  It constantly checks ADCSRA's ADSC bit, which we just
	 * set above, to see if it is still set.  This bit is automatically
	 * reset (zeroed) when the conversion is ready so if we do this in
	 * a loop the loop will just go until the conversion is ready. */
	while ( (ADCSRA & _BV(ADSC)) );
 25e:	80 81       	ld	r24, Z
 260:	86 fd       	sbrc	r24, 6
 262:	fd cf       	rjmp	.-6      	; 0x25e <analog_read+0x1a>

	/* Finally, we return the converted value to the calling function. */
	return ADC;
 264:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 268:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
 26c:	08 95       	ret

0000026e <temperatureInC>:
/* Deze functie zorgt ervoor dat de gemeten voltage omgezet wordt naar temperatuur */
float temperatureInC(voltage){
	float temperatureC = (voltage - 0.5) * 100;
	// de formule die ervoor zorgt dat het omgezet wordt.
	// voorbeeld: (1.2 - 0.5) * 100 = 70 graden Celsius.
	return temperatureC;
 26e:	bc 01       	movw	r22, r24
 270:	99 0f       	add	r25, r25
 272:	88 0b       	sbc	r24, r24
 274:	99 0b       	sbc	r25, r25
 276:	0e 94 24 02 	call	0x448	; 0x448 <__floatsisf>
 27a:	20 e0       	ldi	r18, 0x00	; 0
 27c:	30 e0       	ldi	r19, 0x00	; 0
 27e:	40 e0       	ldi	r20, 0x00	; 0
 280:	5f e3       	ldi	r21, 0x3F	; 63
 282:	0e 94 7f 01 	call	0x2fe	; 0x2fe <__subsf3>
 286:	20 e0       	ldi	r18, 0x00	; 0
 288:	30 e0       	ldi	r19, 0x00	; 0
 28a:	48 ec       	ldi	r20, 0xC8	; 200
 28c:	52 e4       	ldi	r21, 0x42	; 66
 28e:	0e 94 b0 02 	call	0x560	; 0x560 <__mulsf3>
	
}
 292:	08 95       	ret

00000294 <measure_Temp>:


float measure_Temp(){
	float tempInC = temperatureInC(voltage(analog_read(0))); // lees ADC uit (A0) en maak er volt van en dan Celsius
 294:	80 e0       	ldi	r24, 0x00	; 0
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	0e 94 22 01 	call	0x244	; 0x244 <analog_read>
 29c:	bc 01       	movw	r22, r24
 29e:	99 0f       	add	r25, r25
 2a0:	88 0b       	sbc	r24, r24
 2a2:	99 0b       	sbc	r25, r25
 2a4:	0e 94 24 02 	call	0x448	; 0x448 <__floatsisf>
 2a8:	20 e0       	ldi	r18, 0x00	; 0
 2aa:	30 e0       	ldi	r19, 0x00	; 0
 2ac:	40 ea       	ldi	r20, 0xA0	; 160
 2ae:	50 e4       	ldi	r21, 0x40	; 64
 2b0:	0e 94 b0 02 	call	0x560	; 0x560 <__mulsf3>
 2b4:	20 e0       	ldi	r18, 0x00	; 0
 2b6:	30 e0       	ldi	r19, 0x00	; 0
 2b8:	40 e8       	ldi	r20, 0x80	; 128
 2ba:	5a e3       	ldi	r21, 0x3A	; 58
 2bc:	0e 94 b0 02 	call	0x560	; 0x560 <__mulsf3>
 2c0:	0e 94 37 01 	call	0x26e	; 0x26e <temperatureInC>
	return tempInC;
}
 2c4:	08 95       	ret

000002c6 <getTemp>:


uint8_t getTemp() {
	int temperature;
	temperature = measure_Temp(); // roep de functie aan die temperatuur uitleest
 2c6:	0e 94 4a 01 	call	0x294	; 0x294 <measure_Temp>
	return temperature;
 2ca:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <__fixsfsi>
 2ce:	86 2f       	mov	r24, r22
}
 2d0:	08 95       	ret

000002d2 <initSerial>:
uint8_t receiveSerial() {
	// wait for data to be received
	while ( !(UCSR0A & (1 << RXC0)) );
	// get and return received data from buffer
	return UDR0;
}
 2d2:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 2d6:	83 e3       	ldi	r24, 0x33	; 51
 2d8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 2dc:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 2e0:	88 e1       	ldi	r24, 0x18	; 24
 2e2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 2e6:	86 e0       	ldi	r24, 0x06	; 6
 2e8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 2ec:	08 95       	ret

000002ee <transmitSerial>:

void transmitSerial(uint8_t data) {
	// wait for an empty transmit buffer
	// UDRE is set when the transmit buffer is empty
	loop_until_bit_is_set(UCSR0A, UDRE0);
 2ee:	e0 ec       	ldi	r30, 0xC0	; 192
 2f0:	f0 e0       	ldi	r31, 0x00	; 0
 2f2:	90 81       	ld	r25, Z
 2f4:	95 ff       	sbrs	r25, 5
 2f6:	fd cf       	rjmp	.-6      	; 0x2f2 <transmitSerial+0x4>
	// send the data
	UDR0 = data;
 2f8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 2fc:	08 95       	ret

000002fe <__subsf3>:
 2fe:	50 58       	subi	r21, 0x80	; 128

00000300 <__addsf3>:
 300:	bb 27       	eor	r27, r27
 302:	aa 27       	eor	r26, r26
 304:	0e 94 97 01 	call	0x32e	; 0x32e <__addsf3x>
 308:	0c 94 76 02 	jmp	0x4ec	; 0x4ec <__fp_round>
 30c:	0e 94 68 02 	call	0x4d0	; 0x4d0 <__fp_pscA>
 310:	38 f0       	brcs	.+14     	; 0x320 <__addsf3+0x20>
 312:	0e 94 6f 02 	call	0x4de	; 0x4de <__fp_pscB>
 316:	20 f0       	brcs	.+8      	; 0x320 <__addsf3+0x20>
 318:	39 f4       	brne	.+14     	; 0x328 <__addsf3+0x28>
 31a:	9f 3f       	cpi	r25, 0xFF	; 255
 31c:	19 f4       	brne	.+6      	; 0x324 <__addsf3+0x24>
 31e:	26 f4       	brtc	.+8      	; 0x328 <__addsf3+0x28>
 320:	0c 94 65 02 	jmp	0x4ca	; 0x4ca <__fp_nan>
 324:	0e f4       	brtc	.+2      	; 0x328 <__addsf3+0x28>
 326:	e0 95       	com	r30
 328:	e7 fb       	bst	r30, 7
 32a:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__fp_inf>

0000032e <__addsf3x>:
 32e:	e9 2f       	mov	r30, r25
 330:	0e 94 87 02 	call	0x50e	; 0x50e <__fp_split3>
 334:	58 f3       	brcs	.-42     	; 0x30c <__addsf3+0xc>
 336:	ba 17       	cp	r27, r26
 338:	62 07       	cpc	r22, r18
 33a:	73 07       	cpc	r23, r19
 33c:	84 07       	cpc	r24, r20
 33e:	95 07       	cpc	r25, r21
 340:	20 f0       	brcs	.+8      	; 0x34a <__addsf3x+0x1c>
 342:	79 f4       	brne	.+30     	; 0x362 <__addsf3x+0x34>
 344:	a6 f5       	brtc	.+104    	; 0x3ae <__addsf3x+0x80>
 346:	0c 94 a9 02 	jmp	0x552	; 0x552 <__fp_zero>
 34a:	0e f4       	brtc	.+2      	; 0x34e <__addsf3x+0x20>
 34c:	e0 95       	com	r30
 34e:	0b 2e       	mov	r0, r27
 350:	ba 2f       	mov	r27, r26
 352:	a0 2d       	mov	r26, r0
 354:	0b 01       	movw	r0, r22
 356:	b9 01       	movw	r22, r18
 358:	90 01       	movw	r18, r0
 35a:	0c 01       	movw	r0, r24
 35c:	ca 01       	movw	r24, r20
 35e:	a0 01       	movw	r20, r0
 360:	11 24       	eor	r1, r1
 362:	ff 27       	eor	r31, r31
 364:	59 1b       	sub	r21, r25
 366:	99 f0       	breq	.+38     	; 0x38e <__addsf3x+0x60>
 368:	59 3f       	cpi	r21, 0xF9	; 249
 36a:	50 f4       	brcc	.+20     	; 0x380 <__addsf3x+0x52>
 36c:	50 3e       	cpi	r21, 0xE0	; 224
 36e:	68 f1       	brcs	.+90     	; 0x3ca <__addsf3x+0x9c>
 370:	1a 16       	cp	r1, r26
 372:	f0 40       	sbci	r31, 0x00	; 0
 374:	a2 2f       	mov	r26, r18
 376:	23 2f       	mov	r18, r19
 378:	34 2f       	mov	r19, r20
 37a:	44 27       	eor	r20, r20
 37c:	58 5f       	subi	r21, 0xF8	; 248
 37e:	f3 cf       	rjmp	.-26     	; 0x366 <__addsf3x+0x38>
 380:	46 95       	lsr	r20
 382:	37 95       	ror	r19
 384:	27 95       	ror	r18
 386:	a7 95       	ror	r26
 388:	f0 40       	sbci	r31, 0x00	; 0
 38a:	53 95       	inc	r21
 38c:	c9 f7       	brne	.-14     	; 0x380 <__addsf3x+0x52>
 38e:	7e f4       	brtc	.+30     	; 0x3ae <__addsf3x+0x80>
 390:	1f 16       	cp	r1, r31
 392:	ba 0b       	sbc	r27, r26
 394:	62 0b       	sbc	r22, r18
 396:	73 0b       	sbc	r23, r19
 398:	84 0b       	sbc	r24, r20
 39a:	ba f0       	brmi	.+46     	; 0x3ca <__addsf3x+0x9c>
 39c:	91 50       	subi	r25, 0x01	; 1
 39e:	a1 f0       	breq	.+40     	; 0x3c8 <__addsf3x+0x9a>
 3a0:	ff 0f       	add	r31, r31
 3a2:	bb 1f       	adc	r27, r27
 3a4:	66 1f       	adc	r22, r22
 3a6:	77 1f       	adc	r23, r23
 3a8:	88 1f       	adc	r24, r24
 3aa:	c2 f7       	brpl	.-16     	; 0x39c <__addsf3x+0x6e>
 3ac:	0e c0       	rjmp	.+28     	; 0x3ca <__addsf3x+0x9c>
 3ae:	ba 0f       	add	r27, r26
 3b0:	62 1f       	adc	r22, r18
 3b2:	73 1f       	adc	r23, r19
 3b4:	84 1f       	adc	r24, r20
 3b6:	48 f4       	brcc	.+18     	; 0x3ca <__addsf3x+0x9c>
 3b8:	87 95       	ror	r24
 3ba:	77 95       	ror	r23
 3bc:	67 95       	ror	r22
 3be:	b7 95       	ror	r27
 3c0:	f7 95       	ror	r31
 3c2:	9e 3f       	cpi	r25, 0xFE	; 254
 3c4:	08 f0       	brcs	.+2      	; 0x3c8 <__addsf3x+0x9a>
 3c6:	b0 cf       	rjmp	.-160    	; 0x328 <__addsf3+0x28>
 3c8:	93 95       	inc	r25
 3ca:	88 0f       	add	r24, r24
 3cc:	08 f0       	brcs	.+2      	; 0x3d0 <__addsf3x+0xa2>
 3ce:	99 27       	eor	r25, r25
 3d0:	ee 0f       	add	r30, r30
 3d2:	97 95       	ror	r25
 3d4:	87 95       	ror	r24
 3d6:	08 95       	ret

000003d8 <__fixsfsi>:
 3d8:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <__fixunssfsi>
 3dc:	68 94       	set
 3de:	b1 11       	cpse	r27, r1
 3e0:	0c 94 aa 02 	jmp	0x554	; 0x554 <__fp_szero>
 3e4:	08 95       	ret

000003e6 <__fixunssfsi>:
 3e6:	0e 94 8f 02 	call	0x51e	; 0x51e <__fp_splitA>
 3ea:	88 f0       	brcs	.+34     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 3ec:	9f 57       	subi	r25, 0x7F	; 127
 3ee:	98 f0       	brcs	.+38     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 3f0:	b9 2f       	mov	r27, r25
 3f2:	99 27       	eor	r25, r25
 3f4:	b7 51       	subi	r27, 0x17	; 23
 3f6:	b0 f0       	brcs	.+44     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 3f8:	e1 f0       	breq	.+56     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 3fa:	66 0f       	add	r22, r22
 3fc:	77 1f       	adc	r23, r23
 3fe:	88 1f       	adc	r24, r24
 400:	99 1f       	adc	r25, r25
 402:	1a f0       	brmi	.+6      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 404:	ba 95       	dec	r27
 406:	c9 f7       	brne	.-14     	; 0x3fa <__fixunssfsi+0x14>
 408:	14 c0       	rjmp	.+40     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 40a:	b1 30       	cpi	r27, 0x01	; 1
 40c:	91 f0       	breq	.+36     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 40e:	0e 94 a9 02 	call	0x552	; 0x552 <__fp_zero>
 412:	b1 e0       	ldi	r27, 0x01	; 1
 414:	08 95       	ret
 416:	0c 94 a9 02 	jmp	0x552	; 0x552 <__fp_zero>
 41a:	67 2f       	mov	r22, r23
 41c:	78 2f       	mov	r23, r24
 41e:	88 27       	eor	r24, r24
 420:	b8 5f       	subi	r27, 0xF8	; 248
 422:	39 f0       	breq	.+14     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 424:	b9 3f       	cpi	r27, 0xF9	; 249
 426:	cc f3       	brlt	.-14     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 428:	86 95       	lsr	r24
 42a:	77 95       	ror	r23
 42c:	67 95       	ror	r22
 42e:	b3 95       	inc	r27
 430:	d9 f7       	brne	.-10     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 432:	3e f4       	brtc	.+14     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 434:	90 95       	com	r25
 436:	80 95       	com	r24
 438:	70 95       	com	r23
 43a:	61 95       	neg	r22
 43c:	7f 4f       	sbci	r23, 0xFF	; 255
 43e:	8f 4f       	sbci	r24, 0xFF	; 255
 440:	9f 4f       	sbci	r25, 0xFF	; 255
 442:	08 95       	ret

00000444 <__floatunsisf>:
 444:	e8 94       	clt
 446:	09 c0       	rjmp	.+18     	; 0x45a <__floatsisf+0x12>

00000448 <__floatsisf>:
 448:	97 fb       	bst	r25, 7
 44a:	3e f4       	brtc	.+14     	; 0x45a <__floatsisf+0x12>
 44c:	90 95       	com	r25
 44e:	80 95       	com	r24
 450:	70 95       	com	r23
 452:	61 95       	neg	r22
 454:	7f 4f       	sbci	r23, 0xFF	; 255
 456:	8f 4f       	sbci	r24, 0xFF	; 255
 458:	9f 4f       	sbci	r25, 0xFF	; 255
 45a:	99 23       	and	r25, r25
 45c:	a9 f0       	breq	.+42     	; 0x488 <__floatsisf+0x40>
 45e:	f9 2f       	mov	r31, r25
 460:	96 e9       	ldi	r25, 0x96	; 150
 462:	bb 27       	eor	r27, r27
 464:	93 95       	inc	r25
 466:	f6 95       	lsr	r31
 468:	87 95       	ror	r24
 46a:	77 95       	ror	r23
 46c:	67 95       	ror	r22
 46e:	b7 95       	ror	r27
 470:	f1 11       	cpse	r31, r1
 472:	f8 cf       	rjmp	.-16     	; 0x464 <__floatsisf+0x1c>
 474:	fa f4       	brpl	.+62     	; 0x4b4 <__floatsisf+0x6c>
 476:	bb 0f       	add	r27, r27
 478:	11 f4       	brne	.+4      	; 0x47e <__floatsisf+0x36>
 47a:	60 ff       	sbrs	r22, 0
 47c:	1b c0       	rjmp	.+54     	; 0x4b4 <__floatsisf+0x6c>
 47e:	6f 5f       	subi	r22, 0xFF	; 255
 480:	7f 4f       	sbci	r23, 0xFF	; 255
 482:	8f 4f       	sbci	r24, 0xFF	; 255
 484:	9f 4f       	sbci	r25, 0xFF	; 255
 486:	16 c0       	rjmp	.+44     	; 0x4b4 <__floatsisf+0x6c>
 488:	88 23       	and	r24, r24
 48a:	11 f0       	breq	.+4      	; 0x490 <__floatsisf+0x48>
 48c:	96 e9       	ldi	r25, 0x96	; 150
 48e:	11 c0       	rjmp	.+34     	; 0x4b2 <__floatsisf+0x6a>
 490:	77 23       	and	r23, r23
 492:	21 f0       	breq	.+8      	; 0x49c <__floatsisf+0x54>
 494:	9e e8       	ldi	r25, 0x8E	; 142
 496:	87 2f       	mov	r24, r23
 498:	76 2f       	mov	r23, r22
 49a:	05 c0       	rjmp	.+10     	; 0x4a6 <__floatsisf+0x5e>
 49c:	66 23       	and	r22, r22
 49e:	71 f0       	breq	.+28     	; 0x4bc <__floatsisf+0x74>
 4a0:	96 e8       	ldi	r25, 0x86	; 134
 4a2:	86 2f       	mov	r24, r22
 4a4:	70 e0       	ldi	r23, 0x00	; 0
 4a6:	60 e0       	ldi	r22, 0x00	; 0
 4a8:	2a f0       	brmi	.+10     	; 0x4b4 <__floatsisf+0x6c>
 4aa:	9a 95       	dec	r25
 4ac:	66 0f       	add	r22, r22
 4ae:	77 1f       	adc	r23, r23
 4b0:	88 1f       	adc	r24, r24
 4b2:	da f7       	brpl	.-10     	; 0x4aa <__floatsisf+0x62>
 4b4:	88 0f       	add	r24, r24
 4b6:	96 95       	lsr	r25
 4b8:	87 95       	ror	r24
 4ba:	97 f9       	bld	r25, 7
 4bc:	08 95       	ret

000004be <__fp_inf>:
 4be:	97 f9       	bld	r25, 7
 4c0:	9f 67       	ori	r25, 0x7F	; 127
 4c2:	80 e8       	ldi	r24, 0x80	; 128
 4c4:	70 e0       	ldi	r23, 0x00	; 0
 4c6:	60 e0       	ldi	r22, 0x00	; 0
 4c8:	08 95       	ret

000004ca <__fp_nan>:
 4ca:	9f ef       	ldi	r25, 0xFF	; 255
 4cc:	80 ec       	ldi	r24, 0xC0	; 192
 4ce:	08 95       	ret

000004d0 <__fp_pscA>:
 4d0:	00 24       	eor	r0, r0
 4d2:	0a 94       	dec	r0
 4d4:	16 16       	cp	r1, r22
 4d6:	17 06       	cpc	r1, r23
 4d8:	18 06       	cpc	r1, r24
 4da:	09 06       	cpc	r0, r25
 4dc:	08 95       	ret

000004de <__fp_pscB>:
 4de:	00 24       	eor	r0, r0
 4e0:	0a 94       	dec	r0
 4e2:	12 16       	cp	r1, r18
 4e4:	13 06       	cpc	r1, r19
 4e6:	14 06       	cpc	r1, r20
 4e8:	05 06       	cpc	r0, r21
 4ea:	08 95       	ret

000004ec <__fp_round>:
 4ec:	09 2e       	mov	r0, r25
 4ee:	03 94       	inc	r0
 4f0:	00 0c       	add	r0, r0
 4f2:	11 f4       	brne	.+4      	; 0x4f8 <__fp_round+0xc>
 4f4:	88 23       	and	r24, r24
 4f6:	52 f0       	brmi	.+20     	; 0x50c <__fp_round+0x20>
 4f8:	bb 0f       	add	r27, r27
 4fa:	40 f4       	brcc	.+16     	; 0x50c <__fp_round+0x20>
 4fc:	bf 2b       	or	r27, r31
 4fe:	11 f4       	brne	.+4      	; 0x504 <__fp_round+0x18>
 500:	60 ff       	sbrs	r22, 0
 502:	04 c0       	rjmp	.+8      	; 0x50c <__fp_round+0x20>
 504:	6f 5f       	subi	r22, 0xFF	; 255
 506:	7f 4f       	sbci	r23, 0xFF	; 255
 508:	8f 4f       	sbci	r24, 0xFF	; 255
 50a:	9f 4f       	sbci	r25, 0xFF	; 255
 50c:	08 95       	ret

0000050e <__fp_split3>:
 50e:	57 fd       	sbrc	r21, 7
 510:	90 58       	subi	r25, 0x80	; 128
 512:	44 0f       	add	r20, r20
 514:	55 1f       	adc	r21, r21
 516:	59 f0       	breq	.+22     	; 0x52e <__fp_splitA+0x10>
 518:	5f 3f       	cpi	r21, 0xFF	; 255
 51a:	71 f0       	breq	.+28     	; 0x538 <__fp_splitA+0x1a>
 51c:	47 95       	ror	r20

0000051e <__fp_splitA>:
 51e:	88 0f       	add	r24, r24
 520:	97 fb       	bst	r25, 7
 522:	99 1f       	adc	r25, r25
 524:	61 f0       	breq	.+24     	; 0x53e <__fp_splitA+0x20>
 526:	9f 3f       	cpi	r25, 0xFF	; 255
 528:	79 f0       	breq	.+30     	; 0x548 <__fp_splitA+0x2a>
 52a:	87 95       	ror	r24
 52c:	08 95       	ret
 52e:	12 16       	cp	r1, r18
 530:	13 06       	cpc	r1, r19
 532:	14 06       	cpc	r1, r20
 534:	55 1f       	adc	r21, r21
 536:	f2 cf       	rjmp	.-28     	; 0x51c <__fp_split3+0xe>
 538:	46 95       	lsr	r20
 53a:	f1 df       	rcall	.-30     	; 0x51e <__fp_splitA>
 53c:	08 c0       	rjmp	.+16     	; 0x54e <__fp_splitA+0x30>
 53e:	16 16       	cp	r1, r22
 540:	17 06       	cpc	r1, r23
 542:	18 06       	cpc	r1, r24
 544:	99 1f       	adc	r25, r25
 546:	f1 cf       	rjmp	.-30     	; 0x52a <__fp_splitA+0xc>
 548:	86 95       	lsr	r24
 54a:	71 05       	cpc	r23, r1
 54c:	61 05       	cpc	r22, r1
 54e:	08 94       	sec
 550:	08 95       	ret

00000552 <__fp_zero>:
 552:	e8 94       	clt

00000554 <__fp_szero>:
 554:	bb 27       	eor	r27, r27
 556:	66 27       	eor	r22, r22
 558:	77 27       	eor	r23, r23
 55a:	cb 01       	movw	r24, r22
 55c:	97 f9       	bld	r25, 7
 55e:	08 95       	ret

00000560 <__mulsf3>:
 560:	0e 94 c3 02 	call	0x586	; 0x586 <__mulsf3x>
 564:	0c 94 76 02 	jmp	0x4ec	; 0x4ec <__fp_round>
 568:	0e 94 68 02 	call	0x4d0	; 0x4d0 <__fp_pscA>
 56c:	38 f0       	brcs	.+14     	; 0x57c <__mulsf3+0x1c>
 56e:	0e 94 6f 02 	call	0x4de	; 0x4de <__fp_pscB>
 572:	20 f0       	brcs	.+8      	; 0x57c <__mulsf3+0x1c>
 574:	95 23       	and	r25, r21
 576:	11 f0       	breq	.+4      	; 0x57c <__mulsf3+0x1c>
 578:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__fp_inf>
 57c:	0c 94 65 02 	jmp	0x4ca	; 0x4ca <__fp_nan>
 580:	11 24       	eor	r1, r1
 582:	0c 94 aa 02 	jmp	0x554	; 0x554 <__fp_szero>

00000586 <__mulsf3x>:
 586:	0e 94 87 02 	call	0x50e	; 0x50e <__fp_split3>
 58a:	70 f3       	brcs	.-36     	; 0x568 <__mulsf3+0x8>

0000058c <__mulsf3_pse>:
 58c:	95 9f       	mul	r25, r21
 58e:	c1 f3       	breq	.-16     	; 0x580 <__mulsf3+0x20>
 590:	95 0f       	add	r25, r21
 592:	50 e0       	ldi	r21, 0x00	; 0
 594:	55 1f       	adc	r21, r21
 596:	62 9f       	mul	r22, r18
 598:	f0 01       	movw	r30, r0
 59a:	72 9f       	mul	r23, r18
 59c:	bb 27       	eor	r27, r27
 59e:	f0 0d       	add	r31, r0
 5a0:	b1 1d       	adc	r27, r1
 5a2:	63 9f       	mul	r22, r19
 5a4:	aa 27       	eor	r26, r26
 5a6:	f0 0d       	add	r31, r0
 5a8:	b1 1d       	adc	r27, r1
 5aa:	aa 1f       	adc	r26, r26
 5ac:	64 9f       	mul	r22, r20
 5ae:	66 27       	eor	r22, r22
 5b0:	b0 0d       	add	r27, r0
 5b2:	a1 1d       	adc	r26, r1
 5b4:	66 1f       	adc	r22, r22
 5b6:	82 9f       	mul	r24, r18
 5b8:	22 27       	eor	r18, r18
 5ba:	b0 0d       	add	r27, r0
 5bc:	a1 1d       	adc	r26, r1
 5be:	62 1f       	adc	r22, r18
 5c0:	73 9f       	mul	r23, r19
 5c2:	b0 0d       	add	r27, r0
 5c4:	a1 1d       	adc	r26, r1
 5c6:	62 1f       	adc	r22, r18
 5c8:	83 9f       	mul	r24, r19
 5ca:	a0 0d       	add	r26, r0
 5cc:	61 1d       	adc	r22, r1
 5ce:	22 1f       	adc	r18, r18
 5d0:	74 9f       	mul	r23, r20
 5d2:	33 27       	eor	r19, r19
 5d4:	a0 0d       	add	r26, r0
 5d6:	61 1d       	adc	r22, r1
 5d8:	23 1f       	adc	r18, r19
 5da:	84 9f       	mul	r24, r20
 5dc:	60 0d       	add	r22, r0
 5de:	21 1d       	adc	r18, r1
 5e0:	82 2f       	mov	r24, r18
 5e2:	76 2f       	mov	r23, r22
 5e4:	6a 2f       	mov	r22, r26
 5e6:	11 24       	eor	r1, r1
 5e8:	9f 57       	subi	r25, 0x7F	; 127
 5ea:	50 40       	sbci	r21, 0x00	; 0
 5ec:	9a f0       	brmi	.+38     	; 0x614 <__mulsf3_pse+0x88>
 5ee:	f1 f0       	breq	.+60     	; 0x62c <__mulsf3_pse+0xa0>
 5f0:	88 23       	and	r24, r24
 5f2:	4a f0       	brmi	.+18     	; 0x606 <__mulsf3_pse+0x7a>
 5f4:	ee 0f       	add	r30, r30
 5f6:	ff 1f       	adc	r31, r31
 5f8:	bb 1f       	adc	r27, r27
 5fa:	66 1f       	adc	r22, r22
 5fc:	77 1f       	adc	r23, r23
 5fe:	88 1f       	adc	r24, r24
 600:	91 50       	subi	r25, 0x01	; 1
 602:	50 40       	sbci	r21, 0x00	; 0
 604:	a9 f7       	brne	.-22     	; 0x5f0 <__mulsf3_pse+0x64>
 606:	9e 3f       	cpi	r25, 0xFE	; 254
 608:	51 05       	cpc	r21, r1
 60a:	80 f0       	brcs	.+32     	; 0x62c <__mulsf3_pse+0xa0>
 60c:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__fp_inf>
 610:	0c 94 aa 02 	jmp	0x554	; 0x554 <__fp_szero>
 614:	5f 3f       	cpi	r21, 0xFF	; 255
 616:	e4 f3       	brlt	.-8      	; 0x610 <__mulsf3_pse+0x84>
 618:	98 3e       	cpi	r25, 0xE8	; 232
 61a:	d4 f3       	brlt	.-12     	; 0x610 <__mulsf3_pse+0x84>
 61c:	86 95       	lsr	r24
 61e:	77 95       	ror	r23
 620:	67 95       	ror	r22
 622:	b7 95       	ror	r27
 624:	f7 95       	ror	r31
 626:	e7 95       	ror	r30
 628:	9f 5f       	subi	r25, 0xFF	; 255
 62a:	c1 f7       	brne	.-16     	; 0x61c <__mulsf3_pse+0x90>
 62c:	fe 2b       	or	r31, r30
 62e:	88 0f       	add	r24, r24
 630:	91 1d       	adc	r25, r1
 632:	96 95       	lsr	r25
 634:	87 95       	ror	r24
 636:	97 f9       	bld	r25, 7
 638:	08 95       	ret

0000063a <_exit>:
 63a:	f8 94       	cli

0000063c <__stop_program>:
 63c:	ff cf       	rjmp	.-2      	; 0x63c <__stop_program>
