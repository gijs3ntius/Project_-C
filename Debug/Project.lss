
Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000688  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000614  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002b  00800100  00800100  00000688  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000688  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  000006f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000010a6  00000000  00000000  00000858  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b01  00000000  00000000  000018fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000944  00000000  00000000  000023ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002a0  00000000  00000000  00002d44  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005f3  00000000  00000000  00002fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006a7  00000000  00000000  000035d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00003c7e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e1       	ldi	r30, 0x14	; 20
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 32       	cpi	r26, 0x2B	; 43
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 8b 00 	call	0x116	; 0x116 <main>
  9e:	0c 94 08 03 	jmp	0x610	; 0x610 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_11>:
  determined by the timer settings in SCH_Init_T1().

-*------------------------------------------------------------------*/

ISR(TIMER1_COMPA_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	3f 93       	push	r19
  b4:	8f 93       	push	r24
  b6:	9f 93       	push	r25
  b8:	af 93       	push	r26
  ba:	bf 93       	push	r27
  bc:	ef 93       	push	r30
  be:	ff 93       	push	r31
  c0:	e0 e0       	ldi	r30, 0x00	; 0
  c2:	f1 e0       	ldi	r31, 0x01	; 1
  c4:	23 e2       	ldi	r18, 0x23	; 35
  c6:	31 e0       	ldi	r19, 0x01	; 1
   unsigned char Index;
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
   {
      // Check if there is a task at this location
      if(SCH_tasks_G[Index].pTask)
  c8:	80 81       	ld	r24, Z
  ca:	91 81       	ldd	r25, Z+1	; 0x01
  cc:	89 2b       	or	r24, r25
  ce:	91 f0       	breq	.+36     	; 0xf4 <__vector_11+0x4e>
      {
         if(SCH_tasks_G[Index].Delay == 0)
  d0:	82 81       	ldd	r24, Z+2	; 0x02
  d2:	93 81       	ldd	r25, Z+3	; 0x03
  d4:	00 97       	sbiw	r24, 0x00	; 0
  d6:	59 f4       	brne	.+22     	; 0xee <__vector_11+0x48>
         {
            // The task is due to run, Inc. the 'RunMe' flag
            SCH_tasks_G[Index].RunMe += 1;
  d8:	86 81       	ldd	r24, Z+6	; 0x06
  da:	8f 5f       	subi	r24, 0xFF	; 255
  dc:	86 83       	std	Z+6, r24	; 0x06

            if(SCH_tasks_G[Index].Period)
  de:	84 81       	ldd	r24, Z+4	; 0x04
  e0:	95 81       	ldd	r25, Z+5	; 0x05
  e2:	00 97       	sbiw	r24, 0x00	; 0
  e4:	39 f0       	breq	.+14     	; 0xf4 <__vector_11+0x4e>
            {
               // Schedule periodic tasks to run again
               SCH_tasks_G[Index].Delay = SCH_tasks_G[Index].Period;
               SCH_tasks_G[Index].Delay -= 1;
  e6:	01 97       	sbiw	r24, 0x01	; 1
  e8:	93 83       	std	Z+3, r25	; 0x03
  ea:	82 83       	std	Z+2, r24	; 0x02
  ec:	03 c0       	rjmp	.+6      	; 0xf4 <__vector_11+0x4e>
            }
         }
         else
         {
            // Not yet ready to run: just decrement the delay
            SCH_tasks_G[Index].Delay -= 1;
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	93 83       	std	Z+3, r25	; 0x03
  f2:	82 83       	std	Z+2, r24	; 0x02
  f4:	37 96       	adiw	r30, 0x07	; 7
-*------------------------------------------------------------------*/

ISR(TIMER1_COMPA_vect)
{
   unsigned char Index;
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
  f6:	e2 17       	cp	r30, r18
  f8:	f3 07       	cpc	r31, r19
  fa:	31 f7       	brne	.-52     	; 0xc8 <__vector_11+0x22>
            // Not yet ready to run: just decrement the delay
            SCH_tasks_G[Index].Delay -= 1;
         }
      }
   }
}
  fc:	ff 91       	pop	r31
  fe:	ef 91       	pop	r30
 100:	bf 91       	pop	r27
 102:	af 91       	pop	r26
 104:	9f 91       	pop	r25
 106:	8f 91       	pop	r24
 108:	3f 91       	pop	r19
 10a:	2f 91       	pop	r18
 10c:	0f 90       	pop	r0
 10e:	0f be       	out	0x3f, r0	; 63
 110:	0f 90       	pop	r0
 112:	1f 90       	pop	r1
 114:	18 95       	reti

00000116 <main>:



int main(void){
	
	initSerial();
 116:	0e 94 c1 01 	call	0x382	; 0x382 <initSerial>
	
	while(1){
		transmitSerial(getDistance());
 11a:	0e 94 b2 01 	call	0x364	; 0x364 <getDistance>
 11e:	0e 94 cf 01 	call	0x39e	; 0x39e <transmitSerial>
 122:	fb cf       	rjmp	.-10     	; 0x11a <main+0x4>

00000124 <digital_config>:

/*
 * Sets a digital pin to get input or output
 */
void digital_config(int pin, int value) {
	if(pin < 8) {
 124:	88 30       	cpi	r24, 0x08	; 8
 126:	91 05       	cpc	r25, r1
 128:	ec f4       	brge	.+58     	; 0x164 <digital_config+0x40>
		if(value == 0) {
 12a:	67 2b       	or	r22, r23
 12c:	71 f4       	brne	.+28     	; 0x14a <digital_config+0x26>
			DDRD = DDRD & ~(1 << pin);
 12e:	4a b1       	in	r20, 0x0a	; 10
 130:	21 e0       	ldi	r18, 0x01	; 1
 132:	30 e0       	ldi	r19, 0x00	; 0
 134:	b9 01       	movw	r22, r18
 136:	02 c0       	rjmp	.+4      	; 0x13c <digital_config+0x18>
 138:	66 0f       	add	r22, r22
 13a:	77 1f       	adc	r23, r23
 13c:	8a 95       	dec	r24
 13e:	e2 f7       	brpl	.-8      	; 0x138 <digital_config+0x14>
 140:	cb 01       	movw	r24, r22
 142:	80 95       	com	r24
 144:	84 23       	and	r24, r20
 146:	8a b9       	out	0x0a, r24	; 10
 148:	08 95       	ret
		} else {
			DDRD = DDRD | (1 << pin);
 14a:	4a b1       	in	r20, 0x0a	; 10
 14c:	21 e0       	ldi	r18, 0x01	; 1
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	b9 01       	movw	r22, r18
 152:	02 c0       	rjmp	.+4      	; 0x158 <digital_config+0x34>
 154:	66 0f       	add	r22, r22
 156:	77 1f       	adc	r23, r23
 158:	8a 95       	dec	r24
 15a:	e2 f7       	brpl	.-8      	; 0x154 <digital_config+0x30>
 15c:	cb 01       	movw	r24, r22
 15e:	84 2b       	or	r24, r20
 160:	8a b9       	out	0x0a, r24	; 10
 162:	08 95       	ret
		}
		
	} else {
		if(value == 0) {
 164:	67 2b       	or	r22, r23
 166:	b1 f4       	brne	.+44     	; 0x194 <digital_config+0x70>
			DDRB = DDRB & ~(1 << (pin%8));
 168:	44 b1       	in	r20, 0x04	; 4
 16a:	87 70       	andi	r24, 0x07	; 7
 16c:	90 78       	andi	r25, 0x80	; 128
 16e:	99 23       	and	r25, r25
 170:	24 f4       	brge	.+8      	; 0x17a <digital_config+0x56>
 172:	01 97       	sbiw	r24, 0x01	; 1
 174:	88 6f       	ori	r24, 0xF8	; 248
 176:	9f 6f       	ori	r25, 0xFF	; 255
 178:	01 96       	adiw	r24, 0x01	; 1
 17a:	21 e0       	ldi	r18, 0x01	; 1
 17c:	30 e0       	ldi	r19, 0x00	; 0
 17e:	b9 01       	movw	r22, r18
 180:	02 c0       	rjmp	.+4      	; 0x186 <digital_config+0x62>
 182:	66 0f       	add	r22, r22
 184:	77 1f       	adc	r23, r23
 186:	8a 95       	dec	r24
 188:	e2 f7       	brpl	.-8      	; 0x182 <digital_config+0x5e>
 18a:	cb 01       	movw	r24, r22
 18c:	80 95       	com	r24
 18e:	84 23       	and	r24, r20
 190:	84 b9       	out	0x04, r24	; 4
 192:	08 95       	ret
		} else {
			DDRB = DDRB | (1 << (pin%8));
 194:	44 b1       	in	r20, 0x04	; 4
 196:	87 70       	andi	r24, 0x07	; 7
 198:	90 78       	andi	r25, 0x80	; 128
 19a:	99 23       	and	r25, r25
 19c:	24 f4       	brge	.+8      	; 0x1a6 <digital_config+0x82>
 19e:	01 97       	sbiw	r24, 0x01	; 1
 1a0:	88 6f       	ori	r24, 0xF8	; 248
 1a2:	9f 6f       	ori	r25, 0xFF	; 255
 1a4:	01 96       	adiw	r24, 0x01	; 1
 1a6:	21 e0       	ldi	r18, 0x01	; 1
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	b9 01       	movw	r22, r18
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <digital_config+0x8e>
 1ae:	66 0f       	add	r22, r22
 1b0:	77 1f       	adc	r23, r23
 1b2:	8a 95       	dec	r24
 1b4:	e2 f7       	brpl	.-8      	; 0x1ae <digital_config+0x8a>
 1b6:	cb 01       	movw	r24, r22
 1b8:	84 2b       	or	r24, r20
 1ba:	84 b9       	out	0x04, r24	; 4
 1bc:	08 95       	ret

000001be <digital_write>:

/*
 * Sets a digital pin to 0 or 1
 */
void digital_write(int pin, int value) {
	if(pin < 8) {
 1be:	88 30       	cpi	r24, 0x08	; 8
 1c0:	91 05       	cpc	r25, r1
 1c2:	ec f4       	brge	.+58     	; 0x1fe <digital_write+0x40>
		if(value == 0) {
 1c4:	67 2b       	or	r22, r23
 1c6:	71 f4       	brne	.+28     	; 0x1e4 <digital_write+0x26>
			PORTD = PORTD & ~(1 << pin);
 1c8:	4b b1       	in	r20, 0x0b	; 11
 1ca:	21 e0       	ldi	r18, 0x01	; 1
 1cc:	30 e0       	ldi	r19, 0x00	; 0
 1ce:	b9 01       	movw	r22, r18
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <digital_write+0x18>
 1d2:	66 0f       	add	r22, r22
 1d4:	77 1f       	adc	r23, r23
 1d6:	8a 95       	dec	r24
 1d8:	e2 f7       	brpl	.-8      	; 0x1d2 <digital_write+0x14>
 1da:	cb 01       	movw	r24, r22
 1dc:	80 95       	com	r24
 1de:	84 23       	and	r24, r20
 1e0:	8b b9       	out	0x0b, r24	; 11
 1e2:	08 95       	ret
		} else {
			PORTD = PORTD | (1 << pin);
 1e4:	4b b1       	in	r20, 0x0b	; 11
 1e6:	21 e0       	ldi	r18, 0x01	; 1
 1e8:	30 e0       	ldi	r19, 0x00	; 0
 1ea:	b9 01       	movw	r22, r18
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <digital_write+0x34>
 1ee:	66 0f       	add	r22, r22
 1f0:	77 1f       	adc	r23, r23
 1f2:	8a 95       	dec	r24
 1f4:	e2 f7       	brpl	.-8      	; 0x1ee <digital_write+0x30>
 1f6:	cb 01       	movw	r24, r22
 1f8:	84 2b       	or	r24, r20
 1fa:	8b b9       	out	0x0b, r24	; 11
 1fc:	08 95       	ret
		}
		
	} else {
		if(value == 0) {
 1fe:	67 2b       	or	r22, r23
 200:	b1 f4       	brne	.+44     	; 0x22e <digital_write+0x70>
			PORTB = PORTB & ~(1 << (pin%8));
 202:	45 b1       	in	r20, 0x05	; 5
 204:	87 70       	andi	r24, 0x07	; 7
 206:	90 78       	andi	r25, 0x80	; 128
 208:	99 23       	and	r25, r25
 20a:	24 f4       	brge	.+8      	; 0x214 <digital_write+0x56>
 20c:	01 97       	sbiw	r24, 0x01	; 1
 20e:	88 6f       	ori	r24, 0xF8	; 248
 210:	9f 6f       	ori	r25, 0xFF	; 255
 212:	01 96       	adiw	r24, 0x01	; 1
 214:	21 e0       	ldi	r18, 0x01	; 1
 216:	30 e0       	ldi	r19, 0x00	; 0
 218:	b9 01       	movw	r22, r18
 21a:	02 c0       	rjmp	.+4      	; 0x220 <digital_write+0x62>
 21c:	66 0f       	add	r22, r22
 21e:	77 1f       	adc	r23, r23
 220:	8a 95       	dec	r24
 222:	e2 f7       	brpl	.-8      	; 0x21c <digital_write+0x5e>
 224:	cb 01       	movw	r24, r22
 226:	80 95       	com	r24
 228:	84 23       	and	r24, r20
 22a:	85 b9       	out	0x05, r24	; 5
 22c:	08 95       	ret
		} else {
			PORTB = PORTB | (1 << (pin%8));
 22e:	45 b1       	in	r20, 0x05	; 5
 230:	87 70       	andi	r24, 0x07	; 7
 232:	90 78       	andi	r25, 0x80	; 128
 234:	99 23       	and	r25, r25
 236:	24 f4       	brge	.+8      	; 0x240 <digital_write+0x82>
 238:	01 97       	sbiw	r24, 0x01	; 1
 23a:	88 6f       	ori	r24, 0xF8	; 248
 23c:	9f 6f       	ori	r25, 0xFF	; 255
 23e:	01 96       	adiw	r24, 0x01	; 1
 240:	21 e0       	ldi	r18, 0x01	; 1
 242:	30 e0       	ldi	r19, 0x00	; 0
 244:	b9 01       	movw	r22, r18
 246:	02 c0       	rjmp	.+4      	; 0x24c <digital_write+0x8e>
 248:	66 0f       	add	r22, r22
 24a:	77 1f       	adc	r23, r23
 24c:	8a 95       	dec	r24
 24e:	e2 f7       	brpl	.-8      	; 0x248 <digital_write+0x8a>
 250:	cb 01       	movw	r24, r22
 252:	84 2b       	or	r24, r20
 254:	85 b9       	out	0x05, r24	; 5
 256:	08 95       	ret

00000258 <digital_read>:

/*
 * Gets a value from a digital pin 1 or 0
 */
int digital_read(int pin) {
	if (pin < 8)
 258:	88 30       	cpi	r24, 0x08	; 8
 25a:	91 05       	cpc	r25, r1
 25c:	b4 f4       	brge	.+44     	; 0x28a <digital_read+0x32>
	{
		return (PIND & (1 << (pin%8)));
 25e:	29 b1       	in	r18, 0x09	; 9
 260:	87 70       	andi	r24, 0x07	; 7
 262:	90 78       	andi	r25, 0x80	; 128
 264:	99 23       	and	r25, r25
 266:	24 f4       	brge	.+8      	; 0x270 <digital_read+0x18>
 268:	01 97       	sbiw	r24, 0x01	; 1
 26a:	88 6f       	ori	r24, 0xF8	; 248
 26c:	9f 6f       	ori	r25, 0xFF	; 255
 26e:	01 96       	adiw	r24, 0x01	; 1
 270:	41 e0       	ldi	r20, 0x01	; 1
 272:	50 e0       	ldi	r21, 0x00	; 0
 274:	ba 01       	movw	r22, r20
 276:	02 c0       	rjmp	.+4      	; 0x27c <digital_read+0x24>
 278:	66 0f       	add	r22, r22
 27a:	77 1f       	adc	r23, r23
 27c:	8a 95       	dec	r24
 27e:	e2 f7       	brpl	.-8      	; 0x278 <digital_read+0x20>
 280:	cb 01       	movw	r24, r22
 282:	30 e0       	ldi	r19, 0x00	; 0
 284:	82 23       	and	r24, r18
 286:	93 23       	and	r25, r19
 288:	08 95       	ret
	} else {
		return (PINB & (1 << (pin%8)));
 28a:	23 b1       	in	r18, 0x03	; 3
 28c:	87 70       	andi	r24, 0x07	; 7
 28e:	90 78       	andi	r25, 0x80	; 128
 290:	99 23       	and	r25, r25
 292:	24 f4       	brge	.+8      	; 0x29c <digital_read+0x44>
 294:	01 97       	sbiw	r24, 0x01	; 1
 296:	88 6f       	ori	r24, 0xF8	; 248
 298:	9f 6f       	ori	r25, 0xFF	; 255
 29a:	01 96       	adiw	r24, 0x01	; 1
 29c:	41 e0       	ldi	r20, 0x01	; 1
 29e:	50 e0       	ldi	r21, 0x00	; 0
 2a0:	ba 01       	movw	r22, r20
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <digital_read+0x50>
 2a4:	66 0f       	add	r22, r22
 2a6:	77 1f       	adc	r23, r23
 2a8:	8a 95       	dec	r24
 2aa:	e2 f7       	brpl	.-8      	; 0x2a4 <digital_read+0x4c>
 2ac:	cb 01       	movw	r24, r22
 2ae:	30 e0       	ldi	r19, 0x00	; 0
 2b0:	82 23       	and	r24, r18
 2b2:	93 23       	and	r25, r19
	}
}
 2b4:	08 95       	ret

000002b6 <distance>:
	duration = digital_read(echoPin);
	return duration;
}

int distance(duration){
	dis = (duration * 0.034) / 2;
 2b6:	bc 01       	movw	r22, r24
 2b8:	99 0f       	add	r25, r25
 2ba:	88 0b       	sbc	r24, r24
 2bc:	99 0b       	sbc	r25, r25
 2be:	0e 94 0f 02 	call	0x41e	; 0x41e <__floatsisf>
 2c2:	26 e9       	ldi	r18, 0x96	; 150
 2c4:	33 e4       	ldi	r19, 0x43	; 67
 2c6:	4b e0       	ldi	r20, 0x0B	; 11
 2c8:	5d e3       	ldi	r21, 0x3D	; 61
 2ca:	0e 94 9b 02 	call	0x536	; 0x536 <__mulsf3>
 2ce:	20 e0       	ldi	r18, 0x00	; 0
 2d0:	30 e0       	ldi	r19, 0x00	; 0
 2d2:	40 e0       	ldi	r20, 0x00	; 0
 2d4:	5f e3       	ldi	r21, 0x3F	; 63
 2d6:	0e 94 9b 02 	call	0x536	; 0x536 <__mulsf3>
 2da:	0e 94 d7 01 	call	0x3ae	; 0x3ae <__fixsfsi>
 2de:	70 93 2a 01 	sts	0x012A, r23	; 0x80012a <dis+0x1>
 2e2:	60 93 29 01 	sts	0x0129, r22	; 0x800129 <dis>
	return dis;
}
 2e6:	cb 01       	movw	r24, r22
 2e8:	08 95       	ret

000002ea <setUpUltra>:
int dis;


/* Ultrasenoorsensor */
void setUpUltra(){
	digital_config(trigPin, OUT); // trigger pin wordt output
 2ea:	61 e0       	ldi	r22, 0x01	; 1
 2ec:	70 e0       	ldi	r23, 0x00	; 0
 2ee:	89 e0       	ldi	r24, 0x09	; 9
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	0e 94 92 00 	call	0x124	; 0x124 <digital_config>
	digital_config(echoPin, IN); // echo pin is input
 2f6:	60 e0       	ldi	r22, 0x00	; 0
 2f8:	70 e0       	ldi	r23, 0x00	; 0
 2fa:	8a e0       	ldi	r24, 0x0A	; 10
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	0e 94 92 00 	call	0x124	; 0x124 <digital_config>
 302:	08 95       	ret

00000304 <startPulse>:
}

void startPulse(){
	digital_write(trigPin, LOW); // zorg ervoor dat trigger leeg is!
 304:	60 e0       	ldi	r22, 0x00	; 0
 306:	70 e0       	ldi	r23, 0x00	; 0
 308:	89 e0       	ldi	r24, 0x09	; 9
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	0e 94 df 00 	call	0x1be	; 0x1be <digital_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 310:	83 ef       	ldi	r24, 0xF3	; 243
 312:	91 e0       	ldi	r25, 0x01	; 1
 314:	01 97       	sbiw	r24, 0x01	; 1
 316:	f1 f7       	brne	.-4      	; 0x314 <startPulse+0x10>
 318:	00 c0       	rjmp	.+0      	; 0x31a <startPulse+0x16>
 31a:	00 00       	nop
	_delay_ms(2);
	
	digital_write(trigPin, HIGH);
 31c:	61 e0       	ldi	r22, 0x01	; 1
 31e:	70 e0       	ldi	r23, 0x00	; 0
 320:	89 e0       	ldi	r24, 0x09	; 9
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	0e 94 df 00 	call	0x1be	; 0x1be <digital_write>
 328:	83 ec       	ldi	r24, 0xC3	; 195
 32a:	99 e0       	ldi	r25, 0x09	; 9
 32c:	01 97       	sbiw	r24, 0x01	; 1
 32e:	f1 f7       	brne	.-4      	; 0x32c <startPulse+0x28>
 330:	00 c0       	rjmp	.+0      	; 0x332 <startPulse+0x2e>
 332:	00 00       	nop
	_delay_ms(10);
	digital_write(trigPin, LOW);
 334:	60 e0       	ldi	r22, 0x00	; 0
 336:	70 e0       	ldi	r23, 0x00	; 0
 338:	89 e0       	ldi	r24, 0x09	; 9
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	0e 94 df 00 	call	0x1be	; 0x1be <digital_write>
 340:	08 95       	ret

00000342 <readPulse>:
	
}

long readPulse(){
	duration = digital_read(echoPin);
 342:	8a e0       	ldi	r24, 0x0A	; 10
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	0e 94 2c 01 	call	0x258	; 0x258 <digital_read>
 34a:	bc 01       	movw	r22, r24
 34c:	99 0f       	add	r25, r25
 34e:	88 0b       	sbc	r24, r24
 350:	99 0b       	sbc	r25, r25
 352:	60 93 25 01 	sts	0x0125, r22	; 0x800125 <duration>
 356:	70 93 26 01 	sts	0x0126, r23	; 0x800126 <duration+0x1>
 35a:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <duration+0x2>
 35e:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <duration+0x3>
	return duration;
}
 362:	08 95       	ret

00000364 <getDistance>:


/* dit is een soort van de main functie. Hierdoor krijg je de juiste afstand terug. Dit in scheduler gooien */
int getDistance(){
	
	setUpUltra();
 364:	0e 94 75 01 	call	0x2ea	; 0x2ea <setUpUltra>
	
	startPulse();
 368:	0e 94 82 01 	call	0x304	; 0x304 <startPulse>
	dis = distance(readPulse());
 36c:	0e 94 a1 01 	call	0x342	; 0x342 <readPulse>
 370:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <distance>
 374:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <dis+0x1>
 378:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <dis>
	
	return distance;
	
}
 37c:	8b e5       	ldi	r24, 0x5B	; 91
 37e:	91 e0       	ldi	r25, 0x01	; 1
 380:	08 95       	ret

00000382 <initSerial>:
uint8_t receiveSerial() {
	// wait for data to be received
	while ( !(UCSR0A & (1 << RXC0)) );
	// get and return received data from buffer
	return UDR0;
}
 382:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 386:	83 e3       	ldi	r24, 0x33	; 51
 388:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 38c:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 390:	88 e1       	ldi	r24, 0x18	; 24
 392:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 396:	86 e0       	ldi	r24, 0x06	; 6
 398:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 39c:	08 95       	ret

0000039e <transmitSerial>:

void transmitSerial(uint8_t data) {
	// wait for an empty transmit buffer
	// UDRE is set when the transmit buffer is empty
	loop_until_bit_is_set(UCSR0A, UDRE0);
 39e:	e0 ec       	ldi	r30, 0xC0	; 192
 3a0:	f0 e0       	ldi	r31, 0x00	; 0
 3a2:	90 81       	ld	r25, Z
 3a4:	95 ff       	sbrs	r25, 5
 3a6:	fd cf       	rjmp	.-6      	; 0x3a2 <transmitSerial+0x4>
	// send the data
	UDR0 = data;
 3a8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 3ac:	08 95       	ret

000003ae <__fixsfsi>:
 3ae:	0e 94 de 01 	call	0x3bc	; 0x3bc <__fixunssfsi>
 3b2:	68 94       	set
 3b4:	b1 11       	cpse	r27, r1
 3b6:	0c 94 95 02 	jmp	0x52a	; 0x52a <__fp_szero>
 3ba:	08 95       	ret

000003bc <__fixunssfsi>:
 3bc:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <__fp_splitA>
 3c0:	88 f0       	brcs	.+34     	; 0x3e4 <__fixunssfsi+0x28>
 3c2:	9f 57       	subi	r25, 0x7F	; 127
 3c4:	98 f0       	brcs	.+38     	; 0x3ec <__fixunssfsi+0x30>
 3c6:	b9 2f       	mov	r27, r25
 3c8:	99 27       	eor	r25, r25
 3ca:	b7 51       	subi	r27, 0x17	; 23
 3cc:	b0 f0       	brcs	.+44     	; 0x3fa <__fixunssfsi+0x3e>
 3ce:	e1 f0       	breq	.+56     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3d0:	66 0f       	add	r22, r22
 3d2:	77 1f       	adc	r23, r23
 3d4:	88 1f       	adc	r24, r24
 3d6:	99 1f       	adc	r25, r25
 3d8:	1a f0       	brmi	.+6      	; 0x3e0 <__fixunssfsi+0x24>
 3da:	ba 95       	dec	r27
 3dc:	c9 f7       	brne	.-14     	; 0x3d0 <__fixunssfsi+0x14>
 3de:	14 c0       	rjmp	.+40     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3e0:	b1 30       	cpi	r27, 0x01	; 1
 3e2:	91 f0       	breq	.+36     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3e4:	0e 94 94 02 	call	0x528	; 0x528 <__fp_zero>
 3e8:	b1 e0       	ldi	r27, 0x01	; 1
 3ea:	08 95       	ret
 3ec:	0c 94 94 02 	jmp	0x528	; 0x528 <__fp_zero>
 3f0:	67 2f       	mov	r22, r23
 3f2:	78 2f       	mov	r23, r24
 3f4:	88 27       	eor	r24, r24
 3f6:	b8 5f       	subi	r27, 0xF8	; 248
 3f8:	39 f0       	breq	.+14     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3fa:	b9 3f       	cpi	r27, 0xF9	; 249
 3fc:	cc f3       	brlt	.-14     	; 0x3f0 <__fixunssfsi+0x34>
 3fe:	86 95       	lsr	r24
 400:	77 95       	ror	r23
 402:	67 95       	ror	r22
 404:	b3 95       	inc	r27
 406:	d9 f7       	brne	.-10     	; 0x3fe <__fixunssfsi+0x42>
 408:	3e f4       	brtc	.+14     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 40a:	90 95       	com	r25
 40c:	80 95       	com	r24
 40e:	70 95       	com	r23
 410:	61 95       	neg	r22
 412:	7f 4f       	sbci	r23, 0xFF	; 255
 414:	8f 4f       	sbci	r24, 0xFF	; 255
 416:	9f 4f       	sbci	r25, 0xFF	; 255
 418:	08 95       	ret

0000041a <__floatunsisf>:
 41a:	e8 94       	clt
 41c:	09 c0       	rjmp	.+18     	; 0x430 <__floatsisf+0x12>

0000041e <__floatsisf>:
 41e:	97 fb       	bst	r25, 7
 420:	3e f4       	brtc	.+14     	; 0x430 <__floatsisf+0x12>
 422:	90 95       	com	r25
 424:	80 95       	com	r24
 426:	70 95       	com	r23
 428:	61 95       	neg	r22
 42a:	7f 4f       	sbci	r23, 0xFF	; 255
 42c:	8f 4f       	sbci	r24, 0xFF	; 255
 42e:	9f 4f       	sbci	r25, 0xFF	; 255
 430:	99 23       	and	r25, r25
 432:	a9 f0       	breq	.+42     	; 0x45e <__floatsisf+0x40>
 434:	f9 2f       	mov	r31, r25
 436:	96 e9       	ldi	r25, 0x96	; 150
 438:	bb 27       	eor	r27, r27
 43a:	93 95       	inc	r25
 43c:	f6 95       	lsr	r31
 43e:	87 95       	ror	r24
 440:	77 95       	ror	r23
 442:	67 95       	ror	r22
 444:	b7 95       	ror	r27
 446:	f1 11       	cpse	r31, r1
 448:	f8 cf       	rjmp	.-16     	; 0x43a <__floatsisf+0x1c>
 44a:	fa f4       	brpl	.+62     	; 0x48a <__floatsisf+0x6c>
 44c:	bb 0f       	add	r27, r27
 44e:	11 f4       	brne	.+4      	; 0x454 <__floatsisf+0x36>
 450:	60 ff       	sbrs	r22, 0
 452:	1b c0       	rjmp	.+54     	; 0x48a <__floatsisf+0x6c>
 454:	6f 5f       	subi	r22, 0xFF	; 255
 456:	7f 4f       	sbci	r23, 0xFF	; 255
 458:	8f 4f       	sbci	r24, 0xFF	; 255
 45a:	9f 4f       	sbci	r25, 0xFF	; 255
 45c:	16 c0       	rjmp	.+44     	; 0x48a <__floatsisf+0x6c>
 45e:	88 23       	and	r24, r24
 460:	11 f0       	breq	.+4      	; 0x466 <__floatsisf+0x48>
 462:	96 e9       	ldi	r25, 0x96	; 150
 464:	11 c0       	rjmp	.+34     	; 0x488 <__floatsisf+0x6a>
 466:	77 23       	and	r23, r23
 468:	21 f0       	breq	.+8      	; 0x472 <__floatsisf+0x54>
 46a:	9e e8       	ldi	r25, 0x8E	; 142
 46c:	87 2f       	mov	r24, r23
 46e:	76 2f       	mov	r23, r22
 470:	05 c0       	rjmp	.+10     	; 0x47c <__floatsisf+0x5e>
 472:	66 23       	and	r22, r22
 474:	71 f0       	breq	.+28     	; 0x492 <__floatsisf+0x74>
 476:	96 e8       	ldi	r25, 0x86	; 134
 478:	86 2f       	mov	r24, r22
 47a:	70 e0       	ldi	r23, 0x00	; 0
 47c:	60 e0       	ldi	r22, 0x00	; 0
 47e:	2a f0       	brmi	.+10     	; 0x48a <__floatsisf+0x6c>
 480:	9a 95       	dec	r25
 482:	66 0f       	add	r22, r22
 484:	77 1f       	adc	r23, r23
 486:	88 1f       	adc	r24, r24
 488:	da f7       	brpl	.-10     	; 0x480 <__floatsisf+0x62>
 48a:	88 0f       	add	r24, r24
 48c:	96 95       	lsr	r25
 48e:	87 95       	ror	r24
 490:	97 f9       	bld	r25, 7
 492:	08 95       	ret

00000494 <__fp_inf>:
 494:	97 f9       	bld	r25, 7
 496:	9f 67       	ori	r25, 0x7F	; 127
 498:	80 e8       	ldi	r24, 0x80	; 128
 49a:	70 e0       	ldi	r23, 0x00	; 0
 49c:	60 e0       	ldi	r22, 0x00	; 0
 49e:	08 95       	ret

000004a0 <__fp_nan>:
 4a0:	9f ef       	ldi	r25, 0xFF	; 255
 4a2:	80 ec       	ldi	r24, 0xC0	; 192
 4a4:	08 95       	ret

000004a6 <__fp_pscA>:
 4a6:	00 24       	eor	r0, r0
 4a8:	0a 94       	dec	r0
 4aa:	16 16       	cp	r1, r22
 4ac:	17 06       	cpc	r1, r23
 4ae:	18 06       	cpc	r1, r24
 4b0:	09 06       	cpc	r0, r25
 4b2:	08 95       	ret

000004b4 <__fp_pscB>:
 4b4:	00 24       	eor	r0, r0
 4b6:	0a 94       	dec	r0
 4b8:	12 16       	cp	r1, r18
 4ba:	13 06       	cpc	r1, r19
 4bc:	14 06       	cpc	r1, r20
 4be:	05 06       	cpc	r0, r21
 4c0:	08 95       	ret

000004c2 <__fp_round>:
 4c2:	09 2e       	mov	r0, r25
 4c4:	03 94       	inc	r0
 4c6:	00 0c       	add	r0, r0
 4c8:	11 f4       	brne	.+4      	; 0x4ce <__fp_round+0xc>
 4ca:	88 23       	and	r24, r24
 4cc:	52 f0       	brmi	.+20     	; 0x4e2 <__fp_round+0x20>
 4ce:	bb 0f       	add	r27, r27
 4d0:	40 f4       	brcc	.+16     	; 0x4e2 <__fp_round+0x20>
 4d2:	bf 2b       	or	r27, r31
 4d4:	11 f4       	brne	.+4      	; 0x4da <__fp_round+0x18>
 4d6:	60 ff       	sbrs	r22, 0
 4d8:	04 c0       	rjmp	.+8      	; 0x4e2 <__fp_round+0x20>
 4da:	6f 5f       	subi	r22, 0xFF	; 255
 4dc:	7f 4f       	sbci	r23, 0xFF	; 255
 4de:	8f 4f       	sbci	r24, 0xFF	; 255
 4e0:	9f 4f       	sbci	r25, 0xFF	; 255
 4e2:	08 95       	ret

000004e4 <__fp_split3>:
 4e4:	57 fd       	sbrc	r21, 7
 4e6:	90 58       	subi	r25, 0x80	; 128
 4e8:	44 0f       	add	r20, r20
 4ea:	55 1f       	adc	r21, r21
 4ec:	59 f0       	breq	.+22     	; 0x504 <__fp_splitA+0x10>
 4ee:	5f 3f       	cpi	r21, 0xFF	; 255
 4f0:	71 f0       	breq	.+28     	; 0x50e <__fp_splitA+0x1a>
 4f2:	47 95       	ror	r20

000004f4 <__fp_splitA>:
 4f4:	88 0f       	add	r24, r24
 4f6:	97 fb       	bst	r25, 7
 4f8:	99 1f       	adc	r25, r25
 4fa:	61 f0       	breq	.+24     	; 0x514 <__fp_splitA+0x20>
 4fc:	9f 3f       	cpi	r25, 0xFF	; 255
 4fe:	79 f0       	breq	.+30     	; 0x51e <__fp_splitA+0x2a>
 500:	87 95       	ror	r24
 502:	08 95       	ret
 504:	12 16       	cp	r1, r18
 506:	13 06       	cpc	r1, r19
 508:	14 06       	cpc	r1, r20
 50a:	55 1f       	adc	r21, r21
 50c:	f2 cf       	rjmp	.-28     	; 0x4f2 <__fp_split3+0xe>
 50e:	46 95       	lsr	r20
 510:	f1 df       	rcall	.-30     	; 0x4f4 <__fp_splitA>
 512:	08 c0       	rjmp	.+16     	; 0x524 <__fp_splitA+0x30>
 514:	16 16       	cp	r1, r22
 516:	17 06       	cpc	r1, r23
 518:	18 06       	cpc	r1, r24
 51a:	99 1f       	adc	r25, r25
 51c:	f1 cf       	rjmp	.-30     	; 0x500 <__fp_splitA+0xc>
 51e:	86 95       	lsr	r24
 520:	71 05       	cpc	r23, r1
 522:	61 05       	cpc	r22, r1
 524:	08 94       	sec
 526:	08 95       	ret

00000528 <__fp_zero>:
 528:	e8 94       	clt

0000052a <__fp_szero>:
 52a:	bb 27       	eor	r27, r27
 52c:	66 27       	eor	r22, r22
 52e:	77 27       	eor	r23, r23
 530:	cb 01       	movw	r24, r22
 532:	97 f9       	bld	r25, 7
 534:	08 95       	ret

00000536 <__mulsf3>:
 536:	0e 94 ae 02 	call	0x55c	; 0x55c <__mulsf3x>
 53a:	0c 94 61 02 	jmp	0x4c2	; 0x4c2 <__fp_round>
 53e:	0e 94 53 02 	call	0x4a6	; 0x4a6 <__fp_pscA>
 542:	38 f0       	brcs	.+14     	; 0x552 <__mulsf3+0x1c>
 544:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <__fp_pscB>
 548:	20 f0       	brcs	.+8      	; 0x552 <__mulsf3+0x1c>
 54a:	95 23       	and	r25, r21
 54c:	11 f0       	breq	.+4      	; 0x552 <__mulsf3+0x1c>
 54e:	0c 94 4a 02 	jmp	0x494	; 0x494 <__fp_inf>
 552:	0c 94 50 02 	jmp	0x4a0	; 0x4a0 <__fp_nan>
 556:	11 24       	eor	r1, r1
 558:	0c 94 95 02 	jmp	0x52a	; 0x52a <__fp_szero>

0000055c <__mulsf3x>:
 55c:	0e 94 72 02 	call	0x4e4	; 0x4e4 <__fp_split3>
 560:	70 f3       	brcs	.-36     	; 0x53e <__mulsf3+0x8>

00000562 <__mulsf3_pse>:
 562:	95 9f       	mul	r25, r21
 564:	c1 f3       	breq	.-16     	; 0x556 <__mulsf3+0x20>
 566:	95 0f       	add	r25, r21
 568:	50 e0       	ldi	r21, 0x00	; 0
 56a:	55 1f       	adc	r21, r21
 56c:	62 9f       	mul	r22, r18
 56e:	f0 01       	movw	r30, r0
 570:	72 9f       	mul	r23, r18
 572:	bb 27       	eor	r27, r27
 574:	f0 0d       	add	r31, r0
 576:	b1 1d       	adc	r27, r1
 578:	63 9f       	mul	r22, r19
 57a:	aa 27       	eor	r26, r26
 57c:	f0 0d       	add	r31, r0
 57e:	b1 1d       	adc	r27, r1
 580:	aa 1f       	adc	r26, r26
 582:	64 9f       	mul	r22, r20
 584:	66 27       	eor	r22, r22
 586:	b0 0d       	add	r27, r0
 588:	a1 1d       	adc	r26, r1
 58a:	66 1f       	adc	r22, r22
 58c:	82 9f       	mul	r24, r18
 58e:	22 27       	eor	r18, r18
 590:	b0 0d       	add	r27, r0
 592:	a1 1d       	adc	r26, r1
 594:	62 1f       	adc	r22, r18
 596:	73 9f       	mul	r23, r19
 598:	b0 0d       	add	r27, r0
 59a:	a1 1d       	adc	r26, r1
 59c:	62 1f       	adc	r22, r18
 59e:	83 9f       	mul	r24, r19
 5a0:	a0 0d       	add	r26, r0
 5a2:	61 1d       	adc	r22, r1
 5a4:	22 1f       	adc	r18, r18
 5a6:	74 9f       	mul	r23, r20
 5a8:	33 27       	eor	r19, r19
 5aa:	a0 0d       	add	r26, r0
 5ac:	61 1d       	adc	r22, r1
 5ae:	23 1f       	adc	r18, r19
 5b0:	84 9f       	mul	r24, r20
 5b2:	60 0d       	add	r22, r0
 5b4:	21 1d       	adc	r18, r1
 5b6:	82 2f       	mov	r24, r18
 5b8:	76 2f       	mov	r23, r22
 5ba:	6a 2f       	mov	r22, r26
 5bc:	11 24       	eor	r1, r1
 5be:	9f 57       	subi	r25, 0x7F	; 127
 5c0:	50 40       	sbci	r21, 0x00	; 0
 5c2:	9a f0       	brmi	.+38     	; 0x5ea <__mulsf3_pse+0x88>
 5c4:	f1 f0       	breq	.+60     	; 0x602 <__mulsf3_pse+0xa0>
 5c6:	88 23       	and	r24, r24
 5c8:	4a f0       	brmi	.+18     	; 0x5dc <__mulsf3_pse+0x7a>
 5ca:	ee 0f       	add	r30, r30
 5cc:	ff 1f       	adc	r31, r31
 5ce:	bb 1f       	adc	r27, r27
 5d0:	66 1f       	adc	r22, r22
 5d2:	77 1f       	adc	r23, r23
 5d4:	88 1f       	adc	r24, r24
 5d6:	91 50       	subi	r25, 0x01	; 1
 5d8:	50 40       	sbci	r21, 0x00	; 0
 5da:	a9 f7       	brne	.-22     	; 0x5c6 <__mulsf3_pse+0x64>
 5dc:	9e 3f       	cpi	r25, 0xFE	; 254
 5de:	51 05       	cpc	r21, r1
 5e0:	80 f0       	brcs	.+32     	; 0x602 <__mulsf3_pse+0xa0>
 5e2:	0c 94 4a 02 	jmp	0x494	; 0x494 <__fp_inf>
 5e6:	0c 94 95 02 	jmp	0x52a	; 0x52a <__fp_szero>
 5ea:	5f 3f       	cpi	r21, 0xFF	; 255
 5ec:	e4 f3       	brlt	.-8      	; 0x5e6 <__mulsf3_pse+0x84>
 5ee:	98 3e       	cpi	r25, 0xE8	; 232
 5f0:	d4 f3       	brlt	.-12     	; 0x5e6 <__mulsf3_pse+0x84>
 5f2:	86 95       	lsr	r24
 5f4:	77 95       	ror	r23
 5f6:	67 95       	ror	r22
 5f8:	b7 95       	ror	r27
 5fa:	f7 95       	ror	r31
 5fc:	e7 95       	ror	r30
 5fe:	9f 5f       	subi	r25, 0xFF	; 255
 600:	c1 f7       	brne	.-16     	; 0x5f2 <__mulsf3_pse+0x90>
 602:	fe 2b       	or	r31, r30
 604:	88 0f       	add	r24, r24
 606:	91 1d       	adc	r25, r1
 608:	96 95       	lsr	r25
 60a:	87 95       	ror	r24
 60c:	97 f9       	bld	r25, 7
 60e:	08 95       	ret

00000610 <_exit>:
 610:	f8 94       	cli

00000612 <__stop_program>:
 612:	ff cf       	rjmp	.-2      	; 0x612 <__stop_program>
