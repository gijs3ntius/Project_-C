
Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000005fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000588  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002b  00800100  00800100  000005fc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000062c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  0000066c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fe2  00000000  00000000  0000079c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a9c  00000000  00000000  0000177e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000949  00000000  00000000  0000221a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002c8  00000000  00000000  00002b64  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005f0  00000000  00000000  00002e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000763  00000000  00000000  0000341c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00003b7f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 26 01 	jmp	0x24c	; 0x24c <__vector_2>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	ab 32       	cpi	r26, 0x2B	; 43
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 c9 00 	call	0x192	; 0x192 <main>
  88:	0c 94 c2 02 	jmp	0x584	; 0x584 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_11>:
  determined by the timer settings in SCH_Init_T1().

-*------------------------------------------------------------------*/

ISR(TIMER1_COMPA_vect)
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	2f 93       	push	r18
  9c:	3f 93       	push	r19
  9e:	8f 93       	push	r24
  a0:	9f 93       	push	r25
  a2:	af 93       	push	r26
  a4:	bf 93       	push	r27
  a6:	ef 93       	push	r30
  a8:	ff 93       	push	r31
  aa:	e7 e0       	ldi	r30, 0x07	; 7
  ac:	f1 e0       	ldi	r31, 0x01	; 1
  ae:	2a e2       	ldi	r18, 0x2A	; 42
  b0:	31 e0       	ldi	r19, 0x01	; 1
   unsigned char Index;
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
   {
      // Check if there is a task at this location
      if(SCH_tasks_G[Index].pTask)
  b2:	80 81       	ld	r24, Z
  b4:	91 81       	ldd	r25, Z+1	; 0x01
  b6:	89 2b       	or	r24, r25
  b8:	91 f0       	breq	.+36     	; 0xde <__vector_11+0x4e>
      {
         if(SCH_tasks_G[Index].Delay == 0)
  ba:	82 81       	ldd	r24, Z+2	; 0x02
  bc:	93 81       	ldd	r25, Z+3	; 0x03
  be:	00 97       	sbiw	r24, 0x00	; 0
  c0:	59 f4       	brne	.+22     	; 0xd8 <__vector_11+0x48>
         {
            // The task is due to run, Inc. the 'RunMe' flag
            SCH_tasks_G[Index].RunMe += 1;
  c2:	86 81       	ldd	r24, Z+6	; 0x06
  c4:	8f 5f       	subi	r24, 0xFF	; 255
  c6:	86 83       	std	Z+6, r24	; 0x06

            if(SCH_tasks_G[Index].Period)
  c8:	84 81       	ldd	r24, Z+4	; 0x04
  ca:	95 81       	ldd	r25, Z+5	; 0x05
  cc:	00 97       	sbiw	r24, 0x00	; 0
  ce:	39 f0       	breq	.+14     	; 0xde <__vector_11+0x4e>
            {
               // Schedule periodic tasks to run again
               SCH_tasks_G[Index].Delay = SCH_tasks_G[Index].Period;
               SCH_tasks_G[Index].Delay -= 1;
  d0:	01 97       	sbiw	r24, 0x01	; 1
  d2:	93 83       	std	Z+3, r25	; 0x03
  d4:	82 83       	std	Z+2, r24	; 0x02
  d6:	03 c0       	rjmp	.+6      	; 0xde <__vector_11+0x4e>
            }
         }
         else
         {
            // Not yet ready to run: just decrement the delay
            SCH_tasks_G[Index].Delay -= 1;
  d8:	01 97       	sbiw	r24, 0x01	; 1
  da:	93 83       	std	Z+3, r25	; 0x03
  dc:	82 83       	std	Z+2, r24	; 0x02
  de:	37 96       	adiw	r30, 0x07	; 7
-*------------------------------------------------------------------*/

ISR(TIMER1_COMPA_vect)
{
   unsigned char Index;
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
  e0:	e2 17       	cp	r30, r18
  e2:	f3 07       	cpc	r31, r19
  e4:	31 f7       	brne	.-52     	; 0xb2 <__vector_11+0x22>
            // Not yet ready to run: just decrement the delay
            SCH_tasks_G[Index].Delay -= 1;
         }
      }
   }
}
  e6:	ff 91       	pop	r31
  e8:	ef 91       	pop	r30
  ea:	bf 91       	pop	r27
  ec:	af 91       	pop	r26
  ee:	9f 91       	pop	r25
  f0:	8f 91       	pop	r24
  f2:	3f 91       	pop	r19
  f4:	2f 91       	pop	r18
  f6:	0f 90       	pop	r0
  f8:	0f be       	out	0x3f, r0	; 63
  fa:	0f 90       	pop	r0
  fc:	1f 90       	pop	r1
  fe:	18 95       	reti

00000100 <setUpUltra>:
	return distance;
}


void Distance(){
	transmitSerial(getDistance());
 100:	61 e0       	ldi	r22, 0x01	; 1
 102:	70 e0       	ldi	r23, 0x00	; 0
 104:	82 e0       	ldi	r24, 0x02	; 2
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	0e 94 8a 01 	call	0x314	; 0x314 <digital_config>
 10c:	60 e0       	ldi	r22, 0x00	; 0
 10e:	70 e0       	ldi	r23, 0x00	; 0
 110:	83 e0       	ldi	r24, 0x03	; 3
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	0e 94 8a 01 	call	0x314	; 0x314 <digital_config>
 118:	08 95       	ret

0000011a <setUpInterrupt>:
 11a:	5b 9a       	sbi	0x0b, 3	; 11
 11c:	e9 9a       	sbi	0x1d, 1	; 29
 11e:	e9 e6       	ldi	r30, 0x69	; 105
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	82 60       	ori	r24, 0x02	; 2
 126:	80 83       	st	Z, r24
 128:	08 95       	ret

0000012a <setUpTimer0>:
 12a:	85 b5       	in	r24, 0x25	; 37
 12c:	81 60       	ori	r24, 0x01	; 1
 12e:	85 bd       	out	0x25, r24	; 37
 130:	16 bc       	out	0x26, r1	; 38
 132:	ee e6       	ldi	r30, 0x6E	; 110
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	80 81       	ld	r24, Z
 138:	81 60       	ori	r24, 0x01	; 1
 13a:	80 83       	st	Z, r24
 13c:	78 94       	sei
 13e:	08 95       	ret

00000140 <startPulse>:
 140:	60 e0       	ldi	r22, 0x00	; 0
 142:	70 e0       	ldi	r23, 0x00	; 0
 144:	82 e0       	ldi	r24, 0x02	; 2
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	0e 94 d7 01 	call	0x3ae	; 0x3ae <digital_write>
 14c:	83 ef       	ldi	r24, 0xF3	; 243
 14e:	91 e0       	ldi	r25, 0x01	; 1
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <startPulse+0x10>
 154:	00 c0       	rjmp	.+0      	; 0x156 <startPulse+0x16>
 156:	00 00       	nop
 158:	61 e0       	ldi	r22, 0x01	; 1
 15a:	70 e0       	ldi	r23, 0x00	; 0
 15c:	82 e0       	ldi	r24, 0x02	; 2
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	0e 94 d7 01 	call	0x3ae	; 0x3ae <digital_write>
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <is_measuring>
 16a:	93 e0       	ldi	r25, 0x03	; 3
 16c:	9a 95       	dec	r25
 16e:	f1 f7       	brne	.-4      	; 0x16c <startPulse+0x2c>
 170:	00 00       	nop
 172:	60 e0       	ldi	r22, 0x00	; 0
 174:	70 e0       	ldi	r23, 0x00	; 0
 176:	82 e0       	ldi	r24, 0x02	; 2
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	0e 94 d7 01 	call	0x3ae	; 0x3ae <digital_write>
 17e:	08 95       	ret

00000180 <getDistance>:
 180:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <is_measuring>
 184:	81 11       	cpse	r24, r1
 186:	02 c0       	rjmp	.+4      	; 0x18c <getDistance+0xc>
 188:	0e 94 a0 00 	call	0x140	; 0x140 <startPulse>
 18c:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <distance>
 190:	08 95       	ret

00000192 <main>:
int main(void)
{
	
	//analog_config();
	
	setUpInterrupt(); // voor de afstand
 192:	0e 94 8d 00 	call	0x11a	; 0x11a <setUpInterrupt>

	setUpUltra(); // voor de afstand
 196:	0e 94 80 00 	call	0x100	; 0x100 <setUpUltra>
	
	setUpTimer0(); // voor de afstand
 19a:	0e 94 95 00 	call	0x12a	; 0x12a <setUpTimer0>

	initSerial();
 19e:	0e 94 24 02 	call	0x448	; 0x448 <initSerial>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a2:	87 e9       	ldi	r24, 0x97	; 151
 1a4:	9a e3       	ldi	r25, 0x3A	; 58
 1a6:	01 97       	sbiw	r24, 0x01	; 1
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <main+0x14>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <main+0x1a>
 1ac:	00 00       	nop
   
    while (1) 
    {
		//SCH_Dispatch_Tasks(); // verzend de taken
		_delay_ms(Delay_Until_New_Measure);	
		transmitSerial(getDistance());
 1ae:	0e 94 c0 00 	call	0x180	; 0x180 <getDistance>
 1b2:	0e 94 32 02 	call	0x464	; 0x464 <transmitSerial>
 1b6:	f5 cf       	rjmp	.-22     	; 0x1a2 <main+0x10>

000001b8 <__vector_16>:
} 


	
ISR(TIMER0_OVF_vect)  // Here every time Timer0 Overflow
{
 1b8:	1f 92       	push	r1
 1ba:	0f 92       	push	r0
 1bc:	0f b6       	in	r0, 0x3f	; 63
 1be:	0f 92       	push	r0
 1c0:	11 24       	eor	r1, r1
 1c2:	2f 93       	push	r18
 1c4:	8f 93       	push	r24
 1c6:	9f 93       	push	r25
 1c8:	af 93       	push	r26
 1ca:	bf 93       	push	r27
	if(Ultra_is_on)	   // Only if sensor is active
 1cc:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Ultra_is_on>
 1d0:	88 23       	and	r24, r24
 1d2:	91 f1       	breq	.+100    	; 0x238 <__vector_16+0x80>
	{
		Timer0_counter++;          // How many times Timer0 got OVF ?
 1d4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <Timer0_counter>
 1d8:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <Timer0_counter+0x1>
 1dc:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <Timer0_counter+0x2>
 1e0:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <Timer0_counter+0x3>
 1e4:	01 96       	adiw	r24, 0x01	; 1
 1e6:	a1 1d       	adc	r26, r1
 1e8:	b1 1d       	adc	r27, r1
 1ea:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <Timer0_counter>
 1ee:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <Timer0_counter+0x1>
 1f2:	a0 93 03 01 	sts	0x0103, r26	; 0x800103 <Timer0_counter+0x2>
 1f6:	b0 93 04 01 	sts	0x0104, r27	; 0x800104 <Timer0_counter+0x3>
		uint32_t ticks = Timer0_counter * 256 + TCNT0;		// calculate total Timer0 ticks
 1fa:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <Timer0_counter>
 1fe:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <Timer0_counter+0x1>
 202:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <Timer0_counter+0x2>
 206:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <Timer0_counter+0x3>
 20a:	26 b5       	in	r18, 0x26	; 38
		TimeOUT=0;
 20c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
			
		if(ticks > max_ticks)
 210:	ba 2f       	mov	r27, r26
 212:	a9 2f       	mov	r26, r25
 214:	98 2f       	mov	r25, r24
 216:	88 27       	eor	r24, r24
 218:	82 0f       	add	r24, r18
 21a:	91 1d       	adc	r25, r1
 21c:	a1 1d       	adc	r26, r1
 21e:	b1 1d       	adc	r27, r1
 220:	89 3a       	cpi	r24, 0xA9	; 169
 222:	94 4b       	sbci	r25, 0xB4	; 180
 224:	a7 40       	sbci	r26, 0x07	; 7
 226:	b1 05       	cpc	r27, r1
 228:	38 f0       	brcs	.+14     	; 0x238 <__vector_16+0x80>
		{
			Ultra_is_on = 0;	 // ** Free the sensor to new measures**/
 22a:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <Ultra_is_on>
			is_measuring = 0;		 //  *************************
 22e:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <is_measuring>
			TimeOUT =1 ;        // Timeout ; Used it as you want.
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
				
		}
				
	}

}
 238:	bf 91       	pop	r27
 23a:	af 91       	pop	r26
 23c:	9f 91       	pop	r25
 23e:	8f 91       	pop	r24
 240:	2f 91       	pop	r18
 242:	0f 90       	pop	r0
 244:	0f be       	out	0x3f, r0	; 63
 246:	0f 90       	pop	r0
 248:	1f 90       	pop	r1
 24a:	18 95       	reti

0000024c <__vector_2>:




ISR(INT1_vect)
{
 24c:	1f 92       	push	r1
 24e:	0f 92       	push	r0
 250:	0f b6       	in	r0, 0x3f	; 63
 252:	0f 92       	push	r0
 254:	11 24       	eor	r1, r1
 256:	2f 93       	push	r18
 258:	3f 93       	push	r19
 25a:	4f 93       	push	r20
 25c:	5f 93       	push	r21
 25e:	6f 93       	push	r22
 260:	7f 93       	push	r23
 262:	8f 93       	push	r24
 264:	9f 93       	push	r25
 266:	af 93       	push	r26
 268:	bf 93       	push	r27
 26a:	ef 93       	push	r30
 26c:	ff 93       	push	r31
	if (is_measuring == 1.)		// Care only if sensor is started
 26e:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <is_measuring>
 272:	70 e0       	ldi	r23, 0x00	; 0
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	0e 94 41 02 	call	0x482	; 0x482 <__floatsisf>
 27c:	20 e0       	ldi	r18, 0x00	; 0
 27e:	30 e0       	ldi	r19, 0x00	; 0
 280:	40 e8       	ldi	r20, 0x80	; 128
 282:	5f e3       	ldi	r21, 0x3F	; 63
 284:	0e 94 3a 02 	call	0x474	; 0x474 <__cmpsf2>
 288:	81 11       	cpse	r24, r1
 28a:	33 c0       	rjmp	.+102    	; 0x2f2 <__vector_2+0xa6>
	{
		
		if (Ultra_is_on == 0)  // High_Pulse '0' -> '1' , start time measure
 28c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Ultra_is_on>
 290:	81 11       	cpse	r24, r1
 292:	0d c0       	rjmp	.+26     	; 0x2ae <__vector_2+0x62>
		{
			TCNT0 = 0;			    // Reset Timer0/Counter
 294:	16 bc       	out	0x26, r1	; 38
			Ultra_is_on = 1;	// Now its not free
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <Ultra_is_on>
			Timer0_counter = 0;		// Clear counter
 29c:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <Timer0_counter>
 2a0:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <Timer0_counter+0x1>
 2a4:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <Timer0_counter+0x2>
 2a8:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <Timer0_counter+0x3>
 2ac:	22 c0       	rjmp	.+68     	; 0x2f2 <__vector_2+0xa6>
		}


		else					// Low Pulse '1' -> '0', we have  our result
		{
			Ultra_is_on = 0 ;
 2ae:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <Ultra_is_on>
			distance = (Timer0_counter * 256 + TCNT0) / (F_CPU_div * 58);
 2b2:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <Timer0_counter>
 2b6:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <Timer0_counter+0x1>
 2ba:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <Timer0_counter+0x2>
 2be:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <Timer0_counter+0x3>
 2c2:	26 b5       	in	r18, 0x26	; 38
 2c4:	ba 2f       	mov	r27, r26
 2c6:	a9 2f       	mov	r26, r25
 2c8:	98 2f       	mov	r25, r24
 2ca:	88 27       	eor	r24, r24
 2cc:	bc 01       	movw	r22, r24
 2ce:	cd 01       	movw	r24, r26
 2d0:	62 0f       	add	r22, r18
 2d2:	71 1d       	adc	r23, r1
 2d4:	81 1d       	adc	r24, r1
 2d6:	91 1d       	adc	r25, r1
 2d8:	20 ea       	ldi	r18, 0xA0	; 160
 2da:	33 e0       	ldi	r19, 0x03	; 3
 2dc:	40 e0       	ldi	r20, 0x00	; 0
 2de:	50 e0       	ldi	r21, 0x00	; 0
 2e0:	0e 94 a0 02 	call	0x540	; 0x540 <__udivmodsi4>
 2e4:	20 93 2a 01 	sts	0x012A, r18	; 0x80012a <distance>
			transmitSerial(2);
 2e8:	82 e0       	ldi	r24, 0x02	; 2
 2ea:	0e 94 32 02 	call	0x464	; 0x464 <transmitSerial>
			// us/58 = .. cm.  Every 8 ticks is 1us (8Mhz clock, NO prescaler). http://www.micropik.com/PDF/HCSR04.pdf
			is_measuring = 0 ;    // Ready for new measure
 2ee:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <is_measuring>

		}
}

}
 2f2:	ff 91       	pop	r31
 2f4:	ef 91       	pop	r30
 2f6:	bf 91       	pop	r27
 2f8:	af 91       	pop	r26
 2fa:	9f 91       	pop	r25
 2fc:	8f 91       	pop	r24
 2fe:	7f 91       	pop	r23
 300:	6f 91       	pop	r22
 302:	5f 91       	pop	r21
 304:	4f 91       	pop	r20
 306:	3f 91       	pop	r19
 308:	2f 91       	pop	r18
 30a:	0f 90       	pop	r0
 30c:	0f be       	out	0x3f, r0	; 63
 30e:	0f 90       	pop	r0
 310:	1f 90       	pop	r1
 312:	18 95       	reti

00000314 <digital_config>:

/*
 * Sets a digital pin to get input or output
 */
void digital_config(int pin, int value) {
	if(pin < 8) {
 314:	88 30       	cpi	r24, 0x08	; 8
 316:	91 05       	cpc	r25, r1
 318:	ec f4       	brge	.+58     	; 0x354 <digital_config+0x40>
		if(value == 0) {
 31a:	67 2b       	or	r22, r23
 31c:	71 f4       	brne	.+28     	; 0x33a <digital_config+0x26>
			DDRD = DDRD & ~(1 << pin);
 31e:	4a b1       	in	r20, 0x0a	; 10
 320:	21 e0       	ldi	r18, 0x01	; 1
 322:	30 e0       	ldi	r19, 0x00	; 0
 324:	b9 01       	movw	r22, r18
 326:	02 c0       	rjmp	.+4      	; 0x32c <digital_config+0x18>
 328:	66 0f       	add	r22, r22
 32a:	77 1f       	adc	r23, r23
 32c:	8a 95       	dec	r24
 32e:	e2 f7       	brpl	.-8      	; 0x328 <digital_config+0x14>
 330:	cb 01       	movw	r24, r22
 332:	80 95       	com	r24
 334:	84 23       	and	r24, r20
 336:	8a b9       	out	0x0a, r24	; 10
 338:	08 95       	ret
		} else {
			DDRD = DDRD | (1 << pin);
 33a:	4a b1       	in	r20, 0x0a	; 10
 33c:	21 e0       	ldi	r18, 0x01	; 1
 33e:	30 e0       	ldi	r19, 0x00	; 0
 340:	b9 01       	movw	r22, r18
 342:	02 c0       	rjmp	.+4      	; 0x348 <digital_config+0x34>
 344:	66 0f       	add	r22, r22
 346:	77 1f       	adc	r23, r23
 348:	8a 95       	dec	r24
 34a:	e2 f7       	brpl	.-8      	; 0x344 <digital_config+0x30>
 34c:	cb 01       	movw	r24, r22
 34e:	84 2b       	or	r24, r20
 350:	8a b9       	out	0x0a, r24	; 10
 352:	08 95       	ret
		}
		
	} else {
		if(value == 0) {
 354:	67 2b       	or	r22, r23
 356:	b1 f4       	brne	.+44     	; 0x384 <digital_config+0x70>
			DDRB = DDRB & ~(1 << (pin%8));
 358:	44 b1       	in	r20, 0x04	; 4
 35a:	87 70       	andi	r24, 0x07	; 7
 35c:	90 78       	andi	r25, 0x80	; 128
 35e:	99 23       	and	r25, r25
 360:	24 f4       	brge	.+8      	; 0x36a <digital_config+0x56>
 362:	01 97       	sbiw	r24, 0x01	; 1
 364:	88 6f       	ori	r24, 0xF8	; 248
 366:	9f 6f       	ori	r25, 0xFF	; 255
 368:	01 96       	adiw	r24, 0x01	; 1
 36a:	21 e0       	ldi	r18, 0x01	; 1
 36c:	30 e0       	ldi	r19, 0x00	; 0
 36e:	b9 01       	movw	r22, r18
 370:	02 c0       	rjmp	.+4      	; 0x376 <digital_config+0x62>
 372:	66 0f       	add	r22, r22
 374:	77 1f       	adc	r23, r23
 376:	8a 95       	dec	r24
 378:	e2 f7       	brpl	.-8      	; 0x372 <digital_config+0x5e>
 37a:	cb 01       	movw	r24, r22
 37c:	80 95       	com	r24
 37e:	84 23       	and	r24, r20
 380:	84 b9       	out	0x04, r24	; 4
 382:	08 95       	ret
		} else {
			DDRB = DDRB | (1 << (pin%8));
 384:	44 b1       	in	r20, 0x04	; 4
 386:	87 70       	andi	r24, 0x07	; 7
 388:	90 78       	andi	r25, 0x80	; 128
 38a:	99 23       	and	r25, r25
 38c:	24 f4       	brge	.+8      	; 0x396 <digital_config+0x82>
 38e:	01 97       	sbiw	r24, 0x01	; 1
 390:	88 6f       	ori	r24, 0xF8	; 248
 392:	9f 6f       	ori	r25, 0xFF	; 255
 394:	01 96       	adiw	r24, 0x01	; 1
 396:	21 e0       	ldi	r18, 0x01	; 1
 398:	30 e0       	ldi	r19, 0x00	; 0
 39a:	b9 01       	movw	r22, r18
 39c:	02 c0       	rjmp	.+4      	; 0x3a2 <digital_config+0x8e>
 39e:	66 0f       	add	r22, r22
 3a0:	77 1f       	adc	r23, r23
 3a2:	8a 95       	dec	r24
 3a4:	e2 f7       	brpl	.-8      	; 0x39e <digital_config+0x8a>
 3a6:	cb 01       	movw	r24, r22
 3a8:	84 2b       	or	r24, r20
 3aa:	84 b9       	out	0x04, r24	; 4
 3ac:	08 95       	ret

000003ae <digital_write>:

/*
 * Sets a digital pin to 0 or 1
 */
void digital_write(int pin, int value) {
	if(pin < 8) {
 3ae:	88 30       	cpi	r24, 0x08	; 8
 3b0:	91 05       	cpc	r25, r1
 3b2:	ec f4       	brge	.+58     	; 0x3ee <digital_write+0x40>
		if(value == 0) {
 3b4:	67 2b       	or	r22, r23
 3b6:	71 f4       	brne	.+28     	; 0x3d4 <digital_write+0x26>
			PORTD = PORTD & ~(1 << pin);
 3b8:	4b b1       	in	r20, 0x0b	; 11
 3ba:	21 e0       	ldi	r18, 0x01	; 1
 3bc:	30 e0       	ldi	r19, 0x00	; 0
 3be:	b9 01       	movw	r22, r18
 3c0:	02 c0       	rjmp	.+4      	; 0x3c6 <digital_write+0x18>
 3c2:	66 0f       	add	r22, r22
 3c4:	77 1f       	adc	r23, r23
 3c6:	8a 95       	dec	r24
 3c8:	e2 f7       	brpl	.-8      	; 0x3c2 <digital_write+0x14>
 3ca:	cb 01       	movw	r24, r22
 3cc:	80 95       	com	r24
 3ce:	84 23       	and	r24, r20
 3d0:	8b b9       	out	0x0b, r24	; 11
 3d2:	08 95       	ret
		} else {
			PORTD = PORTD | (1 << pin);
 3d4:	4b b1       	in	r20, 0x0b	; 11
 3d6:	21 e0       	ldi	r18, 0x01	; 1
 3d8:	30 e0       	ldi	r19, 0x00	; 0
 3da:	b9 01       	movw	r22, r18
 3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <digital_write+0x34>
 3de:	66 0f       	add	r22, r22
 3e0:	77 1f       	adc	r23, r23
 3e2:	8a 95       	dec	r24
 3e4:	e2 f7       	brpl	.-8      	; 0x3de <digital_write+0x30>
 3e6:	cb 01       	movw	r24, r22
 3e8:	84 2b       	or	r24, r20
 3ea:	8b b9       	out	0x0b, r24	; 11
 3ec:	08 95       	ret
		}
		
	} else {
		if(value == 0) {
 3ee:	67 2b       	or	r22, r23
 3f0:	b1 f4       	brne	.+44     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
			PORTB = PORTB & ~(1 << (pin%8));
 3f2:	45 b1       	in	r20, 0x05	; 5
 3f4:	87 70       	andi	r24, 0x07	; 7
 3f6:	90 78       	andi	r25, 0x80	; 128
 3f8:	99 23       	and	r25, r25
 3fa:	24 f4       	brge	.+8      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3fc:	01 97       	sbiw	r24, 0x01	; 1
 3fe:	88 6f       	ori	r24, 0xF8	; 248
 400:	9f 6f       	ori	r25, 0xFF	; 255
 402:	01 96       	adiw	r24, 0x01	; 1
 404:	21 e0       	ldi	r18, 0x01	; 1
 406:	30 e0       	ldi	r19, 0x00	; 0
 408:	b9 01       	movw	r22, r18
 40a:	02 c0       	rjmp	.+4      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 40c:	66 0f       	add	r22, r22
 40e:	77 1f       	adc	r23, r23
 410:	8a 95       	dec	r24
 412:	e2 f7       	brpl	.-8      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 414:	cb 01       	movw	r24, r22
 416:	80 95       	com	r24
 418:	84 23       	and	r24, r20
 41a:	85 b9       	out	0x05, r24	; 5
 41c:	08 95       	ret
		} else {
			PORTB = PORTB | (1 << (pin%8));
 41e:	45 b1       	in	r20, 0x05	; 5
 420:	87 70       	andi	r24, 0x07	; 7
 422:	90 78       	andi	r25, 0x80	; 128
 424:	99 23       	and	r25, r25
 426:	24 f4       	brge	.+8      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 428:	01 97       	sbiw	r24, 0x01	; 1
 42a:	88 6f       	ori	r24, 0xF8	; 248
 42c:	9f 6f       	ori	r25, 0xFF	; 255
 42e:	01 96       	adiw	r24, 0x01	; 1
 430:	21 e0       	ldi	r18, 0x01	; 1
 432:	30 e0       	ldi	r19, 0x00	; 0
 434:	b9 01       	movw	r22, r18
 436:	02 c0       	rjmp	.+4      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 438:	66 0f       	add	r22, r22
 43a:	77 1f       	adc	r23, r23
 43c:	8a 95       	dec	r24
 43e:	e2 f7       	brpl	.-8      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 440:	cb 01       	movw	r24, r22
 442:	84 2b       	or	r24, r20
 444:	85 b9       	out	0x05, r24	; 5
 446:	08 95       	ret

00000448 <initSerial>:
uint8_t receiveSerial() {
	// wait for data to be received
	while ( !(UCSR0A & (1 << RXC0)) );
	// get and return received data from buffer
	return UDR0;
}
 448:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 44c:	83 e3       	ldi	r24, 0x33	; 51
 44e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 452:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 456:	88 e1       	ldi	r24, 0x18	; 24
 458:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 45c:	86 e0       	ldi	r24, 0x06	; 6
 45e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 462:	08 95       	ret

00000464 <transmitSerial>:

void transmitSerial(uint8_t data) {
	// wait for an empty transmit buffer
	// UDRE is set when the transmit buffer is empty
	loop_until_bit_is_set(UCSR0A, UDRE0);
 464:	e0 ec       	ldi	r30, 0xC0	; 192
 466:	f0 e0       	ldi	r31, 0x00	; 0
 468:	90 81       	ld	r25, Z
 46a:	95 ff       	sbrs	r25, 5
 46c:	fd cf       	rjmp	.-6      	; 0x468 <transmitSerial+0x4>
	// send the data
	UDR0 = data;
 46e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 472:	08 95       	ret

00000474 <__cmpsf2>:
 474:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <__fp_cmp>
 478:	08 f4       	brcc	.+2      	; 0x47c <__cmpsf2+0x8>
 47a:	81 e0       	ldi	r24, 0x01	; 1
 47c:	08 95       	ret

0000047e <__floatunsisf>:
 47e:	e8 94       	clt
 480:	09 c0       	rjmp	.+18     	; 0x494 <__floatsisf+0x12>

00000482 <__floatsisf>:
 482:	97 fb       	bst	r25, 7
 484:	3e f4       	brtc	.+14     	; 0x494 <__floatsisf+0x12>
 486:	90 95       	com	r25
 488:	80 95       	com	r24
 48a:	70 95       	com	r23
 48c:	61 95       	neg	r22
 48e:	7f 4f       	sbci	r23, 0xFF	; 255
 490:	8f 4f       	sbci	r24, 0xFF	; 255
 492:	9f 4f       	sbci	r25, 0xFF	; 255
 494:	99 23       	and	r25, r25
 496:	a9 f0       	breq	.+42     	; 0x4c2 <__floatsisf+0x40>
 498:	f9 2f       	mov	r31, r25
 49a:	96 e9       	ldi	r25, 0x96	; 150
 49c:	bb 27       	eor	r27, r27
 49e:	93 95       	inc	r25
 4a0:	f6 95       	lsr	r31
 4a2:	87 95       	ror	r24
 4a4:	77 95       	ror	r23
 4a6:	67 95       	ror	r22
 4a8:	b7 95       	ror	r27
 4aa:	f1 11       	cpse	r31, r1
 4ac:	f8 cf       	rjmp	.-16     	; 0x49e <__floatsisf+0x1c>
 4ae:	fa f4       	brpl	.+62     	; 0x4ee <__floatsisf+0x6c>
 4b0:	bb 0f       	add	r27, r27
 4b2:	11 f4       	brne	.+4      	; 0x4b8 <__floatsisf+0x36>
 4b4:	60 ff       	sbrs	r22, 0
 4b6:	1b c0       	rjmp	.+54     	; 0x4ee <__floatsisf+0x6c>
 4b8:	6f 5f       	subi	r22, 0xFF	; 255
 4ba:	7f 4f       	sbci	r23, 0xFF	; 255
 4bc:	8f 4f       	sbci	r24, 0xFF	; 255
 4be:	9f 4f       	sbci	r25, 0xFF	; 255
 4c0:	16 c0       	rjmp	.+44     	; 0x4ee <__floatsisf+0x6c>
 4c2:	88 23       	and	r24, r24
 4c4:	11 f0       	breq	.+4      	; 0x4ca <__floatsisf+0x48>
 4c6:	96 e9       	ldi	r25, 0x96	; 150
 4c8:	11 c0       	rjmp	.+34     	; 0x4ec <__floatsisf+0x6a>
 4ca:	77 23       	and	r23, r23
 4cc:	21 f0       	breq	.+8      	; 0x4d6 <__floatsisf+0x54>
 4ce:	9e e8       	ldi	r25, 0x8E	; 142
 4d0:	87 2f       	mov	r24, r23
 4d2:	76 2f       	mov	r23, r22
 4d4:	05 c0       	rjmp	.+10     	; 0x4e0 <__floatsisf+0x5e>
 4d6:	66 23       	and	r22, r22
 4d8:	71 f0       	breq	.+28     	; 0x4f6 <__floatsisf+0x74>
 4da:	96 e8       	ldi	r25, 0x86	; 134
 4dc:	86 2f       	mov	r24, r22
 4de:	70 e0       	ldi	r23, 0x00	; 0
 4e0:	60 e0       	ldi	r22, 0x00	; 0
 4e2:	2a f0       	brmi	.+10     	; 0x4ee <__floatsisf+0x6c>
 4e4:	9a 95       	dec	r25
 4e6:	66 0f       	add	r22, r22
 4e8:	77 1f       	adc	r23, r23
 4ea:	88 1f       	adc	r24, r24
 4ec:	da f7       	brpl	.-10     	; 0x4e4 <__floatsisf+0x62>
 4ee:	88 0f       	add	r24, r24
 4f0:	96 95       	lsr	r25
 4f2:	87 95       	ror	r24
 4f4:	97 f9       	bld	r25, 7
 4f6:	08 95       	ret

000004f8 <__fp_cmp>:
 4f8:	99 0f       	add	r25, r25
 4fa:	00 08       	sbc	r0, r0
 4fc:	55 0f       	add	r21, r21
 4fe:	aa 0b       	sbc	r26, r26
 500:	e0 e8       	ldi	r30, 0x80	; 128
 502:	fe ef       	ldi	r31, 0xFE	; 254
 504:	16 16       	cp	r1, r22
 506:	17 06       	cpc	r1, r23
 508:	e8 07       	cpc	r30, r24
 50a:	f9 07       	cpc	r31, r25
 50c:	c0 f0       	brcs	.+48     	; 0x53e <__fp_cmp+0x46>
 50e:	12 16       	cp	r1, r18
 510:	13 06       	cpc	r1, r19
 512:	e4 07       	cpc	r30, r20
 514:	f5 07       	cpc	r31, r21
 516:	98 f0       	brcs	.+38     	; 0x53e <__fp_cmp+0x46>
 518:	62 1b       	sub	r22, r18
 51a:	73 0b       	sbc	r23, r19
 51c:	84 0b       	sbc	r24, r20
 51e:	95 0b       	sbc	r25, r21
 520:	39 f4       	brne	.+14     	; 0x530 <__fp_cmp+0x38>
 522:	0a 26       	eor	r0, r26
 524:	61 f0       	breq	.+24     	; 0x53e <__fp_cmp+0x46>
 526:	23 2b       	or	r18, r19
 528:	24 2b       	or	r18, r20
 52a:	25 2b       	or	r18, r21
 52c:	21 f4       	brne	.+8      	; 0x536 <__fp_cmp+0x3e>
 52e:	08 95       	ret
 530:	0a 26       	eor	r0, r26
 532:	09 f4       	brne	.+2      	; 0x536 <__fp_cmp+0x3e>
 534:	a1 40       	sbci	r26, 0x01	; 1
 536:	a6 95       	lsr	r26
 538:	8f ef       	ldi	r24, 0xFF	; 255
 53a:	81 1d       	adc	r24, r1
 53c:	81 1d       	adc	r24, r1
 53e:	08 95       	ret

00000540 <__udivmodsi4>:
 540:	a1 e2       	ldi	r26, 0x21	; 33
 542:	1a 2e       	mov	r1, r26
 544:	aa 1b       	sub	r26, r26
 546:	bb 1b       	sub	r27, r27
 548:	fd 01       	movw	r30, r26
 54a:	0d c0       	rjmp	.+26     	; 0x566 <__udivmodsi4_ep>

0000054c <__udivmodsi4_loop>:
 54c:	aa 1f       	adc	r26, r26
 54e:	bb 1f       	adc	r27, r27
 550:	ee 1f       	adc	r30, r30
 552:	ff 1f       	adc	r31, r31
 554:	a2 17       	cp	r26, r18
 556:	b3 07       	cpc	r27, r19
 558:	e4 07       	cpc	r30, r20
 55a:	f5 07       	cpc	r31, r21
 55c:	20 f0       	brcs	.+8      	; 0x566 <__udivmodsi4_ep>
 55e:	a2 1b       	sub	r26, r18
 560:	b3 0b       	sbc	r27, r19
 562:	e4 0b       	sbc	r30, r20
 564:	f5 0b       	sbc	r31, r21

00000566 <__udivmodsi4_ep>:
 566:	66 1f       	adc	r22, r22
 568:	77 1f       	adc	r23, r23
 56a:	88 1f       	adc	r24, r24
 56c:	99 1f       	adc	r25, r25
 56e:	1a 94       	dec	r1
 570:	69 f7       	brne	.-38     	; 0x54c <__udivmodsi4_loop>
 572:	60 95       	com	r22
 574:	70 95       	com	r23
 576:	80 95       	com	r24
 578:	90 95       	com	r25
 57a:	9b 01       	movw	r18, r22
 57c:	ac 01       	movw	r20, r24
 57e:	bd 01       	movw	r22, r26
 580:	cf 01       	movw	r24, r30
 582:	08 95       	ret

00000584 <_exit>:
 584:	f8 94       	cli

00000586 <__stop_program>:
 586:	ff cf       	rjmp	.-2      	; 0x586 <__stop_program>
