
Project!C2222.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000a1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009a8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000027  00800100  00800100  00000a1c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a1c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a4c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000180  00000000  00000000  00000a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000019fa  00000000  00000000  00000c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d35  00000000  00000000  00002606  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d3b  00000000  00000000  0000333b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002e8  00000000  00000000  00004078  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000698  00000000  00000000  00004360  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bcd  00000000  00000000  000049f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  000055c5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ea       	ldi	r30, 0xA8	; 168
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 32       	cpi	r26, 0x27	; 39
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 64 01 	call	0x2c8	; 0x2c8 <main>
  9e:	0c 94 d2 04 	jmp	0x9a4	; 0x9a4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SCH_Add_Task>:
  Task will be first executed at T = 300 ticks, then 1300, 2300, etc.

-*------------------------------------------------------------------*/

unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
  a6:	0f 93       	push	r16
  a8:	1f 93       	push	r17
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
  ae:	8c 01       	movw	r16, r24
   unsigned char Index = 0;

   // First find a gap in the array (if there is one)
   while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
  b0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <SCH_tasks_G>
  b4:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <SCH_tasks_G+0x1>
  b8:	89 2b       	or	r24, r25
  ba:	81 f0       	breq	.+32     	; 0xdc <SCH_Add_Task+0x36>
  bc:	e1 e0       	ldi	r30, 0x01	; 1
  be:	f1 e0       	ldi	r31, 0x01	; 1
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	30 e0       	ldi	r19, 0x00	; 0
   {
      Index++;
  c4:	82 2f       	mov	r24, r18
unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
   unsigned char Index = 0;

   // First find a gap in the array (if there is one)
   while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
  c6:	e9 01       	movw	r28, r18
  c8:	a7 81       	ldd	r26, Z+7	; 0x07
  ca:	b0 85       	ldd	r27, Z+8	; 0x08
  cc:	2f 5f       	subi	r18, 0xFF	; 255
  ce:	3f 4f       	sbci	r19, 0xFF	; 255
  d0:	37 96       	adiw	r30, 0x07	; 7
  d2:	ab 2b       	or	r26, r27
  d4:	b9 f7       	brne	.-18     	; 0xc4 <SCH_Add_Task+0x1e>
   {
      Index++;
   }

   // Have we reached the end of the list?
   if(Index == SCH_MAX_TASKS)
  d6:	85 30       	cpi	r24, 0x05	; 5
  d8:	21 f4       	brne	.+8      	; 0xe2 <SCH_Add_Task+0x3c>
  da:	15 c0       	rjmp	.+42     	; 0x106 <SCH_Add_Task+0x60>
unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
   unsigned char Index = 0;

   // First find a gap in the array (if there is one)
   while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
  dc:	c0 e0       	ldi	r28, 0x00	; 0
  de:	d0 e0       	ldi	r29, 0x00	; 0

-*------------------------------------------------------------------*/

unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
   unsigned char Index = 0;
  e0:	80 e0       	ldi	r24, 0x00	; 0
      // Task list is full, return an error code
      return SCH_MAX_TASKS;
   }

   // If we're here, there is a space in the task array
   SCH_tasks_G[Index].pTask = pFunction;
  e2:	fe 01       	movw	r30, r28
  e4:	ee 0f       	add	r30, r30
  e6:	ff 1f       	adc	r31, r31
  e8:	ee 0f       	add	r30, r30
  ea:	ff 1f       	adc	r31, r31
  ec:	ee 0f       	add	r30, r30
  ee:	ff 1f       	adc	r31, r31
  f0:	ec 1b       	sub	r30, r28
  f2:	fd 0b       	sbc	r31, r29
  f4:	ef 5f       	subi	r30, 0xFF	; 255
  f6:	fe 4f       	sbci	r31, 0xFE	; 254
  f8:	11 83       	std	Z+1, r17	; 0x01
  fa:	00 83       	st	Z, r16
   SCH_tasks_G[Index].Delay =DELAY;
  fc:	73 83       	std	Z+3, r23	; 0x03
  fe:	62 83       	std	Z+2, r22	; 0x02
   SCH_tasks_G[Index].Period = PERIOD;
 100:	55 83       	std	Z+5, r21	; 0x05
 102:	44 83       	std	Z+4, r20	; 0x04
   SCH_tasks_G[Index].RunMe = 0;
 104:	16 82       	std	Z+6, r1	; 0x06

   // return position of task (to allow later deletion)
   return Index;
}
 106:	df 91       	pop	r29
 108:	cf 91       	pop	r28
 10a:	1f 91       	pop	r17
 10c:	0f 91       	pop	r16
 10e:	08 95       	ret

00000110 <SCH_Delete_Task>:
unsigned char SCH_Delete_Task(const unsigned char TASK_INDEX)
{
   // Return_code can be used for error reporting, NOT USED HERE THOUGH!
   unsigned char Return_code = 0;

   SCH_tasks_G[TASK_INDEX].pTask = 0;
 110:	27 e0       	ldi	r18, 0x07	; 7
 112:	82 9f       	mul	r24, r18
 114:	c0 01       	movw	r24, r0
 116:	11 24       	eor	r1, r1
 118:	fc 01       	movw	r30, r24
 11a:	ef 5f       	subi	r30, 0xFF	; 255
 11c:	fe 4f       	sbci	r31, 0xFE	; 254
 11e:	11 82       	std	Z+1, r1	; 0x01
 120:	10 82       	st	Z, r1
   SCH_tasks_G[TASK_INDEX].Delay = 0;
 122:	13 82       	std	Z+3, r1	; 0x03
 124:	12 82       	std	Z+2, r1	; 0x02
   SCH_tasks_G[TASK_INDEX].Period = 0;
 126:	15 82       	std	Z+5, r1	; 0x05
 128:	14 82       	std	Z+4, r1	; 0x04
   SCH_tasks_G[TASK_INDEX].RunMe = 0;
 12a:	16 82       	std	Z+6, r1	; 0x06

   return Return_code;
}
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	08 95       	ret

00000130 <SCH_Dispatch_Tasks>:
  This function must be called (repeatedly) from the main loop.

-*------------------------------------------------------------------*/

void SCH_Dispatch_Tasks(void)
{
 130:	ef 92       	push	r14
 132:	ff 92       	push	r15
 134:	1f 93       	push	r17
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	c1 e0       	ldi	r28, 0x01	; 1
 13c:	d1 e0       	ldi	r29, 0x01	; 1
   unsigned char Index;

   // Dispatches (runs) the next task (if one is ready)
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
 13e:	10 e0       	ldi	r17, 0x00	; 0
   {
      if((SCH_tasks_G[Index].RunMe > 0) && (SCH_tasks_G[Index].pTask != 0))
 140:	8e 81       	ldd	r24, Y+6	; 0x06
 142:	88 23       	and	r24, r24
 144:	79 f0       	breq	.+30     	; 0x164 <SCH_Dispatch_Tasks+0x34>
 146:	e8 81       	ld	r30, Y
 148:	f9 81       	ldd	r31, Y+1	; 0x01
 14a:	30 97       	sbiw	r30, 0x00	; 0
 14c:	59 f0       	breq	.+22     	; 0x164 <SCH_Dispatch_Tasks+0x34>
      {
         (*SCH_tasks_G[Index].pTask)();  // Run the task
 14e:	09 95       	icall
         SCH_tasks_G[Index].RunMe -= 1;   // Reset / reduce RunMe flag
 150:	8e 81       	ldd	r24, Y+6	; 0x06
 152:	81 50       	subi	r24, 0x01	; 1
 154:	8e 83       	std	Y+6, r24	; 0x06

         // Periodic tasks will automatically run again
         // - if this is a 'one shot' task, remove it from the array
         if(SCH_tasks_G[Index].Period == 0)
 156:	8c 81       	ldd	r24, Y+4	; 0x04
 158:	9d 81       	ldd	r25, Y+5	; 0x05
 15a:	89 2b       	or	r24, r25
 15c:	19 f4       	brne	.+6      	; 0x164 <SCH_Dispatch_Tasks+0x34>
         {
            SCH_Delete_Task(Index);
 15e:	81 2f       	mov	r24, r17
 160:	0e 94 88 00 	call	0x110	; 0x110 <SCH_Delete_Task>
void SCH_Dispatch_Tasks(void)
{
   unsigned char Index;

   // Dispatches (runs) the next task (if one is ready)
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
 164:	1f 5f       	subi	r17, 0xFF	; 255
 166:	27 96       	adiw	r28, 0x07	; 7
 168:	15 30       	cpi	r17, 0x05	; 5
 16a:	51 f7       	brne	.-44     	; 0x140 <SCH_Dispatch_Tasks+0x10>
         {
            SCH_Delete_Task(Index);
         }
      }
   }
}
 16c:	df 91       	pop	r29
 16e:	cf 91       	pop	r28
 170:	1f 91       	pop	r17
 172:	ff 90       	pop	r15
 174:	ef 90       	pop	r14
 176:	08 95       	ret

00000178 <SCH_Init_T1>:
  You must call this function before using the scheduler.

-*------------------------------------------------------------------*/

void SCH_Init_T1(void)
{
 178:	cf 93       	push	r28
   unsigned char i;

   for(i = 0; i < SCH_MAX_TASKS; i++)
 17a:	c0 e0       	ldi	r28, 0x00	; 0
   {
      SCH_Delete_Task(i);
 17c:	8c 2f       	mov	r24, r28
 17e:	0e 94 88 00 	call	0x110	; 0x110 <SCH_Delete_Task>

void SCH_Init_T1(void)
{
   unsigned char i;

   for(i = 0; i < SCH_MAX_TASKS; i++)
 182:	cf 5f       	subi	r28, 0xFF	; 255
 184:	c5 30       	cpi	r28, 0x05	; 5
 186:	d1 f7       	brne	.-12     	; 0x17c <SCH_Init_T1+0x4>

   // Set up Timer 1
   // Values for 1ms and 10ms ticks are provided for various crystals

   // Hier moet de timer periode worden aangepast ....!
   OCR1A = (uint16_t)625;   		     // 10ms = (256/16.000.000) * 625
 188:	81 e7       	ldi	r24, 0x71	; 113
 18a:	92 e0       	ldi	r25, 0x02	; 2
 18c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 190:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
   TCCR1B = (1 << CS12) | (1 << WGM12);  // prescale op 64, top counter = value OCR1A (CTC mode)
 194:	8c e0       	ldi	r24, 0x0C	; 12
 196:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
   TIMSK1 = 1 << OCIE1A;   		     // Timer 1 Output Compare A Match Interrupt Enable
 19a:	82 e0       	ldi	r24, 0x02	; 2
 19c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
}
 1a0:	cf 91       	pop	r28
 1a2:	08 95       	ret

000001a4 <SCH_Start>:

-*------------------------------------------------------------------*/

void SCH_Start(void)
{
      sei();
 1a4:	78 94       	sei
 1a6:	08 95       	ret

000001a8 <__vector_11>:
  determined by the timer settings in SCH_Init_T1().

-*------------------------------------------------------------------*/

ISR(TIMER1_COMPA_vect)
{
 1a8:	1f 92       	push	r1
 1aa:	0f 92       	push	r0
 1ac:	0f b6       	in	r0, 0x3f	; 63
 1ae:	0f 92       	push	r0
 1b0:	11 24       	eor	r1, r1
 1b2:	2f 93       	push	r18
 1b4:	3f 93       	push	r19
 1b6:	8f 93       	push	r24
 1b8:	9f 93       	push	r25
 1ba:	af 93       	push	r26
 1bc:	bf 93       	push	r27
 1be:	ef 93       	push	r30
 1c0:	ff 93       	push	r31
 1c2:	e1 e0       	ldi	r30, 0x01	; 1
 1c4:	f1 e0       	ldi	r31, 0x01	; 1
 1c6:	24 e2       	ldi	r18, 0x24	; 36
 1c8:	31 e0       	ldi	r19, 0x01	; 1
   unsigned char Index;
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
   {
      // Check if there is a task at this location
      if(SCH_tasks_G[Index].pTask)
 1ca:	80 81       	ld	r24, Z
 1cc:	91 81       	ldd	r25, Z+1	; 0x01
 1ce:	89 2b       	or	r24, r25
 1d0:	91 f0       	breq	.+36     	; 0x1f6 <__vector_11+0x4e>
      {
         if(SCH_tasks_G[Index].Delay == 0)
 1d2:	82 81       	ldd	r24, Z+2	; 0x02
 1d4:	93 81       	ldd	r25, Z+3	; 0x03
 1d6:	00 97       	sbiw	r24, 0x00	; 0
 1d8:	59 f4       	brne	.+22     	; 0x1f0 <__vector_11+0x48>
         {
            // The task is due to run, Inc. the 'RunMe' flag
            SCH_tasks_G[Index].RunMe += 1;
 1da:	86 81       	ldd	r24, Z+6	; 0x06
 1dc:	8f 5f       	subi	r24, 0xFF	; 255
 1de:	86 83       	std	Z+6, r24	; 0x06

            if(SCH_tasks_G[Index].Period)
 1e0:	84 81       	ldd	r24, Z+4	; 0x04
 1e2:	95 81       	ldd	r25, Z+5	; 0x05
 1e4:	00 97       	sbiw	r24, 0x00	; 0
 1e6:	39 f0       	breq	.+14     	; 0x1f6 <__vector_11+0x4e>
            {
               // Schedule periodic tasks to run again
               SCH_tasks_G[Index].Delay = SCH_tasks_G[Index].Period;
               SCH_tasks_G[Index].Delay -= 1;
 1e8:	01 97       	sbiw	r24, 0x01	; 1
 1ea:	93 83       	std	Z+3, r25	; 0x03
 1ec:	82 83       	std	Z+2, r24	; 0x02
 1ee:	03 c0       	rjmp	.+6      	; 0x1f6 <__vector_11+0x4e>
            }
         }
         else
         {
            // Not yet ready to run: just decrement the delay
            SCH_tasks_G[Index].Delay -= 1;
 1f0:	01 97       	sbiw	r24, 0x01	; 1
 1f2:	93 83       	std	Z+3, r25	; 0x03
 1f4:	82 83       	std	Z+2, r24	; 0x02
 1f6:	37 96       	adiw	r30, 0x07	; 7
-*------------------------------------------------------------------*/

ISR(TIMER1_COMPA_vect)
{
   unsigned char Index;
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
 1f8:	e2 17       	cp	r30, r18
 1fa:	f3 07       	cpc	r31, r19
 1fc:	31 f7       	brne	.-52     	; 0x1ca <__vector_11+0x22>
            // Not yet ready to run: just decrement the delay
            SCH_tasks_G[Index].Delay -= 1;
         }
      }
   }
}
 1fe:	ff 91       	pop	r31
 200:	ef 91       	pop	r30
 202:	bf 91       	pop	r27
 204:	af 91       	pop	r26
 206:	9f 91       	pop	r25
 208:	8f 91       	pop	r24
 20a:	3f 91       	pop	r19
 20c:	2f 91       	pop	r18
 20e:	0f 90       	pop	r0
 210:	0f be       	out	0x3f, r0	; 63
 212:	0f 90       	pop	r0
 214:	1f 90       	pop	r1
 216:	18 95       	reti

00000218 <Light>:
		rolledInOrOut(2, getMaxRoll());
	}
	
	if (data2 >= getMaxTemp())
	{
		rolledInOrOut(2, getMaxRoll());
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	0e 94 ac 02 	call	0x558	; 0x558 <getLight>
 220:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <data1>
 224:	81 e1       	ldi	r24, 0x11	; 17
 226:	0e 94 c1 02 	call	0x582	; 0x582 <transmitSerial>
 22a:	2f ef       	ldi	r18, 0xFF	; 255
 22c:	80 e7       	ldi	r24, 0x70	; 112
 22e:	92 e0       	ldi	r25, 0x02	; 2
 230:	21 50       	subi	r18, 0x01	; 1
 232:	80 40       	sbci	r24, 0x00	; 0
 234:	90 40       	sbci	r25, 0x00	; 0
 236:	e1 f7       	brne	.-8      	; 0x230 <Light+0x18>
 238:	00 c0       	rjmp	.+0      	; 0x23a <Light+0x22>
 23a:	00 00       	nop
 23c:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <data1>
 240:	0e 94 c1 02 	call	0x582	; 0x582 <transmitSerial>
 244:	8f e3       	ldi	r24, 0x3F	; 63
 246:	9c e9       	ldi	r25, 0x9C	; 156
 248:	01 97       	sbiw	r24, 0x01	; 1
 24a:	f1 f7       	brne	.-4      	; 0x248 <Light+0x30>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <Light+0x36>
 24e:	00 00       	nop
 250:	08 95       	ret

00000252 <Temperature>:
 252:	82 e0       	ldi	r24, 0x02	; 2
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	0e 94 a4 02 	call	0x548	; 0x548 <getTemp>
 25a:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <data2>
 25e:	82 e1       	ldi	r24, 0x12	; 18
 260:	0e 94 c1 02 	call	0x582	; 0x582 <transmitSerial>
 264:	2f ef       	ldi	r18, 0xFF	; 255
 266:	80 e7       	ldi	r24, 0x70	; 112
 268:	92 e0       	ldi	r25, 0x02	; 2
 26a:	21 50       	subi	r18, 0x01	; 1
 26c:	80 40       	sbci	r24, 0x00	; 0
 26e:	90 40       	sbci	r25, 0x00	; 0
 270:	e1 f7       	brne	.-8      	; 0x26a <Temperature+0x18>
 272:	00 c0       	rjmp	.+0      	; 0x274 <Temperature+0x22>
 274:	00 00       	nop
 276:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <data2>
 27a:	0e 94 c1 02 	call	0x582	; 0x582 <transmitSerial>
 27e:	8f e3       	ldi	r24, 0x3F	; 63
 280:	9c e9       	ldi	r25, 0x9C	; 156
 282:	01 97       	sbiw	r24, 0x01	; 1
 284:	f1 f7       	brne	.-4      	; 0x282 <Temperature+0x30>
 286:	00 c0       	rjmp	.+0      	; 0x288 <Temperature+0x36>
 288:	00 00       	nop
 28a:	08 95       	ret

0000028c <Distance>:
 28c:	0e 94 90 01 	call	0x320	; 0x320 <calcDistance>
 290:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <data3>
 294:	83 e1       	ldi	r24, 0x13	; 19
 296:	0e 94 c1 02 	call	0x582	; 0x582 <transmitSerial>
 29a:	2f ef       	ldi	r18, 0xFF	; 255
 29c:	80 e7       	ldi	r24, 0x70	; 112
 29e:	92 e0       	ldi	r25, 0x02	; 2
 2a0:	21 50       	subi	r18, 0x01	; 1
 2a2:	80 40       	sbci	r24, 0x00	; 0
 2a4:	90 40       	sbci	r25, 0x00	; 0
 2a6:	e1 f7       	brne	.-8      	; 0x2a0 <Distance+0x14>
 2a8:	00 c0       	rjmp	.+0      	; 0x2aa <Distance+0x1e>
 2aa:	00 00       	nop
 2ac:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <data3>
 2b0:	0e 94 c1 02 	call	0x582	; 0x582 <transmitSerial>
 2b4:	2f ef       	ldi	r18, 0xFF	; 255
 2b6:	89 ef       	ldi	r24, 0xF9	; 249
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	21 50       	subi	r18, 0x01	; 1
 2bc:	80 40       	sbci	r24, 0x00	; 0
 2be:	90 40       	sbci	r25, 0x00	; 0
 2c0:	e1 f7       	brne	.-8      	; 0x2ba <Distance+0x2e>
 2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <Distance+0x38>
 2c4:	00 00       	nop
 2c6:	08 95       	ret

000002c8 <main>:


int main(void)
{
	
	analog_config();
 2c8:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <analog_config>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2cc:	2f ef       	ldi	r18, 0xFF	; 255
 2ce:	83 ed       	ldi	r24, 0xD3	; 211
 2d0:	90 e3       	ldi	r25, 0x30	; 48
 2d2:	21 50       	subi	r18, 0x01	; 1
 2d4:	80 40       	sbci	r24, 0x00	; 0
 2d6:	90 40       	sbci	r25, 0x00	; 0
 2d8:	e1 f7       	brne	.-8      	; 0x2d2 <main+0xa>
 2da:	00 c0       	rjmp	.+0      	; 0x2dc <main+0x14>
 2dc:	00 00       	nop
	_delay_ms(1000);
	
	//setDefaultValues();
	
	
	initSerial();
 2de:	0e 94 b3 02 	call	0x566	; 0x566 <initSerial>
	
	SCH_Init_T1(); // stel de scheduler in
 2e2:	0e 94 bc 00 	call	0x178	; 0x178 <SCH_Init_T1>
	SCH_Add_Task(Temperature, 0, 200); // temp zit op A1.
 2e6:	48 ec       	ldi	r20, 0xC8	; 200
 2e8:	50 e0       	ldi	r21, 0x00	; 0
 2ea:	60 e0       	ldi	r22, 0x00	; 0
 2ec:	70 e0       	ldi	r23, 0x00	; 0
 2ee:	89 e2       	ldi	r24, 0x29	; 41
 2f0:	91 e0       	ldi	r25, 0x01	; 1
 2f2:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	SCH_Add_Task(Light, 100, 200); // Voeg taken toe aan de scheduler Light zit op A0.
 2f6:	48 ec       	ldi	r20, 0xC8	; 200
 2f8:	50 e0       	ldi	r21, 0x00	; 0
 2fa:	64 e6       	ldi	r22, 0x64	; 100
 2fc:	70 e0       	ldi	r23, 0x00	; 0
 2fe:	8c e0       	ldi	r24, 0x0C	; 12
 300:	91 e0       	ldi	r25, 0x01	; 1
 302:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	//SCH_Add_Task(settingsChecker, 200, 200); // misschien om de minuut
	//SCH_Add_Task(serialReactor,0,1);
	
	SCH_Add_Task(Distance, 20, 100);
 306:	44 e6       	ldi	r20, 0x64	; 100
 308:	50 e0       	ldi	r21, 0x00	; 0
 30a:	64 e1       	ldi	r22, 0x14	; 20
 30c:	70 e0       	ldi	r23, 0x00	; 0
 30e:	86 e4       	ldi	r24, 0x46	; 70
 310:	91 e0       	ldi	r25, 0x01	; 1
 312:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	
	
	SCH_Start();// start de scheduler 
 316:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <SCH_Start>
	
	
    while (1)
    {
		SCH_Dispatch_Tasks(); // verzend de taken
 31a:	0e 94 98 00 	call	0x130	; 0x130 <SCH_Dispatch_Tasks>
 31e:	fd cf       	rjmp	.-6      	; 0x31a <main+0x52>

00000320 <calcDistance>:
#define echoPin 9

uint8_t pulsie = 0;

uint8_t calcDistance()
{
 320:	cf 93       	push	r28
 322:	df 93       	push	r29
		
		digital_write(echoPin, LOW);
 324:	60 e0       	ldi	r22, 0x00	; 0
 326:	70 e0       	ldi	r23, 0x00	; 0
 328:	89 e0       	ldi	r24, 0x09	; 9
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	0e 94 de 01 	call	0x3bc	; 0x3bc <digital_write>
		digital_write(trigPin, HIGH);
 330:	61 e0       	ldi	r22, 0x01	; 1
 332:	70 e0       	ldi	r23, 0x00	; 0
 334:	88 e0       	ldi	r24, 0x08	; 8
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	0e 94 de 01 	call	0x3bc	; 0x3bc <digital_write>
	
		int counter = 0;
	
		digital_write(trigPin, LOW); // zorg ervoor dat trigger leeg is!
 33c:	60 e0       	ldi	r22, 0x00	; 0
 33e:	70 e0       	ldi	r23, 0x00	; 0
 340:	88 e0       	ldi	r24, 0x08	; 8
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	0e 94 de 01 	call	0x3bc	; 0x3bc <digital_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 348:	00 c0       	rjmp	.+0      	; 0x34a <calcDistance+0x2a>
		_delay_us(2);
		digital_write(trigPin, HIGH);
 34a:	61 e0       	ldi	r22, 0x01	; 1
 34c:	70 e0       	ldi	r23, 0x00	; 0
 34e:	88 e0       	ldi	r24, 0x08	; 8
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	0e 94 de 01 	call	0x3bc	; 0x3bc <digital_write>
 356:	83 e0       	ldi	r24, 0x03	; 3
 358:	8a 95       	dec	r24
 35a:	f1 f7       	brne	.-4      	; 0x358 <calcDistance+0x38>
 35c:	00 00       	nop
		
		_delay_us(10);
		digital_write(trigPin, LOW);
 35e:	60 e0       	ldi	r22, 0x00	; 0
 360:	70 e0       	ldi	r23, 0x00	; 0
 362:	88 e0       	ldi	r24, 0x08	; 8
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	0e 94 de 01 	call	0x3bc	; 0x3bc <digital_write>

		//
		while(!digital_read(echoPin)){}
 36a:	89 e0       	ldi	r24, 0x09	; 9
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	0e 94 2b 02 	call	0x456	; 0x456 <digital_read>
 372:	89 2b       	or	r24, r25
 374:	d1 f3       	breq	.-12     	; 0x36a <calcDistance+0x4a>
 376:	c0 e0       	ldi	r28, 0x00	; 0
 378:	d0 e0       	ldi	r29, 0x00	; 0
 37a:	01 c0       	rjmp	.+2      	; 0x37e <calcDistance+0x5e>
		
		//
		while(digital_read(echoPin)){
			counter += 1;
 37c:	21 96       	adiw	r28, 0x01	; 1

		//
		while(!digital_read(echoPin)){}
		
		//
		while(digital_read(echoPin)){
 37e:	89 e0       	ldi	r24, 0x09	; 9
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	0e 94 2b 02 	call	0x456	; 0x456 <digital_read>
 386:	89 2b       	or	r24, r25
 388:	c9 f7       	brne	.-14     	; 0x37c <calcDistance+0x5c>
			counter += 1;
		}
		
		// Bereken de afstand
		pulsie = (counter >> 2)/ 5.7; // dit hebben we gekalibreerd.
 38a:	be 01       	movw	r22, r28
 38c:	75 95       	asr	r23
 38e:	67 95       	ror	r22
 390:	75 95       	asr	r23
 392:	67 95       	ror	r22
 394:	07 2e       	mov	r0, r23
 396:	00 0c       	add	r0, r0
 398:	88 0b       	sbc	r24, r24
 39a:	99 0b       	sbc	r25, r25
 39c:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <__floatsisf>
 3a0:	26 e6       	ldi	r18, 0x66	; 102
 3a2:	36 e6       	ldi	r19, 0x66	; 102
 3a4:	46 eb       	ldi	r20, 0xB6	; 182
 3a6:	50 e4       	ldi	r21, 0x40	; 64
 3a8:	0e 94 36 03 	call	0x66c	; 0x66c <__divsf3>
 3ac:	0e 94 a8 03 	call	0x750	; 0x750 <__fixunssfsi>
 3b0:	86 2f       	mov	r24, r22
 3b2:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_end>
		// Bereken de afstand
		
		return pulsie;
	
}
 3b6:	df 91       	pop	r29
 3b8:	cf 91       	pop	r28
 3ba:	08 95       	ret

000003bc <digital_write>:

/*
 * Sets a digital pin to 0 or 1
 */
void digital_write(int pin, int value) {
	if(pin < 8) {
 3bc:	88 30       	cpi	r24, 0x08	; 8
 3be:	91 05       	cpc	r25, r1
 3c0:	ec f4       	brge	.+58     	; 0x3fc <digital_write+0x40>
		if(value == 0) {
 3c2:	67 2b       	or	r22, r23
 3c4:	71 f4       	brne	.+28     	; 0x3e2 <digital_write+0x26>
			PORTD = PORTD & ~(1 << pin);
 3c6:	4b b1       	in	r20, 0x0b	; 11
 3c8:	21 e0       	ldi	r18, 0x01	; 1
 3ca:	30 e0       	ldi	r19, 0x00	; 0
 3cc:	b9 01       	movw	r22, r18
 3ce:	02 c0       	rjmp	.+4      	; 0x3d4 <digital_write+0x18>
 3d0:	66 0f       	add	r22, r22
 3d2:	77 1f       	adc	r23, r23
 3d4:	8a 95       	dec	r24
 3d6:	e2 f7       	brpl	.-8      	; 0x3d0 <digital_write+0x14>
 3d8:	cb 01       	movw	r24, r22
 3da:	80 95       	com	r24
 3dc:	84 23       	and	r24, r20
 3de:	8b b9       	out	0x0b, r24	; 11
 3e0:	08 95       	ret
		} else {
			PORTD = PORTD | (1 << pin);
 3e2:	4b b1       	in	r20, 0x0b	; 11
 3e4:	21 e0       	ldi	r18, 0x01	; 1
 3e6:	30 e0       	ldi	r19, 0x00	; 0
 3e8:	b9 01       	movw	r22, r18
 3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <digital_write+0x34>
 3ec:	66 0f       	add	r22, r22
 3ee:	77 1f       	adc	r23, r23
 3f0:	8a 95       	dec	r24
 3f2:	e2 f7       	brpl	.-8      	; 0x3ec <digital_write+0x30>
 3f4:	cb 01       	movw	r24, r22
 3f6:	84 2b       	or	r24, r20
 3f8:	8b b9       	out	0x0b, r24	; 11
 3fa:	08 95       	ret
		}

	} else {
		if(value == 0) {
 3fc:	67 2b       	or	r22, r23
 3fe:	b1 f4       	brne	.+44     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
			PORTB = PORTB & ~(1 << (pin%8));
 400:	45 b1       	in	r20, 0x05	; 5
 402:	87 70       	andi	r24, 0x07	; 7
 404:	90 78       	andi	r25, 0x80	; 128
 406:	99 23       	and	r25, r25
 408:	24 f4       	brge	.+8      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 40a:	01 97       	sbiw	r24, 0x01	; 1
 40c:	88 6f       	ori	r24, 0xF8	; 248
 40e:	9f 6f       	ori	r25, 0xFF	; 255
 410:	01 96       	adiw	r24, 0x01	; 1
 412:	21 e0       	ldi	r18, 0x01	; 1
 414:	30 e0       	ldi	r19, 0x00	; 0
 416:	b9 01       	movw	r22, r18
 418:	02 c0       	rjmp	.+4      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 41a:	66 0f       	add	r22, r22
 41c:	77 1f       	adc	r23, r23
 41e:	8a 95       	dec	r24
 420:	e2 f7       	brpl	.-8      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 422:	cb 01       	movw	r24, r22
 424:	80 95       	com	r24
 426:	84 23       	and	r24, r20
 428:	85 b9       	out	0x05, r24	; 5
 42a:	08 95       	ret
		} else {
			PORTB = PORTB | (1 << (pin%8));
 42c:	45 b1       	in	r20, 0x05	; 5
 42e:	87 70       	andi	r24, 0x07	; 7
 430:	90 78       	andi	r25, 0x80	; 128
 432:	99 23       	and	r25, r25
 434:	24 f4       	brge	.+8      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 436:	01 97       	sbiw	r24, 0x01	; 1
 438:	88 6f       	ori	r24, 0xF8	; 248
 43a:	9f 6f       	ori	r25, 0xFF	; 255
 43c:	01 96       	adiw	r24, 0x01	; 1
 43e:	21 e0       	ldi	r18, 0x01	; 1
 440:	30 e0       	ldi	r19, 0x00	; 0
 442:	b9 01       	movw	r22, r18
 444:	02 c0       	rjmp	.+4      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 446:	66 0f       	add	r22, r22
 448:	77 1f       	adc	r23, r23
 44a:	8a 95       	dec	r24
 44c:	e2 f7       	brpl	.-8      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 44e:	cb 01       	movw	r24, r22
 450:	84 2b       	or	r24, r20
 452:	85 b9       	out	0x05, r24	; 5
 454:	08 95       	ret

00000456 <digital_read>:

/*
 * Gets a value from a digital pin 1 or 0
 */
int digital_read(int pin) {
	if (pin < 8)
 456:	88 30       	cpi	r24, 0x08	; 8
 458:	91 05       	cpc	r25, r1
 45a:	b4 f4       	brge	.+44     	; 0x488 <digital_read+0x32>
	{
		return (PIND & (1 << (pin%8)));
 45c:	29 b1       	in	r18, 0x09	; 9
 45e:	87 70       	andi	r24, 0x07	; 7
 460:	90 78       	andi	r25, 0x80	; 128
 462:	99 23       	and	r25, r25
 464:	24 f4       	brge	.+8      	; 0x46e <digital_read+0x18>
 466:	01 97       	sbiw	r24, 0x01	; 1
 468:	88 6f       	ori	r24, 0xF8	; 248
 46a:	9f 6f       	ori	r25, 0xFF	; 255
 46c:	01 96       	adiw	r24, 0x01	; 1
 46e:	41 e0       	ldi	r20, 0x01	; 1
 470:	50 e0       	ldi	r21, 0x00	; 0
 472:	ba 01       	movw	r22, r20
 474:	02 c0       	rjmp	.+4      	; 0x47a <digital_read+0x24>
 476:	66 0f       	add	r22, r22
 478:	77 1f       	adc	r23, r23
 47a:	8a 95       	dec	r24
 47c:	e2 f7       	brpl	.-8      	; 0x476 <digital_read+0x20>
 47e:	cb 01       	movw	r24, r22
 480:	30 e0       	ldi	r19, 0x00	; 0
 482:	82 23       	and	r24, r18
 484:	93 23       	and	r25, r19
 486:	08 95       	ret
	} else {
		return (PINB & (1 << (pin%8)));
 488:	23 b1       	in	r18, 0x03	; 3
 48a:	87 70       	andi	r24, 0x07	; 7
 48c:	90 78       	andi	r25, 0x80	; 128
 48e:	99 23       	and	r25, r25
 490:	24 f4       	brge	.+8      	; 0x49a <digital_read+0x44>
 492:	01 97       	sbiw	r24, 0x01	; 1
 494:	88 6f       	ori	r24, 0xF8	; 248
 496:	9f 6f       	ori	r25, 0xFF	; 255
 498:	01 96       	adiw	r24, 0x01	; 1
 49a:	41 e0       	ldi	r20, 0x01	; 1
 49c:	50 e0       	ldi	r21, 0x00	; 0
 49e:	ba 01       	movw	r22, r20
 4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <digital_read+0x50>
 4a2:	66 0f       	add	r22, r22
 4a4:	77 1f       	adc	r23, r23
 4a6:	8a 95       	dec	r24
 4a8:	e2 f7       	brpl	.-8      	; 0x4a2 <digital_read+0x4c>
 4aa:	cb 01       	movw	r24, r22
 4ac:	30 e0       	ldi	r19, 0x00	; 0
 4ae:	82 23       	and	r24, r18
 4b0:	93 23       	and	r25, r19
	}
}
 4b2:	08 95       	ret

000004b4 <analog_config>:

/*
 * Configures an ADC pin in this case pin 0
 */
void analog_config() {
 4b4:	cf 93       	push	r28
 4b6:	df 93       	push	r29
	ADMUX = 0x00; // reset ADC
 4b8:	ec e7       	ldi	r30, 0x7C	; 124
 4ba:	f0 e0       	ldi	r31, 0x00	; 0
 4bc:	10 82       	st	Z, r1
	ADMUX |= (1<<REFS0); // sets reference voltage
 4be:	80 81       	ld	r24, Z
 4c0:	80 64       	ori	r24, 0x40	; 64
 4c2:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADEN)|(1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2); // enable ADC, select ADC prescaler with ADPS
 4c4:	ca e7       	ldi	r28, 0x7A	; 122
 4c6:	d0 e0       	ldi	r29, 0x00	; 0
 4c8:	88 81       	ld	r24, Y
 4ca:	87 68       	ori	r24, 0x87	; 135
 4cc:	88 83       	st	Y, r24
	transmitSerial(0b11110000);
 4ce:	80 ef       	ldi	r24, 0xF0	; 240
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	0e 94 c1 02 	call	0x582	; 0x582 <transmitSerial>
	transmitSerial(ADCSRA);
 4d6:	88 81       	ld	r24, Y
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	0e 94 c1 02 	call	0x582	; 0x582 <transmitSerial>
}
 4de:	df 91       	pop	r29
 4e0:	cf 91       	pop	r28
 4e2:	08 95       	ret

000004e4 <analog_read>:

/*
 * Gets a value from an analog pin
 */
uint16_t analog_read(uint8_t adcx) {
	ADMUX = (ADMUX & 0xF8) | (adcx & 0x07); // mask the last three bits from admux
 4e4:	ec e7       	ldi	r30, 0x7C	; 124
 4e6:	f0 e0       	ldi	r31, 0x00	; 0
 4e8:	90 81       	ld	r25, Z
 4ea:	98 7f       	andi	r25, 0xF8	; 248
 4ec:	87 70       	andi	r24, 0x07	; 7
 4ee:	89 2b       	or	r24, r25
 4f0:	80 83       	st	Z, r24
	//transmitSerial(0b11110000);
	//transmitSerial(ADMUX);
	ADCSRA |= (1<<ADSC); // analog read is started
 4f2:	ea e7       	ldi	r30, 0x7A	; 122
 4f4:	f0 e0       	ldi	r31, 0x00	; 0
 4f6:	80 81       	ld	r24, Z
 4f8:	80 64       	ori	r24, 0x40	; 64
 4fa:	80 83       	st	Z, r24
	loop_until_bit_is_set(ADCSRA, ADSC);
 4fc:	80 81       	ld	r24, Z
 4fe:	86 ff       	sbrs	r24, 6
 500:	fd cf       	rjmp	.-6      	; 0x4fc <analog_read+0x18>
	return (ADC); //return adc
 502:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 506:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
 50a:	08 95       	ret

0000050c <temperatureInC>:
	// keer 5.0 omdat het om 5 volt gaat en gedeelt door 1024 omdat het een 10 bits getal is
	// voorbeeld: 2.5 volt = 512 * 5.0 / 1024. Je krijgt 512(0x200) binnen
	float temperatureC = (volt - 0.5) * 100;
	// de formule die ervoor zorgt dat het omgezet wordt.
	// voorbeeld: (1.2 - 0.5) * 100 = 70 graden Celsius.
	return temperatureC;
 50c:	bc 01       	movw	r22, r24
 50e:	80 e0       	ldi	r24, 0x00	; 0
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	0e 94 d7 03 	call	0x7ae	; 0x7ae <__floatunsisf>
 516:	20 e0       	ldi	r18, 0x00	; 0
 518:	30 e0       	ldi	r19, 0x00	; 0
 51a:	40 ea       	ldi	r20, 0xA0	; 160
 51c:	50 e4       	ldi	r21, 0x40	; 64
 51e:	0e 94 65 04 	call	0x8ca	; 0x8ca <__mulsf3>
 522:	20 e0       	ldi	r18, 0x00	; 0
 524:	30 e0       	ldi	r19, 0x00	; 0
 526:	40 e8       	ldi	r20, 0x80	; 128
 528:	5a e3       	ldi	r21, 0x3A	; 58
 52a:	0e 94 65 04 	call	0x8ca	; 0x8ca <__mulsf3>
 52e:	20 e0       	ldi	r18, 0x00	; 0
 530:	30 e0       	ldi	r19, 0x00	; 0
 532:	40 e0       	ldi	r20, 0x00	; 0
 534:	5f e3       	ldi	r21, 0x3F	; 63
 536:	0e 94 c9 02 	call	0x592	; 0x592 <__subsf3>
 53a:	20 e0       	ldi	r18, 0x00	; 0
 53c:	30 e0       	ldi	r19, 0x00	; 0
 53e:	48 ec       	ldi	r20, 0xC8	; 200
 540:	52 e4       	ldi	r21, 0x42	; 66
 542:	0e 94 65 04 	call	0x8ca	; 0x8ca <__mulsf3>
	
}
 546:	08 95       	ret

00000548 <getTemp>:


uint8_t getTemp(int pin){
	uint8_t tempInC = temperatureInC(analog_read(pin)); // lees ADC uit (A0) en maak er volt van en dan Celsius
 548:	0e 94 72 02 	call	0x4e4	; 0x4e4 <analog_read>
 54c:	0e 94 86 02 	call	0x50c	; 0x50c <temperatureInC>
	return tempInC;
 550:	0e 94 a8 03 	call	0x750	; 0x750 <__fixunssfsi>
 554:	86 2f       	mov	r24, r22
}
 556:	08 95       	ret

00000558 <getLight>:
/* Photocell sensor 
*********************************************************************************************************************/


uint8_t getLight(int pin){
	uint8_t light = (analog_read(pin) >> 2); 
 558:	0e 94 72 02 	call	0x4e4	; 0x4e4 <analog_read>
	// lees A1 uit, met een shift /4 
	// Je krijgt een 10 bits getal. We schuiven hem twee keer naar rechts zodat je 8 bits hebt.
	// Je verliest hier alleen de waarden 0-3 mee. Voor dit project niet erg.
	return light;
 55c:	96 95       	lsr	r25
 55e:	87 95       	ror	r24
 560:	96 95       	lsr	r25
 562:	87 95       	ror	r24
}
 564:	08 95       	ret

00000566 <initSerial>:
uint8_t receiveSerial() {
	// wait for data to be received
	while ( !(UCSR0A & (1 << RXC0)) );
	// get and return received data from buffer
	return UDR0;
}
 566:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 56a:	83 e3       	ldi	r24, 0x33	; 51
 56c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 570:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 574:	88 e1       	ldi	r24, 0x18	; 24
 576:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 57a:	86 e0       	ldi	r24, 0x06	; 6
 57c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 580:	08 95       	ret

00000582 <transmitSerial>:

void transmitSerial(uint8_t data) {
	// wait for an empty transmit buffer
	// UDRE is set when the transmit buffer is empty
	loop_until_bit_is_set(UCSR0A, UDRE0);
 582:	e0 ec       	ldi	r30, 0xC0	; 192
 584:	f0 e0       	ldi	r31, 0x00	; 0
 586:	90 81       	ld	r25, Z
 588:	95 ff       	sbrs	r25, 5
 58a:	fd cf       	rjmp	.-6      	; 0x586 <transmitSerial+0x4>
	// send the data
	UDR0 = data;
 58c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 590:	08 95       	ret

00000592 <__subsf3>:
 592:	50 58       	subi	r21, 0x80	; 128

00000594 <__addsf3>:
 594:	bb 27       	eor	r27, r27
 596:	aa 27       	eor	r26, r26
 598:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <__addsf3x>
 59c:	0c 94 2b 04 	jmp	0x856	; 0x856 <__fp_round>
 5a0:	0e 94 1d 04 	call	0x83a	; 0x83a <__fp_pscA>
 5a4:	38 f0       	brcs	.+14     	; 0x5b4 <__addsf3+0x20>
 5a6:	0e 94 24 04 	call	0x848	; 0x848 <__fp_pscB>
 5aa:	20 f0       	brcs	.+8      	; 0x5b4 <__addsf3+0x20>
 5ac:	39 f4       	brne	.+14     	; 0x5bc <__addsf3+0x28>
 5ae:	9f 3f       	cpi	r25, 0xFF	; 255
 5b0:	19 f4       	brne	.+6      	; 0x5b8 <__addsf3+0x24>
 5b2:	26 f4       	brtc	.+8      	; 0x5bc <__addsf3+0x28>
 5b4:	0c 94 1a 04 	jmp	0x834	; 0x834 <__fp_nan>
 5b8:	0e f4       	brtc	.+2      	; 0x5bc <__addsf3+0x28>
 5ba:	e0 95       	com	r30
 5bc:	e7 fb       	bst	r30, 7
 5be:	0c 94 14 04 	jmp	0x828	; 0x828 <__fp_inf>

000005c2 <__addsf3x>:
 5c2:	e9 2f       	mov	r30, r25
 5c4:	0e 94 3c 04 	call	0x878	; 0x878 <__fp_split3>
 5c8:	58 f3       	brcs	.-42     	; 0x5a0 <__addsf3+0xc>
 5ca:	ba 17       	cp	r27, r26
 5cc:	62 07       	cpc	r22, r18
 5ce:	73 07       	cpc	r23, r19
 5d0:	84 07       	cpc	r24, r20
 5d2:	95 07       	cpc	r25, r21
 5d4:	20 f0       	brcs	.+8      	; 0x5de <__addsf3x+0x1c>
 5d6:	79 f4       	brne	.+30     	; 0x5f6 <__addsf3x+0x34>
 5d8:	a6 f5       	brtc	.+104    	; 0x642 <__addsf3x+0x80>
 5da:	0c 94 5e 04 	jmp	0x8bc	; 0x8bc <__fp_zero>
 5de:	0e f4       	brtc	.+2      	; 0x5e2 <__addsf3x+0x20>
 5e0:	e0 95       	com	r30
 5e2:	0b 2e       	mov	r0, r27
 5e4:	ba 2f       	mov	r27, r26
 5e6:	a0 2d       	mov	r26, r0
 5e8:	0b 01       	movw	r0, r22
 5ea:	b9 01       	movw	r22, r18
 5ec:	90 01       	movw	r18, r0
 5ee:	0c 01       	movw	r0, r24
 5f0:	ca 01       	movw	r24, r20
 5f2:	a0 01       	movw	r20, r0
 5f4:	11 24       	eor	r1, r1
 5f6:	ff 27       	eor	r31, r31
 5f8:	59 1b       	sub	r21, r25
 5fa:	99 f0       	breq	.+38     	; 0x622 <__addsf3x+0x60>
 5fc:	59 3f       	cpi	r21, 0xF9	; 249
 5fe:	50 f4       	brcc	.+20     	; 0x614 <__addsf3x+0x52>
 600:	50 3e       	cpi	r21, 0xE0	; 224
 602:	68 f1       	brcs	.+90     	; 0x65e <__addsf3x+0x9c>
 604:	1a 16       	cp	r1, r26
 606:	f0 40       	sbci	r31, 0x00	; 0
 608:	a2 2f       	mov	r26, r18
 60a:	23 2f       	mov	r18, r19
 60c:	34 2f       	mov	r19, r20
 60e:	44 27       	eor	r20, r20
 610:	58 5f       	subi	r21, 0xF8	; 248
 612:	f3 cf       	rjmp	.-26     	; 0x5fa <__addsf3x+0x38>
 614:	46 95       	lsr	r20
 616:	37 95       	ror	r19
 618:	27 95       	ror	r18
 61a:	a7 95       	ror	r26
 61c:	f0 40       	sbci	r31, 0x00	; 0
 61e:	53 95       	inc	r21
 620:	c9 f7       	brne	.-14     	; 0x614 <__addsf3x+0x52>
 622:	7e f4       	brtc	.+30     	; 0x642 <__addsf3x+0x80>
 624:	1f 16       	cp	r1, r31
 626:	ba 0b       	sbc	r27, r26
 628:	62 0b       	sbc	r22, r18
 62a:	73 0b       	sbc	r23, r19
 62c:	84 0b       	sbc	r24, r20
 62e:	ba f0       	brmi	.+46     	; 0x65e <__addsf3x+0x9c>
 630:	91 50       	subi	r25, 0x01	; 1
 632:	a1 f0       	breq	.+40     	; 0x65c <__addsf3x+0x9a>
 634:	ff 0f       	add	r31, r31
 636:	bb 1f       	adc	r27, r27
 638:	66 1f       	adc	r22, r22
 63a:	77 1f       	adc	r23, r23
 63c:	88 1f       	adc	r24, r24
 63e:	c2 f7       	brpl	.-16     	; 0x630 <__addsf3x+0x6e>
 640:	0e c0       	rjmp	.+28     	; 0x65e <__addsf3x+0x9c>
 642:	ba 0f       	add	r27, r26
 644:	62 1f       	adc	r22, r18
 646:	73 1f       	adc	r23, r19
 648:	84 1f       	adc	r24, r20
 64a:	48 f4       	brcc	.+18     	; 0x65e <__addsf3x+0x9c>
 64c:	87 95       	ror	r24
 64e:	77 95       	ror	r23
 650:	67 95       	ror	r22
 652:	b7 95       	ror	r27
 654:	f7 95       	ror	r31
 656:	9e 3f       	cpi	r25, 0xFE	; 254
 658:	08 f0       	brcs	.+2      	; 0x65c <__addsf3x+0x9a>
 65a:	b0 cf       	rjmp	.-160    	; 0x5bc <__addsf3+0x28>
 65c:	93 95       	inc	r25
 65e:	88 0f       	add	r24, r24
 660:	08 f0       	brcs	.+2      	; 0x664 <__addsf3x+0xa2>
 662:	99 27       	eor	r25, r25
 664:	ee 0f       	add	r30, r30
 666:	97 95       	ror	r25
 668:	87 95       	ror	r24
 66a:	08 95       	ret

0000066c <__divsf3>:
 66c:	0e 94 4a 03 	call	0x694	; 0x694 <__divsf3x>
 670:	0c 94 2b 04 	jmp	0x856	; 0x856 <__fp_round>
 674:	0e 94 24 04 	call	0x848	; 0x848 <__fp_pscB>
 678:	58 f0       	brcs	.+22     	; 0x690 <__divsf3+0x24>
 67a:	0e 94 1d 04 	call	0x83a	; 0x83a <__fp_pscA>
 67e:	40 f0       	brcs	.+16     	; 0x690 <__divsf3+0x24>
 680:	29 f4       	brne	.+10     	; 0x68c <__divsf3+0x20>
 682:	5f 3f       	cpi	r21, 0xFF	; 255
 684:	29 f0       	breq	.+10     	; 0x690 <__divsf3+0x24>
 686:	0c 94 14 04 	jmp	0x828	; 0x828 <__fp_inf>
 68a:	51 11       	cpse	r21, r1
 68c:	0c 94 5f 04 	jmp	0x8be	; 0x8be <__fp_szero>
 690:	0c 94 1a 04 	jmp	0x834	; 0x834 <__fp_nan>

00000694 <__divsf3x>:
 694:	0e 94 3c 04 	call	0x878	; 0x878 <__fp_split3>
 698:	68 f3       	brcs	.-38     	; 0x674 <__divsf3+0x8>

0000069a <__divsf3_pse>:
 69a:	99 23       	and	r25, r25
 69c:	b1 f3       	breq	.-20     	; 0x68a <__divsf3+0x1e>
 69e:	55 23       	and	r21, r21
 6a0:	91 f3       	breq	.-28     	; 0x686 <__divsf3+0x1a>
 6a2:	95 1b       	sub	r25, r21
 6a4:	55 0b       	sbc	r21, r21
 6a6:	bb 27       	eor	r27, r27
 6a8:	aa 27       	eor	r26, r26
 6aa:	62 17       	cp	r22, r18
 6ac:	73 07       	cpc	r23, r19
 6ae:	84 07       	cpc	r24, r20
 6b0:	38 f0       	brcs	.+14     	; 0x6c0 <__divsf3_pse+0x26>
 6b2:	9f 5f       	subi	r25, 0xFF	; 255
 6b4:	5f 4f       	sbci	r21, 0xFF	; 255
 6b6:	22 0f       	add	r18, r18
 6b8:	33 1f       	adc	r19, r19
 6ba:	44 1f       	adc	r20, r20
 6bc:	aa 1f       	adc	r26, r26
 6be:	a9 f3       	breq	.-22     	; 0x6aa <__divsf3_pse+0x10>
 6c0:	35 d0       	rcall	.+106    	; 0x72c <__divsf3_pse+0x92>
 6c2:	0e 2e       	mov	r0, r30
 6c4:	3a f0       	brmi	.+14     	; 0x6d4 <__divsf3_pse+0x3a>
 6c6:	e0 e8       	ldi	r30, 0x80	; 128
 6c8:	32 d0       	rcall	.+100    	; 0x72e <__divsf3_pse+0x94>
 6ca:	91 50       	subi	r25, 0x01	; 1
 6cc:	50 40       	sbci	r21, 0x00	; 0
 6ce:	e6 95       	lsr	r30
 6d0:	00 1c       	adc	r0, r0
 6d2:	ca f7       	brpl	.-14     	; 0x6c6 <__divsf3_pse+0x2c>
 6d4:	2b d0       	rcall	.+86     	; 0x72c <__divsf3_pse+0x92>
 6d6:	fe 2f       	mov	r31, r30
 6d8:	29 d0       	rcall	.+82     	; 0x72c <__divsf3_pse+0x92>
 6da:	66 0f       	add	r22, r22
 6dc:	77 1f       	adc	r23, r23
 6de:	88 1f       	adc	r24, r24
 6e0:	bb 1f       	adc	r27, r27
 6e2:	26 17       	cp	r18, r22
 6e4:	37 07       	cpc	r19, r23
 6e6:	48 07       	cpc	r20, r24
 6e8:	ab 07       	cpc	r26, r27
 6ea:	b0 e8       	ldi	r27, 0x80	; 128
 6ec:	09 f0       	breq	.+2      	; 0x6f0 <__divsf3_pse+0x56>
 6ee:	bb 0b       	sbc	r27, r27
 6f0:	80 2d       	mov	r24, r0
 6f2:	bf 01       	movw	r22, r30
 6f4:	ff 27       	eor	r31, r31
 6f6:	93 58       	subi	r25, 0x83	; 131
 6f8:	5f 4f       	sbci	r21, 0xFF	; 255
 6fa:	3a f0       	brmi	.+14     	; 0x70a <__divsf3_pse+0x70>
 6fc:	9e 3f       	cpi	r25, 0xFE	; 254
 6fe:	51 05       	cpc	r21, r1
 700:	78 f0       	brcs	.+30     	; 0x720 <__divsf3_pse+0x86>
 702:	0c 94 14 04 	jmp	0x828	; 0x828 <__fp_inf>
 706:	0c 94 5f 04 	jmp	0x8be	; 0x8be <__fp_szero>
 70a:	5f 3f       	cpi	r21, 0xFF	; 255
 70c:	e4 f3       	brlt	.-8      	; 0x706 <__divsf3_pse+0x6c>
 70e:	98 3e       	cpi	r25, 0xE8	; 232
 710:	d4 f3       	brlt	.-12     	; 0x706 <__divsf3_pse+0x6c>
 712:	86 95       	lsr	r24
 714:	77 95       	ror	r23
 716:	67 95       	ror	r22
 718:	b7 95       	ror	r27
 71a:	f7 95       	ror	r31
 71c:	9f 5f       	subi	r25, 0xFF	; 255
 71e:	c9 f7       	brne	.-14     	; 0x712 <__divsf3_pse+0x78>
 720:	88 0f       	add	r24, r24
 722:	91 1d       	adc	r25, r1
 724:	96 95       	lsr	r25
 726:	87 95       	ror	r24
 728:	97 f9       	bld	r25, 7
 72a:	08 95       	ret
 72c:	e1 e0       	ldi	r30, 0x01	; 1
 72e:	66 0f       	add	r22, r22
 730:	77 1f       	adc	r23, r23
 732:	88 1f       	adc	r24, r24
 734:	bb 1f       	adc	r27, r27
 736:	62 17       	cp	r22, r18
 738:	73 07       	cpc	r23, r19
 73a:	84 07       	cpc	r24, r20
 73c:	ba 07       	cpc	r27, r26
 73e:	20 f0       	brcs	.+8      	; 0x748 <__divsf3_pse+0xae>
 740:	62 1b       	sub	r22, r18
 742:	73 0b       	sbc	r23, r19
 744:	84 0b       	sbc	r24, r20
 746:	ba 0b       	sbc	r27, r26
 748:	ee 1f       	adc	r30, r30
 74a:	88 f7       	brcc	.-30     	; 0x72e <__divsf3_pse+0x94>
 74c:	e0 95       	com	r30
 74e:	08 95       	ret

00000750 <__fixunssfsi>:
 750:	0e 94 44 04 	call	0x888	; 0x888 <__fp_splitA>
 754:	88 f0       	brcs	.+34     	; 0x778 <__fixunssfsi+0x28>
 756:	9f 57       	subi	r25, 0x7F	; 127
 758:	98 f0       	brcs	.+38     	; 0x780 <__fixunssfsi+0x30>
 75a:	b9 2f       	mov	r27, r25
 75c:	99 27       	eor	r25, r25
 75e:	b7 51       	subi	r27, 0x17	; 23
 760:	b0 f0       	brcs	.+44     	; 0x78e <__fixunssfsi+0x3e>
 762:	e1 f0       	breq	.+56     	; 0x79c <__fixunssfsi+0x4c>
 764:	66 0f       	add	r22, r22
 766:	77 1f       	adc	r23, r23
 768:	88 1f       	adc	r24, r24
 76a:	99 1f       	adc	r25, r25
 76c:	1a f0       	brmi	.+6      	; 0x774 <__fixunssfsi+0x24>
 76e:	ba 95       	dec	r27
 770:	c9 f7       	brne	.-14     	; 0x764 <__fixunssfsi+0x14>
 772:	14 c0       	rjmp	.+40     	; 0x79c <__fixunssfsi+0x4c>
 774:	b1 30       	cpi	r27, 0x01	; 1
 776:	91 f0       	breq	.+36     	; 0x79c <__fixunssfsi+0x4c>
 778:	0e 94 5e 04 	call	0x8bc	; 0x8bc <__fp_zero>
 77c:	b1 e0       	ldi	r27, 0x01	; 1
 77e:	08 95       	ret
 780:	0c 94 5e 04 	jmp	0x8bc	; 0x8bc <__fp_zero>
 784:	67 2f       	mov	r22, r23
 786:	78 2f       	mov	r23, r24
 788:	88 27       	eor	r24, r24
 78a:	b8 5f       	subi	r27, 0xF8	; 248
 78c:	39 f0       	breq	.+14     	; 0x79c <__fixunssfsi+0x4c>
 78e:	b9 3f       	cpi	r27, 0xF9	; 249
 790:	cc f3       	brlt	.-14     	; 0x784 <__fixunssfsi+0x34>
 792:	86 95       	lsr	r24
 794:	77 95       	ror	r23
 796:	67 95       	ror	r22
 798:	b3 95       	inc	r27
 79a:	d9 f7       	brne	.-10     	; 0x792 <__fixunssfsi+0x42>
 79c:	3e f4       	brtc	.+14     	; 0x7ac <__fixunssfsi+0x5c>
 79e:	90 95       	com	r25
 7a0:	80 95       	com	r24
 7a2:	70 95       	com	r23
 7a4:	61 95       	neg	r22
 7a6:	7f 4f       	sbci	r23, 0xFF	; 255
 7a8:	8f 4f       	sbci	r24, 0xFF	; 255
 7aa:	9f 4f       	sbci	r25, 0xFF	; 255
 7ac:	08 95       	ret

000007ae <__floatunsisf>:
 7ae:	e8 94       	clt
 7b0:	09 c0       	rjmp	.+18     	; 0x7c4 <__floatsisf+0x12>

000007b2 <__floatsisf>:
 7b2:	97 fb       	bst	r25, 7
 7b4:	3e f4       	brtc	.+14     	; 0x7c4 <__floatsisf+0x12>
 7b6:	90 95       	com	r25
 7b8:	80 95       	com	r24
 7ba:	70 95       	com	r23
 7bc:	61 95       	neg	r22
 7be:	7f 4f       	sbci	r23, 0xFF	; 255
 7c0:	8f 4f       	sbci	r24, 0xFF	; 255
 7c2:	9f 4f       	sbci	r25, 0xFF	; 255
 7c4:	99 23       	and	r25, r25
 7c6:	a9 f0       	breq	.+42     	; 0x7f2 <__floatsisf+0x40>
 7c8:	f9 2f       	mov	r31, r25
 7ca:	96 e9       	ldi	r25, 0x96	; 150
 7cc:	bb 27       	eor	r27, r27
 7ce:	93 95       	inc	r25
 7d0:	f6 95       	lsr	r31
 7d2:	87 95       	ror	r24
 7d4:	77 95       	ror	r23
 7d6:	67 95       	ror	r22
 7d8:	b7 95       	ror	r27
 7da:	f1 11       	cpse	r31, r1
 7dc:	f8 cf       	rjmp	.-16     	; 0x7ce <__floatsisf+0x1c>
 7de:	fa f4       	brpl	.+62     	; 0x81e <__floatsisf+0x6c>
 7e0:	bb 0f       	add	r27, r27
 7e2:	11 f4       	brne	.+4      	; 0x7e8 <__floatsisf+0x36>
 7e4:	60 ff       	sbrs	r22, 0
 7e6:	1b c0       	rjmp	.+54     	; 0x81e <__floatsisf+0x6c>
 7e8:	6f 5f       	subi	r22, 0xFF	; 255
 7ea:	7f 4f       	sbci	r23, 0xFF	; 255
 7ec:	8f 4f       	sbci	r24, 0xFF	; 255
 7ee:	9f 4f       	sbci	r25, 0xFF	; 255
 7f0:	16 c0       	rjmp	.+44     	; 0x81e <__floatsisf+0x6c>
 7f2:	88 23       	and	r24, r24
 7f4:	11 f0       	breq	.+4      	; 0x7fa <__floatsisf+0x48>
 7f6:	96 e9       	ldi	r25, 0x96	; 150
 7f8:	11 c0       	rjmp	.+34     	; 0x81c <__floatsisf+0x6a>
 7fa:	77 23       	and	r23, r23
 7fc:	21 f0       	breq	.+8      	; 0x806 <__floatsisf+0x54>
 7fe:	9e e8       	ldi	r25, 0x8E	; 142
 800:	87 2f       	mov	r24, r23
 802:	76 2f       	mov	r23, r22
 804:	05 c0       	rjmp	.+10     	; 0x810 <__floatsisf+0x5e>
 806:	66 23       	and	r22, r22
 808:	71 f0       	breq	.+28     	; 0x826 <__floatsisf+0x74>
 80a:	96 e8       	ldi	r25, 0x86	; 134
 80c:	86 2f       	mov	r24, r22
 80e:	70 e0       	ldi	r23, 0x00	; 0
 810:	60 e0       	ldi	r22, 0x00	; 0
 812:	2a f0       	brmi	.+10     	; 0x81e <__floatsisf+0x6c>
 814:	9a 95       	dec	r25
 816:	66 0f       	add	r22, r22
 818:	77 1f       	adc	r23, r23
 81a:	88 1f       	adc	r24, r24
 81c:	da f7       	brpl	.-10     	; 0x814 <__floatsisf+0x62>
 81e:	88 0f       	add	r24, r24
 820:	96 95       	lsr	r25
 822:	87 95       	ror	r24
 824:	97 f9       	bld	r25, 7
 826:	08 95       	ret

00000828 <__fp_inf>:
 828:	97 f9       	bld	r25, 7
 82a:	9f 67       	ori	r25, 0x7F	; 127
 82c:	80 e8       	ldi	r24, 0x80	; 128
 82e:	70 e0       	ldi	r23, 0x00	; 0
 830:	60 e0       	ldi	r22, 0x00	; 0
 832:	08 95       	ret

00000834 <__fp_nan>:
 834:	9f ef       	ldi	r25, 0xFF	; 255
 836:	80 ec       	ldi	r24, 0xC0	; 192
 838:	08 95       	ret

0000083a <__fp_pscA>:
 83a:	00 24       	eor	r0, r0
 83c:	0a 94       	dec	r0
 83e:	16 16       	cp	r1, r22
 840:	17 06       	cpc	r1, r23
 842:	18 06       	cpc	r1, r24
 844:	09 06       	cpc	r0, r25
 846:	08 95       	ret

00000848 <__fp_pscB>:
 848:	00 24       	eor	r0, r0
 84a:	0a 94       	dec	r0
 84c:	12 16       	cp	r1, r18
 84e:	13 06       	cpc	r1, r19
 850:	14 06       	cpc	r1, r20
 852:	05 06       	cpc	r0, r21
 854:	08 95       	ret

00000856 <__fp_round>:
 856:	09 2e       	mov	r0, r25
 858:	03 94       	inc	r0
 85a:	00 0c       	add	r0, r0
 85c:	11 f4       	brne	.+4      	; 0x862 <__fp_round+0xc>
 85e:	88 23       	and	r24, r24
 860:	52 f0       	brmi	.+20     	; 0x876 <__fp_round+0x20>
 862:	bb 0f       	add	r27, r27
 864:	40 f4       	brcc	.+16     	; 0x876 <__fp_round+0x20>
 866:	bf 2b       	or	r27, r31
 868:	11 f4       	brne	.+4      	; 0x86e <__fp_round+0x18>
 86a:	60 ff       	sbrs	r22, 0
 86c:	04 c0       	rjmp	.+8      	; 0x876 <__fp_round+0x20>
 86e:	6f 5f       	subi	r22, 0xFF	; 255
 870:	7f 4f       	sbci	r23, 0xFF	; 255
 872:	8f 4f       	sbci	r24, 0xFF	; 255
 874:	9f 4f       	sbci	r25, 0xFF	; 255
 876:	08 95       	ret

00000878 <__fp_split3>:
 878:	57 fd       	sbrc	r21, 7
 87a:	90 58       	subi	r25, 0x80	; 128
 87c:	44 0f       	add	r20, r20
 87e:	55 1f       	adc	r21, r21
 880:	59 f0       	breq	.+22     	; 0x898 <__fp_splitA+0x10>
 882:	5f 3f       	cpi	r21, 0xFF	; 255
 884:	71 f0       	breq	.+28     	; 0x8a2 <__fp_splitA+0x1a>
 886:	47 95       	ror	r20

00000888 <__fp_splitA>:
 888:	88 0f       	add	r24, r24
 88a:	97 fb       	bst	r25, 7
 88c:	99 1f       	adc	r25, r25
 88e:	61 f0       	breq	.+24     	; 0x8a8 <__fp_splitA+0x20>
 890:	9f 3f       	cpi	r25, 0xFF	; 255
 892:	79 f0       	breq	.+30     	; 0x8b2 <__fp_splitA+0x2a>
 894:	87 95       	ror	r24
 896:	08 95       	ret
 898:	12 16       	cp	r1, r18
 89a:	13 06       	cpc	r1, r19
 89c:	14 06       	cpc	r1, r20
 89e:	55 1f       	adc	r21, r21
 8a0:	f2 cf       	rjmp	.-28     	; 0x886 <__fp_split3+0xe>
 8a2:	46 95       	lsr	r20
 8a4:	f1 df       	rcall	.-30     	; 0x888 <__fp_splitA>
 8a6:	08 c0       	rjmp	.+16     	; 0x8b8 <__fp_splitA+0x30>
 8a8:	16 16       	cp	r1, r22
 8aa:	17 06       	cpc	r1, r23
 8ac:	18 06       	cpc	r1, r24
 8ae:	99 1f       	adc	r25, r25
 8b0:	f1 cf       	rjmp	.-30     	; 0x894 <__fp_splitA+0xc>
 8b2:	86 95       	lsr	r24
 8b4:	71 05       	cpc	r23, r1
 8b6:	61 05       	cpc	r22, r1
 8b8:	08 94       	sec
 8ba:	08 95       	ret

000008bc <__fp_zero>:
 8bc:	e8 94       	clt

000008be <__fp_szero>:
 8be:	bb 27       	eor	r27, r27
 8c0:	66 27       	eor	r22, r22
 8c2:	77 27       	eor	r23, r23
 8c4:	cb 01       	movw	r24, r22
 8c6:	97 f9       	bld	r25, 7
 8c8:	08 95       	ret

000008ca <__mulsf3>:
 8ca:	0e 94 78 04 	call	0x8f0	; 0x8f0 <__mulsf3x>
 8ce:	0c 94 2b 04 	jmp	0x856	; 0x856 <__fp_round>
 8d2:	0e 94 1d 04 	call	0x83a	; 0x83a <__fp_pscA>
 8d6:	38 f0       	brcs	.+14     	; 0x8e6 <__mulsf3+0x1c>
 8d8:	0e 94 24 04 	call	0x848	; 0x848 <__fp_pscB>
 8dc:	20 f0       	brcs	.+8      	; 0x8e6 <__mulsf3+0x1c>
 8de:	95 23       	and	r25, r21
 8e0:	11 f0       	breq	.+4      	; 0x8e6 <__mulsf3+0x1c>
 8e2:	0c 94 14 04 	jmp	0x828	; 0x828 <__fp_inf>
 8e6:	0c 94 1a 04 	jmp	0x834	; 0x834 <__fp_nan>
 8ea:	11 24       	eor	r1, r1
 8ec:	0c 94 5f 04 	jmp	0x8be	; 0x8be <__fp_szero>

000008f0 <__mulsf3x>:
 8f0:	0e 94 3c 04 	call	0x878	; 0x878 <__fp_split3>
 8f4:	70 f3       	brcs	.-36     	; 0x8d2 <__mulsf3+0x8>

000008f6 <__mulsf3_pse>:
 8f6:	95 9f       	mul	r25, r21
 8f8:	c1 f3       	breq	.-16     	; 0x8ea <__mulsf3+0x20>
 8fa:	95 0f       	add	r25, r21
 8fc:	50 e0       	ldi	r21, 0x00	; 0
 8fe:	55 1f       	adc	r21, r21
 900:	62 9f       	mul	r22, r18
 902:	f0 01       	movw	r30, r0
 904:	72 9f       	mul	r23, r18
 906:	bb 27       	eor	r27, r27
 908:	f0 0d       	add	r31, r0
 90a:	b1 1d       	adc	r27, r1
 90c:	63 9f       	mul	r22, r19
 90e:	aa 27       	eor	r26, r26
 910:	f0 0d       	add	r31, r0
 912:	b1 1d       	adc	r27, r1
 914:	aa 1f       	adc	r26, r26
 916:	64 9f       	mul	r22, r20
 918:	66 27       	eor	r22, r22
 91a:	b0 0d       	add	r27, r0
 91c:	a1 1d       	adc	r26, r1
 91e:	66 1f       	adc	r22, r22
 920:	82 9f       	mul	r24, r18
 922:	22 27       	eor	r18, r18
 924:	b0 0d       	add	r27, r0
 926:	a1 1d       	adc	r26, r1
 928:	62 1f       	adc	r22, r18
 92a:	73 9f       	mul	r23, r19
 92c:	b0 0d       	add	r27, r0
 92e:	a1 1d       	adc	r26, r1
 930:	62 1f       	adc	r22, r18
 932:	83 9f       	mul	r24, r19
 934:	a0 0d       	add	r26, r0
 936:	61 1d       	adc	r22, r1
 938:	22 1f       	adc	r18, r18
 93a:	74 9f       	mul	r23, r20
 93c:	33 27       	eor	r19, r19
 93e:	a0 0d       	add	r26, r0
 940:	61 1d       	adc	r22, r1
 942:	23 1f       	adc	r18, r19
 944:	84 9f       	mul	r24, r20
 946:	60 0d       	add	r22, r0
 948:	21 1d       	adc	r18, r1
 94a:	82 2f       	mov	r24, r18
 94c:	76 2f       	mov	r23, r22
 94e:	6a 2f       	mov	r22, r26
 950:	11 24       	eor	r1, r1
 952:	9f 57       	subi	r25, 0x7F	; 127
 954:	50 40       	sbci	r21, 0x00	; 0
 956:	9a f0       	brmi	.+38     	; 0x97e <__stack+0x7f>
 958:	f1 f0       	breq	.+60     	; 0x996 <__stack+0x97>
 95a:	88 23       	and	r24, r24
 95c:	4a f0       	brmi	.+18     	; 0x970 <__stack+0x71>
 95e:	ee 0f       	add	r30, r30
 960:	ff 1f       	adc	r31, r31
 962:	bb 1f       	adc	r27, r27
 964:	66 1f       	adc	r22, r22
 966:	77 1f       	adc	r23, r23
 968:	88 1f       	adc	r24, r24
 96a:	91 50       	subi	r25, 0x01	; 1
 96c:	50 40       	sbci	r21, 0x00	; 0
 96e:	a9 f7       	brne	.-22     	; 0x95a <__stack+0x5b>
 970:	9e 3f       	cpi	r25, 0xFE	; 254
 972:	51 05       	cpc	r21, r1
 974:	80 f0       	brcs	.+32     	; 0x996 <__stack+0x97>
 976:	0c 94 14 04 	jmp	0x828	; 0x828 <__fp_inf>
 97a:	0c 94 5f 04 	jmp	0x8be	; 0x8be <__fp_szero>
 97e:	5f 3f       	cpi	r21, 0xFF	; 255
 980:	e4 f3       	brlt	.-8      	; 0x97a <__stack+0x7b>
 982:	98 3e       	cpi	r25, 0xE8	; 232
 984:	d4 f3       	brlt	.-12     	; 0x97a <__stack+0x7b>
 986:	86 95       	lsr	r24
 988:	77 95       	ror	r23
 98a:	67 95       	ror	r22
 98c:	b7 95       	ror	r27
 98e:	f7 95       	ror	r31
 990:	e7 95       	ror	r30
 992:	9f 5f       	subi	r25, 0xFF	; 255
 994:	c1 f7       	brne	.-16     	; 0x986 <__stack+0x87>
 996:	fe 2b       	or	r31, r30
 998:	88 0f       	add	r24, r24
 99a:	91 1d       	adc	r25, r1
 99c:	96 95       	lsr	r25
 99e:	87 95       	ror	r24
 9a0:	97 f9       	bld	r25, 7
 9a2:	08 95       	ret

000009a4 <_exit>:
 9a4:	f8 94       	cli

000009a6 <__stop_program>:
 9a6:	ff cf       	rjmp	.-2      	; 0x9a6 <__stop_program>
