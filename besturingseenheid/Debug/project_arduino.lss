
project_arduino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000083a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007c6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000002e  00800100  00800100  0000083a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000083a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000086c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a8  00000000  00000000  000008ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000018f3  00000000  00000000  00000a54  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d3d  00000000  00000000  00002347  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d4c  00000000  00000000  00003084  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003ac  00000000  00000000  00003dd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006ad  00000000  00000000  0000417c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bdb  00000000  00000000  00004829  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  00005404  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 30 01 	jmp	0x260	; 0x260 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ec       	ldi	r30, 0xC6	; 198
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 32       	cpi	r26, 0x2E	; 46
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 92 00 	call	0x124	; 0x124 <main>
  9e:	0c 94 e1 03 	jmp	0x7c2	; 0x7c2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SCH_Start>:

-*------------------------------------------------------------------*/

void SCH_Start(void)
{
      sei();
  a6:	78 94       	sei
  a8:	08 95       	ret

000000aa <__vector_11>:
  determined by the timer settings in SCH_Init_T1().

-*------------------------------------------------------------------*/

ISR(TIMER1_COMPA_vect)
{
  aa:	1f 92       	push	r1
  ac:	0f 92       	push	r0
  ae:	0f b6       	in	r0, 0x3f	; 63
  b0:	0f 92       	push	r0
  b2:	11 24       	eor	r1, r1
  b4:	2f 93       	push	r18
  b6:	3f 93       	push	r19
  b8:	8f 93       	push	r24
  ba:	9f 93       	push	r25
  bc:	af 93       	push	r26
  be:	bf 93       	push	r27
  c0:	ef 93       	push	r30
  c2:	ff 93       	push	r31
  c4:	ea e0       	ldi	r30, 0x0A	; 10
  c6:	f1 e0       	ldi	r31, 0x01	; 1
  c8:	2d e2       	ldi	r18, 0x2D	; 45
  ca:	31 e0       	ldi	r19, 0x01	; 1
   unsigned char Index;
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
   {
      // Check if there is a task at this location
      if(SCH_tasks_G[Index].pTask)
  cc:	80 81       	ld	r24, Z
  ce:	91 81       	ldd	r25, Z+1	; 0x01
  d0:	89 2b       	or	r24, r25
  d2:	91 f0       	breq	.+36     	; 0xf8 <__vector_11+0x4e>
      {
         if(SCH_tasks_G[Index].Delay == 0)
  d4:	82 81       	ldd	r24, Z+2	; 0x02
  d6:	93 81       	ldd	r25, Z+3	; 0x03
  d8:	00 97       	sbiw	r24, 0x00	; 0
  da:	59 f4       	brne	.+22     	; 0xf2 <__vector_11+0x48>
         {
            // The task is due to run, Inc. the 'RunMe' flag
            SCH_tasks_G[Index].RunMe += 1;
  dc:	86 81       	ldd	r24, Z+6	; 0x06
  de:	8f 5f       	subi	r24, 0xFF	; 255
  e0:	86 83       	std	Z+6, r24	; 0x06

            if(SCH_tasks_G[Index].Period)
  e2:	84 81       	ldd	r24, Z+4	; 0x04
  e4:	95 81       	ldd	r25, Z+5	; 0x05
  e6:	00 97       	sbiw	r24, 0x00	; 0
  e8:	39 f0       	breq	.+14     	; 0xf8 <__vector_11+0x4e>
            {
               // Schedule periodic tasks to run again
               SCH_tasks_G[Index].Delay = SCH_tasks_G[Index].Period;
               SCH_tasks_G[Index].Delay -= 1;
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	93 83       	std	Z+3, r25	; 0x03
  ee:	82 83       	std	Z+2, r24	; 0x02
  f0:	03 c0       	rjmp	.+6      	; 0xf8 <__vector_11+0x4e>
            }
         }
         else
         {
            // Not yet ready to run: just decrement the delay
            SCH_tasks_G[Index].Delay -= 1;
  f2:	01 97       	sbiw	r24, 0x01	; 1
  f4:	93 83       	std	Z+3, r25	; 0x03
  f6:	82 83       	std	Z+2, r24	; 0x02
  f8:	37 96       	adiw	r30, 0x07	; 7
-*------------------------------------------------------------------*/

ISR(TIMER1_COMPA_vect)
{
   unsigned char Index;
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
  fa:	e2 17       	cp	r30, r18
  fc:	f3 07       	cpc	r31, r19
  fe:	31 f7       	brne	.-52     	; 0xcc <__vector_11+0x22>
            // Not yet ready to run: just decrement the delay
            SCH_tasks_G[Index].Delay -= 1;
         }
      }
   }
}
 100:	ff 91       	pop	r31
 102:	ef 91       	pop	r30
 104:	bf 91       	pop	r27
 106:	af 91       	pop	r26
 108:	9f 91       	pop	r25
 10a:	8f 91       	pop	r24
 10c:	3f 91       	pop	r19
 10e:	2f 91       	pop	r18
 110:	0f 90       	pop	r0
 112:	0f be       	out	0x3f, r0	; 63
 114:	0f 90       	pop	r0
 116:	1f 90       	pop	r1
 118:	18 95       	reti

0000011a <Distance>:
void Distance(){
	transmitSerial(getDistance());
}

void turnOnLights2(){
	turnOnLights();
 11a:	0e 94 16 01 	call	0x22c	; 0x22c <getDistance>
 11e:	0e 94 af 02 	call	0x55e	; 0x55e <transmitSerial>
 122:	08 95       	ret

00000124 <main>:


int main(void)
{
	
	analog_config();
 124:	0e 94 83 02 	call	0x506	; 0x506 <analog_config>
	
	setUpInterrupt(); // voor de afstand
 128:	0e 94 bc 00 	call	0x178	; 0x178 <setUpInterrupt>

	setUpUltra(); // voor de afstand
 12c:	0e 94 af 00 	call	0x15e	; 0x15e <setUpUltra>
	
	setUpTimer0(); // voor de afstand
 130:	0e 94 c4 00 	call	0x188	; 0x188 <setUpTimer0>
	
	setUpLights();
 134:	0e 94 8e 02 	call	0x51c	; 0x51c <setUpLights>

	initSerial();
 138:	0e 94 a1 02 	call	0x542	; 0x542 <initSerial>
	
	//SCH_Add_Task(turnOnLights2, 0, 100);
	


	SCH_Start();// start de scheduler
 13c:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Start>
   
    while (1) 
    {
		//SCH_Dispatch_Tasks(); // verzend de taken
		Distance();
 140:	0e 94 8d 00 	call	0x11a	; 0x11a <Distance>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 144:	2f ef       	ldi	r18, 0xFF	; 255
 146:	8d ee       	ldi	r24, 0xED	; 237
 148:	92 e0       	ldi	r25, 0x02	; 2
 14a:	21 50       	subi	r18, 0x01	; 1
 14c:	80 40       	sbci	r24, 0x00	; 0
 14e:	90 40       	sbci	r25, 0x00	; 0
 150:	e1 f7       	brne	.-8      	; 0x14a <main+0x26>
 152:	00 c0       	rjmp	.+0      	; 0x154 <main+0x30>
 154:	00 00       	nop
		_delay_ms(60);
		transmitSerial(1);
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	0e 94 af 02 	call	0x55e	; 0x55e <transmitSerial>
 15c:	f1 cf       	rjmp	.-30     	; 0x140 <main+0x1c>

0000015e <setUpUltra>:

/* Ultrasenoorsensor
*********************************************************************************************************************/

void setUpUltra(){
	digital_config(trigPin, OUT); // trigger pin wordt output
 15e:	61 e0       	ldi	r22, 0x01	; 1
 160:	70 e0       	ldi	r23, 0x00	; 0
 162:	82 e0       	ldi	r24, 0x02	; 2
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	0e 94 ba 01 	call	0x374	; 0x374 <digital_config>
	digital_config(echoPin, IN); // echo pin is input
 16a:	60 e0       	ldi	r22, 0x00	; 0
 16c:	70 e0       	ldi	r23, 0x00	; 0
 16e:	84 e0       	ldi	r24, 0x04	; 4
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	0e 94 ba 01 	call	0x374	; 0x374 <digital_config>
 176:	08 95       	ret

00000178 <setUpInterrupt>:
}

void setUpInterrupt(){
	PORTD |= (1<<echoPin);		// Enable PD2 pull-up resistor. // digital_write(echoPin, 1)
 178:	5c 9a       	sbi	0x0b, 4	; 11
	
	EIMSK  |= (1<<INT1);			// Enable INT1 interrupts.
 17a:	e9 9a       	sbi	0x1d, 1	; 29
	
	EICRA |= (1<<ISC11);		// The rising edge of INT1 generates an interrupt request.
 17c:	e9 e6       	ldi	r30, 0x69	; 105
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	80 81       	ld	r24, Z
 182:	88 60       	ori	r24, 0x08	; 8
 184:	80 83       	st	Z, r24
 186:	08 95       	ret

00000188 <setUpTimer0>:
	// dit betekent: als er iets binnenkomt op de echopin wordt er een interrupt gegeven.
}

void setUpTimer0(){
	
    TCCR1A = 0;
 188:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
	TCCR0B |= (1<<CS00);						   // NO prescaller , every tick is 1us  - START
 18c:	85 b5       	in	r24, 0x25	; 37
 18e:	81 60       	ori	r24, 0x01	; 1
 190:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0;								   // Clear counter
 192:	16 bc       	out	0x26, r1	; 38
	TIMSK0 |= (1<<TOIE0);					   // Enable Timer0-Overflow interrupts
 194:	ee e6       	ldi	r30, 0x6E	; 110
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	80 81       	ld	r24, Z
 19a:	81 60       	ori	r24, 0x01	; 1
 19c:	80 83       	st	Z, r24
	sei();										// Global interrupts Enabled.
 19e:	78 94       	sei
 1a0:	08 95       	ret

000001a2 <startPulse>:
}

void startPulse(){
	digital_write(trigPin, LOW); // zorg ervoor dat trigger leeg is!
 1a2:	60 e0       	ldi	r22, 0x00	; 0
 1a4:	70 e0       	ldi	r23, 0x00	; 0
 1a6:	82 e0       	ldi	r24, 0x02	; 2
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	0e 94 07 02 	call	0x40e	; 0x40e <digital_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <startPulse+0xe>
	_delay_us(2);
	
	digital_write(trigPin, HIGH);
 1b0:	61 e0       	ldi	r22, 0x01	; 1
 1b2:	70 e0       	ldi	r23, 0x00	; 0
 1b4:	82 e0       	ldi	r24, 0x02	; 2
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	0e 94 07 02 	call	0x40e	; 0x40e <digital_write>
 1bc:	83 e0       	ldi	r24, 0x03	; 3
 1be:	8a 95       	dec	r24
 1c0:	f1 f7       	brne	.-4      	; 0x1be <startPulse+0x1c>
 1c2:	00 00       	nop
	
	_delay_us(10);
	digital_write(trigPin, LOW);
 1c4:	60 e0       	ldi	r22, 0x00	; 0
 1c6:	70 e0       	ldi	r23, 0x00	; 0
 1c8:	82 e0       	ldi	r24, 0x02	; 2
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	0e 94 07 02 	call	0x40e	; 0x40e <digital_write>
 1d0:	08 95       	ret

000001d2 <calcDistance>:
}


uint8_t calcDistance(){
	uint8_t dis;
	echo_duration = Timer0_counter; // keer 256 omdat hij pas 1 optelt na 256 ticks
 1d2:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <Timer0_counter>
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	a0 e0       	ldi	r26, 0x00	; 0
 1da:	b0 e0       	ldi	r27, 0x00	; 0
 1dc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
 1e0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_end+0x1>
 1e4:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_end+0x2>
 1e8:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_end+0x3>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ec:	89 ef       	ldi	r24, 0xF9	; 249
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	01 97       	sbiw	r24, 0x01	; 1
 1f2:	f1 f7       	brne	.-4      	; 0x1f0 <calcDistance+0x1e>
 1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <calcDistance+0x24>
 1f6:	00 00       	nop
	_delay_ms(1);
	dis = (echo_duration * 0.034 / 2); // het moet wel passen, vandaar bitshift
 1f8:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_end>
 1fc:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_end+0x1>
 200:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end+0x2>
 204:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x3>
	return dis;
 208:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <__floatsisf>
 20c:	26 e9       	ldi	r18, 0x96	; 150
 20e:	33 e4       	ldi	r19, 0x43	; 67
 210:	4b e0       	ldi	r20, 0x0B	; 11
 212:	5d e3       	ldi	r21, 0x3D	; 61
 214:	0e 94 74 03 	call	0x6e8	; 0x6e8 <__mulsf3>
 218:	20 e0       	ldi	r18, 0x00	; 0
 21a:	30 e0       	ldi	r19, 0x00	; 0
 21c:	40 e0       	ldi	r20, 0x00	; 0
 21e:	5f e3       	ldi	r21, 0x3F	; 63
 220:	0e 94 74 03 	call	0x6e8	; 0x6e8 <__mulsf3>
 224:	0e 94 b7 02 	call	0x56e	; 0x56e <__fixunssfsi>
 228:	86 2f       	mov	r24, r22
	
}
 22a:	08 95       	ret

0000022c <getDistance>:

/* dit is een soort van de main functie. Hierdoor krijg je de juiste afstand terug. Dit in scheduler gooien */
	
uint8_t getDistance(){
	
		if (is_measuring == 0)
 22c:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <is_measuring>
 230:	81 11       	cpse	r24, r1
 232:	13 c0       	rjmp	.+38     	; 0x25a <getDistance+0x2e>
		{
			is_measuring = 1;
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <is_measuring>
			startPulse();
 23a:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <startPulse>
 23e:	83 ec       	ldi	r24, 0xC3	; 195
 240:	99 e0       	ldi	r25, 0x09	; 9
 242:	01 97       	sbiw	r24, 0x01	; 1
 244:	f1 f7       	brne	.-4      	; 0x242 <getDistance+0x16>
 246:	00 c0       	rjmp	.+0      	; 0x248 <getDistance+0x1c>
 248:	00 00       	nop
			_delay_ms(10);
			distance = calcDistance();
 24a:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <calcDistance>
 24e:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <distance>
			transmitSerial(5);
 252:	85 e0       	ldi	r24, 0x05	; 5
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	0e 94 af 02 	call	0x55e	; 0x55e <transmitSerial>
	
		}

		return distance;	
 25a:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <distance>
}
 25e:	08 95       	ret

00000260 <__vector_16>:
	
	

ISR(TIMER0_OVF_vect)  // Here every time Timer0 Overflow
{
 260:	1f 92       	push	r1
 262:	0f 92       	push	r0
 264:	0f b6       	in	r0, 0x3f	; 63
 266:	0f 92       	push	r0
 268:	11 24       	eor	r1, r1
 26a:	2f 93       	push	r18
 26c:	3f 93       	push	r19
 26e:	4f 93       	push	r20
 270:	5f 93       	push	r21
 272:	6f 93       	push	r22
 274:	7f 93       	push	r23
 276:	8f 93       	push	r24
 278:	9f 93       	push	r25
 27a:	af 93       	push	r26
 27c:	bf 93       	push	r27
 27e:	ef 93       	push	r30
 280:	ff 93       	push	r31
	if (digital_read(echoPin) == LOW)
 282:	84 e0       	ldi	r24, 0x04	; 4
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	0e 94 54 02 	call	0x4a8	; 0x4a8 <digital_read>
 28a:	89 2b       	or	r24, r25
 28c:	61 f4       	brne	.+24     	; 0x2a6 <__vector_16+0x46>
	{
		echo_start = 0;
 28e:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <echo_start>
 292:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <echo_start+0x1>
 296:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <echo_start+0x2>
 29a:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <echo_start+0x3>
		transmitSerial(4);
 29e:	84 e0       	ldi	r24, 0x04	; 4
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	0e 94 af 02 	call	0x55e	; 0x55e <transmitSerial>
	}
	
	if (echo_start)
 2a6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <echo_start>
 2aa:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <echo_start+0x1>
 2ae:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <echo_start+0x2>
 2b2:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <echo_start+0x3>
 2b6:	89 2b       	or	r24, r25
 2b8:	8a 2b       	or	r24, r26
 2ba:	8b 2b       	or	r24, r27
 2bc:	49 f0       	breq	.+18     	; 0x2d0 <__vector_16+0x70>
	{
		Timer0_counter += 1; // hij telt tot 255 dan geeft hij een overflow. Bij overflow tellen we er 1 bij op
 2be:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <Timer0_counter>
 2c2:	8f 5f       	subi	r24, 0xFF	; 255
 2c4:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <Timer0_counter>
		transmitSerial(3);
 2c8:	83 e0       	ldi	r24, 0x03	; 3
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	0e 94 af 02 	call	0x55e	; 0x55e <transmitSerial>
	}
	
	
} 
 2d0:	ff 91       	pop	r31
 2d2:	ef 91       	pop	r30
 2d4:	bf 91       	pop	r27
 2d6:	af 91       	pop	r26
 2d8:	9f 91       	pop	r25
 2da:	8f 91       	pop	r24
 2dc:	7f 91       	pop	r23
 2de:	6f 91       	pop	r22
 2e0:	5f 91       	pop	r21
 2e2:	4f 91       	pop	r20
 2e4:	3f 91       	pop	r19
 2e6:	2f 91       	pop	r18
 2e8:	0f 90       	pop	r0
 2ea:	0f be       	out	0x3f, r0	; 63
 2ec:	0f 90       	pop	r0
 2ee:	1f 90       	pop	r1
 2f0:	18 95       	reti

000002f2 <__vector_2>:


ISR(INT1_vect)
{
 2f2:	1f 92       	push	r1
 2f4:	0f 92       	push	r0
 2f6:	0f b6       	in	r0, 0x3f	; 63
 2f8:	0f 92       	push	r0
 2fa:	11 24       	eor	r1, r1
 2fc:	2f 93       	push	r18
 2fe:	3f 93       	push	r19
 300:	4f 93       	push	r20
 302:	5f 93       	push	r21
 304:	6f 93       	push	r22
 306:	7f 93       	push	r23
 308:	8f 93       	push	r24
 30a:	9f 93       	push	r25
 30c:	af 93       	push	r26
 30e:	bf 93       	push	r27
 310:	ef 93       	push	r30
 312:	ff 93       	push	r31
	
	if (echo_start == 0)
 314:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <echo_start>
 318:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <echo_start+0x1>
 31c:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <echo_start+0x2>
 320:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <echo_start+0x3>
 324:	89 2b       	or	r24, r25
 326:	8a 2b       	or	r24, r26
 328:	8b 2b       	or	r24, r27
 32a:	99 f4       	brne	.+38     	; 0x352 <__vector_2+0x60>
	{
		TCNT0 = 0; // clear counter
 32c:	16 bc       	out	0x26, r1	; 38
		Timer0_counter = 0; // clear de timer counter
 32e:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <Timer0_counter>
		echo_start = 1;
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	a0 e0       	ldi	r26, 0x00	; 0
 338:	b0 e0       	ldi	r27, 0x00	; 0
 33a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <echo_start>
 33e:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <echo_start+0x1>
 342:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <echo_start+0x2>
 346:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <echo_start+0x3>
		transmitSerial(2);
 34a:	82 e0       	ldi	r24, 0x02	; 2
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	0e 94 af 02 	call	0x55e	; 0x55e <transmitSerial>
	}
}
 352:	ff 91       	pop	r31
 354:	ef 91       	pop	r30
 356:	bf 91       	pop	r27
 358:	af 91       	pop	r26
 35a:	9f 91       	pop	r25
 35c:	8f 91       	pop	r24
 35e:	7f 91       	pop	r23
 360:	6f 91       	pop	r22
 362:	5f 91       	pop	r21
 364:	4f 91       	pop	r20
 366:	3f 91       	pop	r19
 368:	2f 91       	pop	r18
 36a:	0f 90       	pop	r0
 36c:	0f be       	out	0x3f, r0	; 63
 36e:	0f 90       	pop	r0
 370:	1f 90       	pop	r1
 372:	18 95       	reti

00000374 <digital_config>:

/*
 * Sets a digital pin to get input or output
 */
void digital_config(int pin, int value) {
	if(pin < 8) {
 374:	88 30       	cpi	r24, 0x08	; 8
 376:	91 05       	cpc	r25, r1
 378:	ec f4       	brge	.+58     	; 0x3b4 <digital_config+0x40>
		if(value == 0) {
 37a:	67 2b       	or	r22, r23
 37c:	71 f4       	brne	.+28     	; 0x39a <digital_config+0x26>
			DDRD = DDRD & ~(1 << pin);
 37e:	4a b1       	in	r20, 0x0a	; 10
 380:	21 e0       	ldi	r18, 0x01	; 1
 382:	30 e0       	ldi	r19, 0x00	; 0
 384:	b9 01       	movw	r22, r18
 386:	02 c0       	rjmp	.+4      	; 0x38c <digital_config+0x18>
 388:	66 0f       	add	r22, r22
 38a:	77 1f       	adc	r23, r23
 38c:	8a 95       	dec	r24
 38e:	e2 f7       	brpl	.-8      	; 0x388 <digital_config+0x14>
 390:	cb 01       	movw	r24, r22
 392:	80 95       	com	r24
 394:	84 23       	and	r24, r20
 396:	8a b9       	out	0x0a, r24	; 10
 398:	08 95       	ret
		} else {
			DDRD = DDRD | (1 << pin);
 39a:	4a b1       	in	r20, 0x0a	; 10
 39c:	21 e0       	ldi	r18, 0x01	; 1
 39e:	30 e0       	ldi	r19, 0x00	; 0
 3a0:	b9 01       	movw	r22, r18
 3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <digital_config+0x34>
 3a4:	66 0f       	add	r22, r22
 3a6:	77 1f       	adc	r23, r23
 3a8:	8a 95       	dec	r24
 3aa:	e2 f7       	brpl	.-8      	; 0x3a4 <digital_config+0x30>
 3ac:	cb 01       	movw	r24, r22
 3ae:	84 2b       	or	r24, r20
 3b0:	8a b9       	out	0x0a, r24	; 10
 3b2:	08 95       	ret
		}
		
	} else {
		if(value == 0) {
 3b4:	67 2b       	or	r22, r23
 3b6:	b1 f4       	brne	.+44     	; 0x3e4 <digital_config+0x70>
			DDRB = DDRB & ~(1 << (pin%8));
 3b8:	44 b1       	in	r20, 0x04	; 4
 3ba:	87 70       	andi	r24, 0x07	; 7
 3bc:	90 78       	andi	r25, 0x80	; 128
 3be:	99 23       	and	r25, r25
 3c0:	24 f4       	brge	.+8      	; 0x3ca <digital_config+0x56>
 3c2:	01 97       	sbiw	r24, 0x01	; 1
 3c4:	88 6f       	ori	r24, 0xF8	; 248
 3c6:	9f 6f       	ori	r25, 0xFF	; 255
 3c8:	01 96       	adiw	r24, 0x01	; 1
 3ca:	21 e0       	ldi	r18, 0x01	; 1
 3cc:	30 e0       	ldi	r19, 0x00	; 0
 3ce:	b9 01       	movw	r22, r18
 3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <digital_config+0x62>
 3d2:	66 0f       	add	r22, r22
 3d4:	77 1f       	adc	r23, r23
 3d6:	8a 95       	dec	r24
 3d8:	e2 f7       	brpl	.-8      	; 0x3d2 <digital_config+0x5e>
 3da:	cb 01       	movw	r24, r22
 3dc:	80 95       	com	r24
 3de:	84 23       	and	r24, r20
 3e0:	84 b9       	out	0x04, r24	; 4
 3e2:	08 95       	ret
		} else {
			DDRB = DDRB | (1 << (pin%8));
 3e4:	44 b1       	in	r20, 0x04	; 4
 3e6:	87 70       	andi	r24, 0x07	; 7
 3e8:	90 78       	andi	r25, 0x80	; 128
 3ea:	99 23       	and	r25, r25
 3ec:	24 f4       	brge	.+8      	; 0x3f6 <digital_config+0x82>
 3ee:	01 97       	sbiw	r24, 0x01	; 1
 3f0:	88 6f       	ori	r24, 0xF8	; 248
 3f2:	9f 6f       	ori	r25, 0xFF	; 255
 3f4:	01 96       	adiw	r24, 0x01	; 1
 3f6:	21 e0       	ldi	r18, 0x01	; 1
 3f8:	30 e0       	ldi	r19, 0x00	; 0
 3fa:	b9 01       	movw	r22, r18
 3fc:	02 c0       	rjmp	.+4      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3fe:	66 0f       	add	r22, r22
 400:	77 1f       	adc	r23, r23
 402:	8a 95       	dec	r24
 404:	e2 f7       	brpl	.-8      	; 0x3fe <digital_config+0x8a>
 406:	cb 01       	movw	r24, r22
 408:	84 2b       	or	r24, r20
 40a:	84 b9       	out	0x04, r24	; 4
 40c:	08 95       	ret

0000040e <digital_write>:

/*
 * Sets a digital pin to 0 or 1
 */
void digital_write(int pin, int value) {
	if(pin < 8) {
 40e:	88 30       	cpi	r24, 0x08	; 8
 410:	91 05       	cpc	r25, r1
 412:	ec f4       	brge	.+58     	; 0x44e <digital_write+0x40>
		if(value == 0) {
 414:	67 2b       	or	r22, r23
 416:	71 f4       	brne	.+28     	; 0x434 <digital_write+0x26>
			PORTD = PORTD & ~(1 << pin);
 418:	4b b1       	in	r20, 0x0b	; 11
 41a:	21 e0       	ldi	r18, 0x01	; 1
 41c:	30 e0       	ldi	r19, 0x00	; 0
 41e:	b9 01       	movw	r22, r18
 420:	02 c0       	rjmp	.+4      	; 0x426 <digital_write+0x18>
 422:	66 0f       	add	r22, r22
 424:	77 1f       	adc	r23, r23
 426:	8a 95       	dec	r24
 428:	e2 f7       	brpl	.-8      	; 0x422 <digital_write+0x14>
 42a:	cb 01       	movw	r24, r22
 42c:	80 95       	com	r24
 42e:	84 23       	and	r24, r20
 430:	8b b9       	out	0x0b, r24	; 11
 432:	08 95       	ret
		} else {
			PORTD = PORTD | (1 << pin);
 434:	4b b1       	in	r20, 0x0b	; 11
 436:	21 e0       	ldi	r18, 0x01	; 1
 438:	30 e0       	ldi	r19, 0x00	; 0
 43a:	b9 01       	movw	r22, r18
 43c:	02 c0       	rjmp	.+4      	; 0x442 <digital_write+0x34>
 43e:	66 0f       	add	r22, r22
 440:	77 1f       	adc	r23, r23
 442:	8a 95       	dec	r24
 444:	e2 f7       	brpl	.-8      	; 0x43e <digital_write+0x30>
 446:	cb 01       	movw	r24, r22
 448:	84 2b       	or	r24, r20
 44a:	8b b9       	out	0x0b, r24	; 11
 44c:	08 95       	ret
		}
		
	} else {
		if(value == 0) {
 44e:	67 2b       	or	r22, r23
 450:	b1 f4       	brne	.+44     	; 0x47e <digital_write+0x70>
			PORTB = PORTB & ~(1 << (pin%8));
 452:	45 b1       	in	r20, 0x05	; 5
 454:	87 70       	andi	r24, 0x07	; 7
 456:	90 78       	andi	r25, 0x80	; 128
 458:	99 23       	and	r25, r25
 45a:	24 f4       	brge	.+8      	; 0x464 <digital_write+0x56>
 45c:	01 97       	sbiw	r24, 0x01	; 1
 45e:	88 6f       	ori	r24, 0xF8	; 248
 460:	9f 6f       	ori	r25, 0xFF	; 255
 462:	01 96       	adiw	r24, 0x01	; 1
 464:	21 e0       	ldi	r18, 0x01	; 1
 466:	30 e0       	ldi	r19, 0x00	; 0
 468:	b9 01       	movw	r22, r18
 46a:	02 c0       	rjmp	.+4      	; 0x470 <digital_write+0x62>
 46c:	66 0f       	add	r22, r22
 46e:	77 1f       	adc	r23, r23
 470:	8a 95       	dec	r24
 472:	e2 f7       	brpl	.-8      	; 0x46c <digital_write+0x5e>
 474:	cb 01       	movw	r24, r22
 476:	80 95       	com	r24
 478:	84 23       	and	r24, r20
 47a:	85 b9       	out	0x05, r24	; 5
 47c:	08 95       	ret
		} else {
			PORTB = PORTB | (1 << (pin%8));
 47e:	45 b1       	in	r20, 0x05	; 5
 480:	87 70       	andi	r24, 0x07	; 7
 482:	90 78       	andi	r25, 0x80	; 128
 484:	99 23       	and	r25, r25
 486:	24 f4       	brge	.+8      	; 0x490 <digital_write+0x82>
 488:	01 97       	sbiw	r24, 0x01	; 1
 48a:	88 6f       	ori	r24, 0xF8	; 248
 48c:	9f 6f       	ori	r25, 0xFF	; 255
 48e:	01 96       	adiw	r24, 0x01	; 1
 490:	21 e0       	ldi	r18, 0x01	; 1
 492:	30 e0       	ldi	r19, 0x00	; 0
 494:	b9 01       	movw	r22, r18
 496:	02 c0       	rjmp	.+4      	; 0x49c <digital_write+0x8e>
 498:	66 0f       	add	r22, r22
 49a:	77 1f       	adc	r23, r23
 49c:	8a 95       	dec	r24
 49e:	e2 f7       	brpl	.-8      	; 0x498 <digital_write+0x8a>
 4a0:	cb 01       	movw	r24, r22
 4a2:	84 2b       	or	r24, r20
 4a4:	85 b9       	out	0x05, r24	; 5
 4a6:	08 95       	ret

000004a8 <digital_read>:

/*
 * Gets a value from a digital pin 1 or 0
 */
int digital_read(int pin) {
	if (pin < 8)
 4a8:	88 30       	cpi	r24, 0x08	; 8
 4aa:	91 05       	cpc	r25, r1
 4ac:	b4 f4       	brge	.+44     	; 0x4da <digital_read+0x32>
	{
		return (PIND & (1 << (pin%8)));
 4ae:	29 b1       	in	r18, 0x09	; 9
 4b0:	87 70       	andi	r24, 0x07	; 7
 4b2:	90 78       	andi	r25, 0x80	; 128
 4b4:	99 23       	and	r25, r25
 4b6:	24 f4       	brge	.+8      	; 0x4c0 <digital_read+0x18>
 4b8:	01 97       	sbiw	r24, 0x01	; 1
 4ba:	88 6f       	ori	r24, 0xF8	; 248
 4bc:	9f 6f       	ori	r25, 0xFF	; 255
 4be:	01 96       	adiw	r24, 0x01	; 1
 4c0:	41 e0       	ldi	r20, 0x01	; 1
 4c2:	50 e0       	ldi	r21, 0x00	; 0
 4c4:	ba 01       	movw	r22, r20
 4c6:	02 c0       	rjmp	.+4      	; 0x4cc <digital_read+0x24>
 4c8:	66 0f       	add	r22, r22
 4ca:	77 1f       	adc	r23, r23
 4cc:	8a 95       	dec	r24
 4ce:	e2 f7       	brpl	.-8      	; 0x4c8 <digital_read+0x20>
 4d0:	cb 01       	movw	r24, r22
 4d2:	30 e0       	ldi	r19, 0x00	; 0
 4d4:	82 23       	and	r24, r18
 4d6:	93 23       	and	r25, r19
 4d8:	08 95       	ret
	} else {
		return (PINB & (1 << (pin%8)));
 4da:	23 b1       	in	r18, 0x03	; 3
 4dc:	87 70       	andi	r24, 0x07	; 7
 4de:	90 78       	andi	r25, 0x80	; 128
 4e0:	99 23       	and	r25, r25
 4e2:	24 f4       	brge	.+8      	; 0x4ec <digital_read+0x44>
 4e4:	01 97       	sbiw	r24, 0x01	; 1
 4e6:	88 6f       	ori	r24, 0xF8	; 248
 4e8:	9f 6f       	ori	r25, 0xFF	; 255
 4ea:	01 96       	adiw	r24, 0x01	; 1
 4ec:	41 e0       	ldi	r20, 0x01	; 1
 4ee:	50 e0       	ldi	r21, 0x00	; 0
 4f0:	ba 01       	movw	r22, r20
 4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <digital_read+0x50>
 4f4:	66 0f       	add	r22, r22
 4f6:	77 1f       	adc	r23, r23
 4f8:	8a 95       	dec	r24
 4fa:	e2 f7       	brpl	.-8      	; 0x4f4 <digital_read+0x4c>
 4fc:	cb 01       	movw	r24, r22
 4fe:	30 e0       	ldi	r19, 0x00	; 0
 500:	82 23       	and	r24, r18
 502:	93 23       	and	r25, r19
	}
}
 504:	08 95       	ret

00000506 <analog_config>:
void analog_config() {

	// AREF = AVcc
	// De ADC heeft een 'reference' voltage nodig. Wij willen de Vcc gebruiken (5v)
	// ADMUX staat voor ADC multiplexer
	ADMUX |= (1<<REFS0); // we zetten bit REFS0 op 1 (zie datasheet)
 506:	ec e7       	ldi	r30, 0x7C	; 124
 508:	f0 e0       	ldi	r31, 0x00	; 0
 50a:	80 81       	ld	r24, Z
 50c:	80 64       	ori	r24, 0x40	; 64
 50e:	80 83       	st	Z, r24
	//ADMUX |= (1 << ADLAR);
	
	// ADC Enable en een prescaler van 128
	// 16000000/128 = 125000
	// ADC control en status register A
	ADCSRA |= (1<<ADEN)|(1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2); // enable ADC, zet ADC prescaler select bits
 510:	ea e7       	ldi	r30, 0x7A	; 122
 512:	f0 e0       	ldi	r31, 0x00	; 0
 514:	80 81       	ld	r24, Z
 516:	87 68       	ori	r24, 0x87	; 135
 518:	80 83       	st	Z, r24
 51a:	08 95       	ret

0000051c <setUpLights>:
/* Uit en inrol lampjes
*******************************************************************************************************************/


void setUpLights(){
	digital_config(redLight, OUT);
 51c:	61 e0       	ldi	r22, 0x01	; 1
 51e:	70 e0       	ldi	r23, 0x00	; 0
 520:	8b e0       	ldi	r24, 0x0B	; 11
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	0e 94 ba 01 	call	0x374	; 0x374 <digital_config>
	digital_config(greenLight, OUT);
 528:	61 e0       	ldi	r22, 0x01	; 1
 52a:	70 e0       	ldi	r23, 0x00	; 0
 52c:	8c e0       	ldi	r24, 0x0C	; 12
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	0e 94 ba 01 	call	0x374	; 0x374 <digital_config>
	digital_config(yellowLight, OUT);
 534:	61 e0       	ldi	r22, 0x01	; 1
 536:	70 e0       	ldi	r23, 0x00	; 0
 538:	8d e0       	ldi	r24, 0x0D	; 13
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	0e 94 ba 01 	call	0x374	; 0x374 <digital_config>
 540:	08 95       	ret

00000542 <initSerial>:
uint8_t receiveSerial() {
	// wait for data to be received
	while ( !(UCSR0A & (1 << RXC0)) );
	// get and return received data from buffer
	return UDR0;
}
 542:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 546:	83 e3       	ldi	r24, 0x33	; 51
 548:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 54c:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 550:	88 e1       	ldi	r24, 0x18	; 24
 552:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 556:	86 e0       	ldi	r24, 0x06	; 6
 558:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 55c:	08 95       	ret

0000055e <transmitSerial>:

void transmitSerial(uint8_t data) {
	// wait for an empty transmit buffer
	// UDRE is set when the transmit buffer is empty
	loop_until_bit_is_set(UCSR0A, UDRE0);
 55e:	e0 ec       	ldi	r30, 0xC0	; 192
 560:	f0 e0       	ldi	r31, 0x00	; 0
 562:	90 81       	ld	r25, Z
 564:	95 ff       	sbrs	r25, 5
 566:	fd cf       	rjmp	.-6      	; 0x562 <transmitSerial+0x4>
	// send the data
	UDR0 = data;
 568:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 56c:	08 95       	ret

0000056e <__fixunssfsi>:
 56e:	0e 94 53 03 	call	0x6a6	; 0x6a6 <__fp_splitA>
 572:	88 f0       	brcs	.+34     	; 0x596 <__fixunssfsi+0x28>
 574:	9f 57       	subi	r25, 0x7F	; 127
 576:	98 f0       	brcs	.+38     	; 0x59e <__fixunssfsi+0x30>
 578:	b9 2f       	mov	r27, r25
 57a:	99 27       	eor	r25, r25
 57c:	b7 51       	subi	r27, 0x17	; 23
 57e:	b0 f0       	brcs	.+44     	; 0x5ac <__fixunssfsi+0x3e>
 580:	e1 f0       	breq	.+56     	; 0x5ba <__fixunssfsi+0x4c>
 582:	66 0f       	add	r22, r22
 584:	77 1f       	adc	r23, r23
 586:	88 1f       	adc	r24, r24
 588:	99 1f       	adc	r25, r25
 58a:	1a f0       	brmi	.+6      	; 0x592 <__fixunssfsi+0x24>
 58c:	ba 95       	dec	r27
 58e:	c9 f7       	brne	.-14     	; 0x582 <__fixunssfsi+0x14>
 590:	14 c0       	rjmp	.+40     	; 0x5ba <__fixunssfsi+0x4c>
 592:	b1 30       	cpi	r27, 0x01	; 1
 594:	91 f0       	breq	.+36     	; 0x5ba <__fixunssfsi+0x4c>
 596:	0e 94 6d 03 	call	0x6da	; 0x6da <__fp_zero>
 59a:	b1 e0       	ldi	r27, 0x01	; 1
 59c:	08 95       	ret
 59e:	0c 94 6d 03 	jmp	0x6da	; 0x6da <__fp_zero>
 5a2:	67 2f       	mov	r22, r23
 5a4:	78 2f       	mov	r23, r24
 5a6:	88 27       	eor	r24, r24
 5a8:	b8 5f       	subi	r27, 0xF8	; 248
 5aa:	39 f0       	breq	.+14     	; 0x5ba <__fixunssfsi+0x4c>
 5ac:	b9 3f       	cpi	r27, 0xF9	; 249
 5ae:	cc f3       	brlt	.-14     	; 0x5a2 <__fixunssfsi+0x34>
 5b0:	86 95       	lsr	r24
 5b2:	77 95       	ror	r23
 5b4:	67 95       	ror	r22
 5b6:	b3 95       	inc	r27
 5b8:	d9 f7       	brne	.-10     	; 0x5b0 <__fixunssfsi+0x42>
 5ba:	3e f4       	brtc	.+14     	; 0x5ca <__fixunssfsi+0x5c>
 5bc:	90 95       	com	r25
 5be:	80 95       	com	r24
 5c0:	70 95       	com	r23
 5c2:	61 95       	neg	r22
 5c4:	7f 4f       	sbci	r23, 0xFF	; 255
 5c6:	8f 4f       	sbci	r24, 0xFF	; 255
 5c8:	9f 4f       	sbci	r25, 0xFF	; 255
 5ca:	08 95       	ret

000005cc <__floatunsisf>:
 5cc:	e8 94       	clt
 5ce:	09 c0       	rjmp	.+18     	; 0x5e2 <__floatsisf+0x12>

000005d0 <__floatsisf>:
 5d0:	97 fb       	bst	r25, 7
 5d2:	3e f4       	brtc	.+14     	; 0x5e2 <__floatsisf+0x12>
 5d4:	90 95       	com	r25
 5d6:	80 95       	com	r24
 5d8:	70 95       	com	r23
 5da:	61 95       	neg	r22
 5dc:	7f 4f       	sbci	r23, 0xFF	; 255
 5de:	8f 4f       	sbci	r24, 0xFF	; 255
 5e0:	9f 4f       	sbci	r25, 0xFF	; 255
 5e2:	99 23       	and	r25, r25
 5e4:	a9 f0       	breq	.+42     	; 0x610 <__floatsisf+0x40>
 5e6:	f9 2f       	mov	r31, r25
 5e8:	96 e9       	ldi	r25, 0x96	; 150
 5ea:	bb 27       	eor	r27, r27
 5ec:	93 95       	inc	r25
 5ee:	f6 95       	lsr	r31
 5f0:	87 95       	ror	r24
 5f2:	77 95       	ror	r23
 5f4:	67 95       	ror	r22
 5f6:	b7 95       	ror	r27
 5f8:	f1 11       	cpse	r31, r1
 5fa:	f8 cf       	rjmp	.-16     	; 0x5ec <__floatsisf+0x1c>
 5fc:	fa f4       	brpl	.+62     	; 0x63c <__floatsisf+0x6c>
 5fe:	bb 0f       	add	r27, r27
 600:	11 f4       	brne	.+4      	; 0x606 <__floatsisf+0x36>
 602:	60 ff       	sbrs	r22, 0
 604:	1b c0       	rjmp	.+54     	; 0x63c <__floatsisf+0x6c>
 606:	6f 5f       	subi	r22, 0xFF	; 255
 608:	7f 4f       	sbci	r23, 0xFF	; 255
 60a:	8f 4f       	sbci	r24, 0xFF	; 255
 60c:	9f 4f       	sbci	r25, 0xFF	; 255
 60e:	16 c0       	rjmp	.+44     	; 0x63c <__floatsisf+0x6c>
 610:	88 23       	and	r24, r24
 612:	11 f0       	breq	.+4      	; 0x618 <__floatsisf+0x48>
 614:	96 e9       	ldi	r25, 0x96	; 150
 616:	11 c0       	rjmp	.+34     	; 0x63a <__floatsisf+0x6a>
 618:	77 23       	and	r23, r23
 61a:	21 f0       	breq	.+8      	; 0x624 <__floatsisf+0x54>
 61c:	9e e8       	ldi	r25, 0x8E	; 142
 61e:	87 2f       	mov	r24, r23
 620:	76 2f       	mov	r23, r22
 622:	05 c0       	rjmp	.+10     	; 0x62e <__floatsisf+0x5e>
 624:	66 23       	and	r22, r22
 626:	71 f0       	breq	.+28     	; 0x644 <__floatsisf+0x74>
 628:	96 e8       	ldi	r25, 0x86	; 134
 62a:	86 2f       	mov	r24, r22
 62c:	70 e0       	ldi	r23, 0x00	; 0
 62e:	60 e0       	ldi	r22, 0x00	; 0
 630:	2a f0       	brmi	.+10     	; 0x63c <__floatsisf+0x6c>
 632:	9a 95       	dec	r25
 634:	66 0f       	add	r22, r22
 636:	77 1f       	adc	r23, r23
 638:	88 1f       	adc	r24, r24
 63a:	da f7       	brpl	.-10     	; 0x632 <__floatsisf+0x62>
 63c:	88 0f       	add	r24, r24
 63e:	96 95       	lsr	r25
 640:	87 95       	ror	r24
 642:	97 f9       	bld	r25, 7
 644:	08 95       	ret

00000646 <__fp_inf>:
 646:	97 f9       	bld	r25, 7
 648:	9f 67       	ori	r25, 0x7F	; 127
 64a:	80 e8       	ldi	r24, 0x80	; 128
 64c:	70 e0       	ldi	r23, 0x00	; 0
 64e:	60 e0       	ldi	r22, 0x00	; 0
 650:	08 95       	ret

00000652 <__fp_nan>:
 652:	9f ef       	ldi	r25, 0xFF	; 255
 654:	80 ec       	ldi	r24, 0xC0	; 192
 656:	08 95       	ret

00000658 <__fp_pscA>:
 658:	00 24       	eor	r0, r0
 65a:	0a 94       	dec	r0
 65c:	16 16       	cp	r1, r22
 65e:	17 06       	cpc	r1, r23
 660:	18 06       	cpc	r1, r24
 662:	09 06       	cpc	r0, r25
 664:	08 95       	ret

00000666 <__fp_pscB>:
 666:	00 24       	eor	r0, r0
 668:	0a 94       	dec	r0
 66a:	12 16       	cp	r1, r18
 66c:	13 06       	cpc	r1, r19
 66e:	14 06       	cpc	r1, r20
 670:	05 06       	cpc	r0, r21
 672:	08 95       	ret

00000674 <__fp_round>:
 674:	09 2e       	mov	r0, r25
 676:	03 94       	inc	r0
 678:	00 0c       	add	r0, r0
 67a:	11 f4       	brne	.+4      	; 0x680 <__fp_round+0xc>
 67c:	88 23       	and	r24, r24
 67e:	52 f0       	brmi	.+20     	; 0x694 <__fp_round+0x20>
 680:	bb 0f       	add	r27, r27
 682:	40 f4       	brcc	.+16     	; 0x694 <__fp_round+0x20>
 684:	bf 2b       	or	r27, r31
 686:	11 f4       	brne	.+4      	; 0x68c <__fp_round+0x18>
 688:	60 ff       	sbrs	r22, 0
 68a:	04 c0       	rjmp	.+8      	; 0x694 <__fp_round+0x20>
 68c:	6f 5f       	subi	r22, 0xFF	; 255
 68e:	7f 4f       	sbci	r23, 0xFF	; 255
 690:	8f 4f       	sbci	r24, 0xFF	; 255
 692:	9f 4f       	sbci	r25, 0xFF	; 255
 694:	08 95       	ret

00000696 <__fp_split3>:
 696:	57 fd       	sbrc	r21, 7
 698:	90 58       	subi	r25, 0x80	; 128
 69a:	44 0f       	add	r20, r20
 69c:	55 1f       	adc	r21, r21
 69e:	59 f0       	breq	.+22     	; 0x6b6 <__fp_splitA+0x10>
 6a0:	5f 3f       	cpi	r21, 0xFF	; 255
 6a2:	71 f0       	breq	.+28     	; 0x6c0 <__fp_splitA+0x1a>
 6a4:	47 95       	ror	r20

000006a6 <__fp_splitA>:
 6a6:	88 0f       	add	r24, r24
 6a8:	97 fb       	bst	r25, 7
 6aa:	99 1f       	adc	r25, r25
 6ac:	61 f0       	breq	.+24     	; 0x6c6 <__fp_splitA+0x20>
 6ae:	9f 3f       	cpi	r25, 0xFF	; 255
 6b0:	79 f0       	breq	.+30     	; 0x6d0 <__fp_splitA+0x2a>
 6b2:	87 95       	ror	r24
 6b4:	08 95       	ret
 6b6:	12 16       	cp	r1, r18
 6b8:	13 06       	cpc	r1, r19
 6ba:	14 06       	cpc	r1, r20
 6bc:	55 1f       	adc	r21, r21
 6be:	f2 cf       	rjmp	.-28     	; 0x6a4 <__fp_split3+0xe>
 6c0:	46 95       	lsr	r20
 6c2:	f1 df       	rcall	.-30     	; 0x6a6 <__fp_splitA>
 6c4:	08 c0       	rjmp	.+16     	; 0x6d6 <__fp_splitA+0x30>
 6c6:	16 16       	cp	r1, r22
 6c8:	17 06       	cpc	r1, r23
 6ca:	18 06       	cpc	r1, r24
 6cc:	99 1f       	adc	r25, r25
 6ce:	f1 cf       	rjmp	.-30     	; 0x6b2 <__fp_splitA+0xc>
 6d0:	86 95       	lsr	r24
 6d2:	71 05       	cpc	r23, r1
 6d4:	61 05       	cpc	r22, r1
 6d6:	08 94       	sec
 6d8:	08 95       	ret

000006da <__fp_zero>:
 6da:	e8 94       	clt

000006dc <__fp_szero>:
 6dc:	bb 27       	eor	r27, r27
 6de:	66 27       	eor	r22, r22
 6e0:	77 27       	eor	r23, r23
 6e2:	cb 01       	movw	r24, r22
 6e4:	97 f9       	bld	r25, 7
 6e6:	08 95       	ret

000006e8 <__mulsf3>:
 6e8:	0e 94 87 03 	call	0x70e	; 0x70e <__mulsf3x>
 6ec:	0c 94 3a 03 	jmp	0x674	; 0x674 <__fp_round>
 6f0:	0e 94 2c 03 	call	0x658	; 0x658 <__fp_pscA>
 6f4:	38 f0       	brcs	.+14     	; 0x704 <__mulsf3+0x1c>
 6f6:	0e 94 33 03 	call	0x666	; 0x666 <__fp_pscB>
 6fa:	20 f0       	brcs	.+8      	; 0x704 <__mulsf3+0x1c>
 6fc:	95 23       	and	r25, r21
 6fe:	11 f0       	breq	.+4      	; 0x704 <__mulsf3+0x1c>
 700:	0c 94 23 03 	jmp	0x646	; 0x646 <__fp_inf>
 704:	0c 94 29 03 	jmp	0x652	; 0x652 <__fp_nan>
 708:	11 24       	eor	r1, r1
 70a:	0c 94 6e 03 	jmp	0x6dc	; 0x6dc <__fp_szero>

0000070e <__mulsf3x>:
 70e:	0e 94 4b 03 	call	0x696	; 0x696 <__fp_split3>
 712:	70 f3       	brcs	.-36     	; 0x6f0 <__mulsf3+0x8>

00000714 <__mulsf3_pse>:
 714:	95 9f       	mul	r25, r21
 716:	c1 f3       	breq	.-16     	; 0x708 <__mulsf3+0x20>
 718:	95 0f       	add	r25, r21
 71a:	50 e0       	ldi	r21, 0x00	; 0
 71c:	55 1f       	adc	r21, r21
 71e:	62 9f       	mul	r22, r18
 720:	f0 01       	movw	r30, r0
 722:	72 9f       	mul	r23, r18
 724:	bb 27       	eor	r27, r27
 726:	f0 0d       	add	r31, r0
 728:	b1 1d       	adc	r27, r1
 72a:	63 9f       	mul	r22, r19
 72c:	aa 27       	eor	r26, r26
 72e:	f0 0d       	add	r31, r0
 730:	b1 1d       	adc	r27, r1
 732:	aa 1f       	adc	r26, r26
 734:	64 9f       	mul	r22, r20
 736:	66 27       	eor	r22, r22
 738:	b0 0d       	add	r27, r0
 73a:	a1 1d       	adc	r26, r1
 73c:	66 1f       	adc	r22, r22
 73e:	82 9f       	mul	r24, r18
 740:	22 27       	eor	r18, r18
 742:	b0 0d       	add	r27, r0
 744:	a1 1d       	adc	r26, r1
 746:	62 1f       	adc	r22, r18
 748:	73 9f       	mul	r23, r19
 74a:	b0 0d       	add	r27, r0
 74c:	a1 1d       	adc	r26, r1
 74e:	62 1f       	adc	r22, r18
 750:	83 9f       	mul	r24, r19
 752:	a0 0d       	add	r26, r0
 754:	61 1d       	adc	r22, r1
 756:	22 1f       	adc	r18, r18
 758:	74 9f       	mul	r23, r20
 75a:	33 27       	eor	r19, r19
 75c:	a0 0d       	add	r26, r0
 75e:	61 1d       	adc	r22, r1
 760:	23 1f       	adc	r18, r19
 762:	84 9f       	mul	r24, r20
 764:	60 0d       	add	r22, r0
 766:	21 1d       	adc	r18, r1
 768:	82 2f       	mov	r24, r18
 76a:	76 2f       	mov	r23, r22
 76c:	6a 2f       	mov	r22, r26
 76e:	11 24       	eor	r1, r1
 770:	9f 57       	subi	r25, 0x7F	; 127
 772:	50 40       	sbci	r21, 0x00	; 0
 774:	9a f0       	brmi	.+38     	; 0x79c <__mulsf3_pse+0x88>
 776:	f1 f0       	breq	.+60     	; 0x7b4 <__mulsf3_pse+0xa0>
 778:	88 23       	and	r24, r24
 77a:	4a f0       	brmi	.+18     	; 0x78e <__mulsf3_pse+0x7a>
 77c:	ee 0f       	add	r30, r30
 77e:	ff 1f       	adc	r31, r31
 780:	bb 1f       	adc	r27, r27
 782:	66 1f       	adc	r22, r22
 784:	77 1f       	adc	r23, r23
 786:	88 1f       	adc	r24, r24
 788:	91 50       	subi	r25, 0x01	; 1
 78a:	50 40       	sbci	r21, 0x00	; 0
 78c:	a9 f7       	brne	.-22     	; 0x778 <__mulsf3_pse+0x64>
 78e:	9e 3f       	cpi	r25, 0xFE	; 254
 790:	51 05       	cpc	r21, r1
 792:	80 f0       	brcs	.+32     	; 0x7b4 <__mulsf3_pse+0xa0>
 794:	0c 94 23 03 	jmp	0x646	; 0x646 <__fp_inf>
 798:	0c 94 6e 03 	jmp	0x6dc	; 0x6dc <__fp_szero>
 79c:	5f 3f       	cpi	r21, 0xFF	; 255
 79e:	e4 f3       	brlt	.-8      	; 0x798 <__mulsf3_pse+0x84>
 7a0:	98 3e       	cpi	r25, 0xE8	; 232
 7a2:	d4 f3       	brlt	.-12     	; 0x798 <__mulsf3_pse+0x84>
 7a4:	86 95       	lsr	r24
 7a6:	77 95       	ror	r23
 7a8:	67 95       	ror	r22
 7aa:	b7 95       	ror	r27
 7ac:	f7 95       	ror	r31
 7ae:	e7 95       	ror	r30
 7b0:	9f 5f       	subi	r25, 0xFF	; 255
 7b2:	c1 f7       	brne	.-16     	; 0x7a4 <__mulsf3_pse+0x90>
 7b4:	fe 2b       	or	r31, r30
 7b6:	88 0f       	add	r24, r24
 7b8:	91 1d       	adc	r25, r1
 7ba:	96 95       	lsr	r25
 7bc:	87 95       	ror	r24
 7be:	97 f9       	bld	r25, 7
 7c0:	08 95       	ret

000007c2 <_exit>:
 7c2:	f8 94       	cli

000007c4 <__stop_program>:
 7c4:	ff cf       	rjmp	.-2      	; 0x7c4 <__stop_program>
