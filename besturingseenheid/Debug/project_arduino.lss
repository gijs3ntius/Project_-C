
project_arduino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000084a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007d6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000028  00800100  00800100  0000084a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000084a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000087c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b0  00000000  00000000  000008bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a59  00000000  00000000  00000a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d7c  00000000  00000000  000024c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000df9  00000000  00000000  00003241  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003e8  00000000  00000000  0000403c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006be  00000000  00000000  00004424  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000de3  00000000  00000000  00004ae2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  000058c5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 93 01 	jmp	0x326	; 0x326 <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 5b 01 	jmp	0x2b6	; 0x2b6 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ed       	ldi	r30, 0xD6	; 214
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 32       	cpi	r26, 0x28	; 40
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 42 01 	call	0x284	; 0x284 <main>
  9e:	0c 94 e9 03 	jmp	0x7d2	; 0x7d2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SCH_Add_Task>:
  Task will be first executed at T = 300 ticks, then 1300, 2300, etc.

-*------------------------------------------------------------------*/

unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
  a6:	0f 93       	push	r16
  a8:	1f 93       	push	r17
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
  ae:	8c 01       	movw	r16, r24
   unsigned char Index = 0;

   // First find a gap in the array (if there is one)
   while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
  b0:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <SCH_tasks_G>
  b4:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <SCH_tasks_G+0x1>
  b8:	89 2b       	or	r24, r25
  ba:	81 f0       	breq	.+32     	; 0xdc <SCH_Add_Task+0x36>
  bc:	e5 e0       	ldi	r30, 0x05	; 5
  be:	f1 e0       	ldi	r31, 0x01	; 1
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	30 e0       	ldi	r19, 0x00	; 0
   {
      Index++;
  c4:	82 2f       	mov	r24, r18
unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
   unsigned char Index = 0;

   // First find a gap in the array (if there is one)
   while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
  c6:	e9 01       	movw	r28, r18
  c8:	a7 81       	ldd	r26, Z+7	; 0x07
  ca:	b0 85       	ldd	r27, Z+8	; 0x08
  cc:	2f 5f       	subi	r18, 0xFF	; 255
  ce:	3f 4f       	sbci	r19, 0xFF	; 255
  d0:	37 96       	adiw	r30, 0x07	; 7
  d2:	ab 2b       	or	r26, r27
  d4:	b9 f7       	brne	.-18     	; 0xc4 <SCH_Add_Task+0x1e>
   {
      Index++;
   }

   // Have we reached the end of the list?
   if(Index == SCH_MAX_TASKS)
  d6:	85 30       	cpi	r24, 0x05	; 5
  d8:	21 f4       	brne	.+8      	; 0xe2 <SCH_Add_Task+0x3c>
  da:	15 c0       	rjmp	.+42     	; 0x106 <SCH_Add_Task+0x60>
unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
   unsigned char Index = 0;

   // First find a gap in the array (if there is one)
   while((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
  dc:	c0 e0       	ldi	r28, 0x00	; 0
  de:	d0 e0       	ldi	r29, 0x00	; 0

-*------------------------------------------------------------------*/

unsigned char SCH_Add_Task(void (*pFunction)(), const unsigned int DELAY, const unsigned int PERIOD)
{
   unsigned char Index = 0;
  e0:	80 e0       	ldi	r24, 0x00	; 0
      // Task list is full, return an error code
      return SCH_MAX_TASKS;
   }

   // If we're here, there is a space in the task array
   SCH_tasks_G[Index].pTask = pFunction;
  e2:	fe 01       	movw	r30, r28
  e4:	ee 0f       	add	r30, r30
  e6:	ff 1f       	adc	r31, r31
  e8:	ee 0f       	add	r30, r30
  ea:	ff 1f       	adc	r31, r31
  ec:	ee 0f       	add	r30, r30
  ee:	ff 1f       	adc	r31, r31
  f0:	ec 1b       	sub	r30, r28
  f2:	fd 0b       	sbc	r31, r29
  f4:	eb 5f       	subi	r30, 0xFB	; 251
  f6:	fe 4f       	sbci	r31, 0xFE	; 254
  f8:	11 83       	std	Z+1, r17	; 0x01
  fa:	00 83       	st	Z, r16
   SCH_tasks_G[Index].Delay =DELAY;
  fc:	73 83       	std	Z+3, r23	; 0x03
  fe:	62 83       	std	Z+2, r22	; 0x02
   SCH_tasks_G[Index].Period = PERIOD;
 100:	55 83       	std	Z+5, r21	; 0x05
 102:	44 83       	std	Z+4, r20	; 0x04
   SCH_tasks_G[Index].RunMe = 0;
 104:	16 82       	std	Z+6, r1	; 0x06

   // return position of task (to allow later deletion)
   return Index;
}
 106:	df 91       	pop	r29
 108:	cf 91       	pop	r28
 10a:	1f 91       	pop	r17
 10c:	0f 91       	pop	r16
 10e:	08 95       	ret

00000110 <SCH_Delete_Task>:
unsigned char SCH_Delete_Task(const unsigned char TASK_INDEX)
{
   // Return_code can be used for error reporting, NOT USED HERE THOUGH!
   unsigned char Return_code = 0;

   SCH_tasks_G[TASK_INDEX].pTask = 0;
 110:	27 e0       	ldi	r18, 0x07	; 7
 112:	82 9f       	mul	r24, r18
 114:	c0 01       	movw	r24, r0
 116:	11 24       	eor	r1, r1
 118:	fc 01       	movw	r30, r24
 11a:	eb 5f       	subi	r30, 0xFB	; 251
 11c:	fe 4f       	sbci	r31, 0xFE	; 254
 11e:	11 82       	std	Z+1, r1	; 0x01
 120:	10 82       	st	Z, r1
   SCH_tasks_G[TASK_INDEX].Delay = 0;
 122:	13 82       	std	Z+3, r1	; 0x03
 124:	12 82       	std	Z+2, r1	; 0x02
   SCH_tasks_G[TASK_INDEX].Period = 0;
 126:	15 82       	std	Z+5, r1	; 0x05
 128:	14 82       	std	Z+4, r1	; 0x04
   SCH_tasks_G[TASK_INDEX].RunMe = 0;
 12a:	16 82       	std	Z+6, r1	; 0x06

   return Return_code;
}
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	08 95       	ret

00000130 <SCH_Dispatch_Tasks>:
  This function must be called (repeatedly) from the main loop.

-*------------------------------------------------------------------*/

void SCH_Dispatch_Tasks(void)
{
 130:	ef 92       	push	r14
 132:	ff 92       	push	r15
 134:	1f 93       	push	r17
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	c5 e0       	ldi	r28, 0x05	; 5
 13c:	d1 e0       	ldi	r29, 0x01	; 1
   unsigned char Index;

   // Dispatches (runs) the next task (if one is ready)
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
 13e:	10 e0       	ldi	r17, 0x00	; 0
   {
      if((SCH_tasks_G[Index].RunMe > 0) && (SCH_tasks_G[Index].pTask != 0))
 140:	8e 81       	ldd	r24, Y+6	; 0x06
 142:	88 23       	and	r24, r24
 144:	79 f0       	breq	.+30     	; 0x164 <SCH_Dispatch_Tasks+0x34>
 146:	e8 81       	ld	r30, Y
 148:	f9 81       	ldd	r31, Y+1	; 0x01
 14a:	30 97       	sbiw	r30, 0x00	; 0
 14c:	59 f0       	breq	.+22     	; 0x164 <SCH_Dispatch_Tasks+0x34>
      {
         (*SCH_tasks_G[Index].pTask)();  // Run the task
 14e:	09 95       	icall
         SCH_tasks_G[Index].RunMe -= 1;   // Reset / reduce RunMe flag
 150:	8e 81       	ldd	r24, Y+6	; 0x06
 152:	81 50       	subi	r24, 0x01	; 1
 154:	8e 83       	std	Y+6, r24	; 0x06

         // Periodic tasks will automatically run again
         // - if this is a 'one shot' task, remove it from the array
         if(SCH_tasks_G[Index].Period == 0)
 156:	8c 81       	ldd	r24, Y+4	; 0x04
 158:	9d 81       	ldd	r25, Y+5	; 0x05
 15a:	89 2b       	or	r24, r25
 15c:	19 f4       	brne	.+6      	; 0x164 <SCH_Dispatch_Tasks+0x34>
         {
            SCH_Delete_Task(Index);
 15e:	81 2f       	mov	r24, r17
 160:	0e 94 88 00 	call	0x110	; 0x110 <SCH_Delete_Task>
void SCH_Dispatch_Tasks(void)
{
   unsigned char Index;

   // Dispatches (runs) the next task (if one is ready)
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
 164:	1f 5f       	subi	r17, 0xFF	; 255
 166:	27 96       	adiw	r28, 0x07	; 7
 168:	15 30       	cpi	r17, 0x05	; 5
 16a:	51 f7       	brne	.-44     	; 0x140 <SCH_Dispatch_Tasks+0x10>
         {
            SCH_Delete_Task(Index);
         }
      }
   }
}
 16c:	df 91       	pop	r29
 16e:	cf 91       	pop	r28
 170:	1f 91       	pop	r17
 172:	ff 90       	pop	r15
 174:	ef 90       	pop	r14
 176:	08 95       	ret

00000178 <SCH_Init_T1>:
  You must call this function before using the scheduler.

-*------------------------------------------------------------------*/

void SCH_Init_T1(void)
{
 178:	cf 93       	push	r28
   unsigned char i;

   for(i = 0; i < SCH_MAX_TASKS; i++)
 17a:	c0 e0       	ldi	r28, 0x00	; 0
   {
      SCH_Delete_Task(i);
 17c:	8c 2f       	mov	r24, r28
 17e:	0e 94 88 00 	call	0x110	; 0x110 <SCH_Delete_Task>

void SCH_Init_T1(void)
{
   unsigned char i;

   for(i = 0; i < SCH_MAX_TASKS; i++)
 182:	cf 5f       	subi	r28, 0xFF	; 255
 184:	c5 30       	cpi	r28, 0x05	; 5
 186:	d1 f7       	brne	.-12     	; 0x17c <SCH_Init_T1+0x4>

   // Set up Timer 1
   // Values for 1ms and 10ms ticks are provided for various crystals

   // Hier moet de timer periode worden aangepast ....!
   OCR1A = (uint16_t)625;   		     // 10ms = (256/16.000.000) * 625
 188:	81 e7       	ldi	r24, 0x71	; 113
 18a:	92 e0       	ldi	r25, 0x02	; 2
 18c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 190:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
   TCCR1B = (1 << CS12) | (1 << WGM12);  // prescale op 64, top counter = value OCR1A (CTC mode)
 194:	8c e0       	ldi	r24, 0x0C	; 12
 196:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
   TIMSK1 = 1 << OCIE1A;   		     // Timer 1 Output Compare A Match Interrupt Enable
 19a:	82 e0       	ldi	r24, 0x02	; 2
 19c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
}
 1a0:	cf 91       	pop	r28
 1a2:	08 95       	ret

000001a4 <SCH_Start>:

-*------------------------------------------------------------------*/

void SCH_Start(void)
{
      sei();
 1a4:	78 94       	sei
 1a6:	08 95       	ret

000001a8 <__vector_11>:
  determined by the timer settings in SCH_Init_T1().

-*------------------------------------------------------------------*/

ISR(TIMER1_COMPA_vect)
{
 1a8:	1f 92       	push	r1
 1aa:	0f 92       	push	r0
 1ac:	0f b6       	in	r0, 0x3f	; 63
 1ae:	0f 92       	push	r0
 1b0:	11 24       	eor	r1, r1
 1b2:	2f 93       	push	r18
 1b4:	3f 93       	push	r19
 1b6:	8f 93       	push	r24
 1b8:	9f 93       	push	r25
 1ba:	af 93       	push	r26
 1bc:	bf 93       	push	r27
 1be:	ef 93       	push	r30
 1c0:	ff 93       	push	r31
 1c2:	e5 e0       	ldi	r30, 0x05	; 5
 1c4:	f1 e0       	ldi	r31, 0x01	; 1
 1c6:	28 e2       	ldi	r18, 0x28	; 40
 1c8:	31 e0       	ldi	r19, 0x01	; 1
   unsigned char Index;
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
   {
      // Check if there is a task at this location
      if(SCH_tasks_G[Index].pTask)
 1ca:	80 81       	ld	r24, Z
 1cc:	91 81       	ldd	r25, Z+1	; 0x01
 1ce:	89 2b       	or	r24, r25
 1d0:	91 f0       	breq	.+36     	; 0x1f6 <__vector_11+0x4e>
      {
         if(SCH_tasks_G[Index].Delay == 0)
 1d2:	82 81       	ldd	r24, Z+2	; 0x02
 1d4:	93 81       	ldd	r25, Z+3	; 0x03
 1d6:	00 97       	sbiw	r24, 0x00	; 0
 1d8:	59 f4       	brne	.+22     	; 0x1f0 <__vector_11+0x48>
         {
            // The task is due to run, Inc. the 'RunMe' flag
            SCH_tasks_G[Index].RunMe += 1;
 1da:	86 81       	ldd	r24, Z+6	; 0x06
 1dc:	8f 5f       	subi	r24, 0xFF	; 255
 1de:	86 83       	std	Z+6, r24	; 0x06

            if(SCH_tasks_G[Index].Period)
 1e0:	84 81       	ldd	r24, Z+4	; 0x04
 1e2:	95 81       	ldd	r25, Z+5	; 0x05
 1e4:	00 97       	sbiw	r24, 0x00	; 0
 1e6:	39 f0       	breq	.+14     	; 0x1f6 <__vector_11+0x4e>
            {
               // Schedule periodic tasks to run again
               SCH_tasks_G[Index].Delay = SCH_tasks_G[Index].Period;
               SCH_tasks_G[Index].Delay -= 1;
 1e8:	01 97       	sbiw	r24, 0x01	; 1
 1ea:	93 83       	std	Z+3, r25	; 0x03
 1ec:	82 83       	std	Z+2, r24	; 0x02
 1ee:	03 c0       	rjmp	.+6      	; 0x1f6 <__vector_11+0x4e>
            }
         }
         else
         {
            // Not yet ready to run: just decrement the delay
            SCH_tasks_G[Index].Delay -= 1;
 1f0:	01 97       	sbiw	r24, 0x01	; 1
 1f2:	93 83       	std	Z+3, r25	; 0x03
 1f4:	82 83       	std	Z+2, r24	; 0x02
 1f6:	37 96       	adiw	r30, 0x07	; 7
-*------------------------------------------------------------------*/

ISR(TIMER1_COMPA_vect)
{
   unsigned char Index;
   for(Index = 0; Index < SCH_MAX_TASKS; Index++)
 1f8:	e2 17       	cp	r30, r18
 1fa:	f3 07       	cpc	r31, r19
 1fc:	31 f7       	brne	.-52     	; 0x1ca <__vector_11+0x22>
            // Not yet ready to run: just decrement the delay
            SCH_tasks_G[Index].Delay -= 1;
         }
      }
   }
}
 1fe:	ff 91       	pop	r31
 200:	ef 91       	pop	r30
 202:	bf 91       	pop	r27
 204:	af 91       	pop	r26
 206:	9f 91       	pop	r25
 208:	8f 91       	pop	r24
 20a:	3f 91       	pop	r19
 20c:	2f 91       	pop	r18
 20e:	0f 90       	pop	r0
 210:	0f be       	out	0x3f, r0	; 63
 212:	0f 90       	pop	r0
 214:	1f 90       	pop	r1
 216:	18 95       	reti

00000218 <Light>:
	transmitSerial(data);
	_delay_ms(10);
}

void turnOnLights2(){
	turnOnLights();
 218:	cf 93       	push	r28
 21a:	0e 94 35 02 	call	0x46a	; 0x46a <getLight>
 21e:	c8 2f       	mov	r28, r24
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	0e 94 4a 02 	call	0x494	; 0x494 <transmitSerial>
 226:	2f ef       	ldi	r18, 0xFF	; 255
 228:	80 e7       	ldi	r24, 0x70	; 112
 22a:	92 e0       	ldi	r25, 0x02	; 2
 22c:	21 50       	subi	r18, 0x01	; 1
 22e:	80 40       	sbci	r24, 0x00	; 0
 230:	90 40       	sbci	r25, 0x00	; 0
 232:	e1 f7       	brne	.-8      	; 0x22c <Light+0x14>
 234:	00 c0       	rjmp	.+0      	; 0x236 <Light+0x1e>
 236:	00 00       	nop
 238:	8c 2f       	mov	r24, r28
 23a:	0e 94 4a 02 	call	0x494	; 0x494 <transmitSerial>
 23e:	8f e3       	ldi	r24, 0x3F	; 63
 240:	9c e9       	ldi	r25, 0x9C	; 156
 242:	01 97       	sbiw	r24, 0x01	; 1
 244:	f1 f7       	brne	.-4      	; 0x242 <Light+0x2a>
 246:	00 c0       	rjmp	.+0      	; 0x248 <Light+0x30>
 248:	00 00       	nop
 24a:	cf 91       	pop	r28
 24c:	08 95       	ret

0000024e <Temperature>:
 24e:	cf 93       	push	r28
 250:	0e 94 2d 02 	call	0x45a	; 0x45a <getTemp>
 254:	c8 2f       	mov	r28, r24
 256:	82 e0       	ldi	r24, 0x02	; 2
 258:	0e 94 4a 02 	call	0x494	; 0x494 <transmitSerial>
 25c:	2f ef       	ldi	r18, 0xFF	; 255
 25e:	80 e7       	ldi	r24, 0x70	; 112
 260:	92 e0       	ldi	r25, 0x02	; 2
 262:	21 50       	subi	r18, 0x01	; 1
 264:	80 40       	sbci	r24, 0x00	; 0
 266:	90 40       	sbci	r25, 0x00	; 0
 268:	e1 f7       	brne	.-8      	; 0x262 <Temperature+0x14>
 26a:	00 c0       	rjmp	.+0      	; 0x26c <Temperature+0x1e>
 26c:	00 00       	nop
 26e:	8c 2f       	mov	r24, r28
 270:	0e 94 4a 02 	call	0x494	; 0x494 <transmitSerial>
 274:	8f e3       	ldi	r24, 0x3F	; 63
 276:	9c e9       	ldi	r25, 0x9C	; 156
 278:	01 97       	sbiw	r24, 0x01	; 1
 27a:	f1 f7       	brne	.-4      	; 0x278 <Temperature+0x2a>
 27c:	00 c0       	rjmp	.+0      	; 0x27e <Temperature+0x30>
 27e:	00 00       	nop
 280:	cf 91       	pop	r28
 282:	08 95       	ret

00000284 <main>:
	
	//setUpTimer0(); // voor de afstand
	
	//setUpLights();

	initSerial();
 284:	0e 94 3c 02 	call	0x478	; 0x478 <initSerial>
	
	SCH_Init_T1(); // stel de scheduler in
 288:	0e 94 bc 00 	call	0x178	; 0x178 <SCH_Init_T1>
	
	SCH_Add_Task(Temperature, 0, 1000); // temp zit op A0.
 28c:	48 ee       	ldi	r20, 0xE8	; 232
 28e:	53 e0       	ldi	r21, 0x03	; 3
 290:	60 e0       	ldi	r22, 0x00	; 0
 292:	70 e0       	ldi	r23, 0x00	; 0
 294:	87 e2       	ldi	r24, 0x27	; 39
 296:	91 e0       	ldi	r25, 0x01	; 1
 298:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	// 200 = 40000 dus om de 40 seconden
	
	//SCH_Add_Task(testKutSchedular,0, 200);

	SCH_Add_Task(Light, 500, 1000); // Voeg taken toe aan de scheduler Light zit op A1.
 29c:	48 ee       	ldi	r20, 0xE8	; 232
 29e:	53 e0       	ldi	r21, 0x03	; 3
 2a0:	64 ef       	ldi	r22, 0xF4	; 244
 2a2:	71 e0       	ldi	r23, 0x01	; 1
 2a4:	8c e0       	ldi	r24, 0x0C	; 12
 2a6:	91 e0       	ldi	r25, 0x01	; 1
 2a8:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	
	//SCH_Add_Task(turnOnLights2, 0, 100);
	


	SCH_Start();// start de scheduler
 2ac:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <SCH_Start>
   
    while (1) 
    {
		SCH_Dispatch_Tasks(); // verzend de taken
 2b0:	0e 94 98 00 	call	0x130	; 0x130 <SCH_Dispatch_Tasks>
 2b4:	fd cf       	rjmp	.-6      	; 0x2b0 <main+0x2c>

000002b6 <__vector_16>:
}
	
	

ISR(TIMER0_OVF_vect)  // Here every time Timer0 Overflow
{
 2b6:	1f 92       	push	r1
 2b8:	0f 92       	push	r0
 2ba:	0f b6       	in	r0, 0x3f	; 63
 2bc:	0f 92       	push	r0
 2be:	11 24       	eor	r1, r1
 2c0:	2f 93       	push	r18
 2c2:	3f 93       	push	r19
 2c4:	4f 93       	push	r20
 2c6:	5f 93       	push	r21
 2c8:	6f 93       	push	r22
 2ca:	7f 93       	push	r23
 2cc:	8f 93       	push	r24
 2ce:	9f 93       	push	r25
 2d0:	af 93       	push	r26
 2d2:	bf 93       	push	r27
 2d4:	ef 93       	push	r30
 2d6:	ff 93       	push	r31
	
	if (echo_start)
 2d8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 2dc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_end+0x1>
 2e0:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_end+0x2>
 2e4:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_end+0x3>
 2e8:	89 2b       	or	r24, r25
 2ea:	8a 2b       	or	r24, r26
 2ec:	8b 2b       	or	r24, r27
 2ee:	49 f0       	breq	.+18     	; 0x302 <__vector_16+0x4c>
	{
		Timer0_counter += 1; // hij telt tot 255 dan geeft hij een overflow. Bij overflow tellen we er 1 bij op
 2f0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <Timer0_counter>
 2f4:	8f 5f       	subi	r24, 0xFF	; 255
 2f6:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <Timer0_counter>
		transmitSerial(3);
 2fa:	83 e0       	ldi	r24, 0x03	; 3
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	0e 94 4a 02 	call	0x494	; 0x494 <transmitSerial>
	}
	
	if (PIND & 0x00)
 302:	89 b1       	in	r24, 0x09	; 9
		// ook kijken of het misgaat bij het veranderen naar een 8bits getal.
	}
	
	
	
} 
 304:	ff 91       	pop	r31
 306:	ef 91       	pop	r30
 308:	bf 91       	pop	r27
 30a:	af 91       	pop	r26
 30c:	9f 91       	pop	r25
 30e:	8f 91       	pop	r24
 310:	7f 91       	pop	r23
 312:	6f 91       	pop	r22
 314:	5f 91       	pop	r21
 316:	4f 91       	pop	r20
 318:	3f 91       	pop	r19
 31a:	2f 91       	pop	r18
 31c:	0f 90       	pop	r0
 31e:	0f be       	out	0x3f, r0	; 63
 320:	0f 90       	pop	r0
 322:	1f 90       	pop	r1
 324:	18 95       	reti

00000326 <__vector_2>:


ISR(INT1_vect)
{
 326:	1f 92       	push	r1
 328:	0f 92       	push	r0
 32a:	0f b6       	in	r0, 0x3f	; 63
 32c:	0f 92       	push	r0
 32e:	11 24       	eor	r1, r1
 330:	2f 93       	push	r18
 332:	3f 93       	push	r19
 334:	4f 93       	push	r20
 336:	5f 93       	push	r21
 338:	6f 93       	push	r22
 33a:	7f 93       	push	r23
 33c:	8f 93       	push	r24
 33e:	9f 93       	push	r25
 340:	af 93       	push	r26
 342:	bf 93       	push	r27
 344:	ef 93       	push	r30
 346:	ff 93       	push	r31
	
	if (echo_start == 0)
 348:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 34c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_end+0x1>
 350:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_end+0x2>
 354:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_end+0x3>
 358:	89 2b       	or	r24, r25
 35a:	8a 2b       	or	r24, r26
 35c:	8b 2b       	or	r24, r27
 35e:	99 f4       	brne	.+38     	; 0x386 <__vector_2+0x60>
	{
		TCNT0 = 0; // clear counter
 360:	16 bc       	out	0x26, r1	; 38
		Timer0_counter = 0; // clear de timer counter
 362:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <Timer0_counter>
		echo_start = 1;
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	a0 e0       	ldi	r26, 0x00	; 0
 36c:	b0 e0       	ldi	r27, 0x00	; 0
 36e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
 372:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_end+0x1>
 376:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_end+0x2>
 37a:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_end+0x3>
		transmitSerial(2);
 37e:	82 e0       	ldi	r24, 0x02	; 2
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	0e 94 4a 02 	call	0x494	; 0x494 <transmitSerial>
	}
}
 386:	ff 91       	pop	r31
 388:	ef 91       	pop	r30
 38a:	bf 91       	pop	r27
 38c:	af 91       	pop	r26
 38e:	9f 91       	pop	r25
 390:	8f 91       	pop	r24
 392:	7f 91       	pop	r23
 394:	6f 91       	pop	r22
 396:	5f 91       	pop	r21
 398:	4f 91       	pop	r20
 39a:	3f 91       	pop	r19
 39c:	2f 91       	pop	r18
 39e:	0f 90       	pop	r0
 3a0:	0f be       	out	0x3f, r0	; 63
 3a2:	0f 90       	pop	r0
 3a4:	1f 90       	pop	r1
 3a6:	18 95       	reti

000003a8 <analog_read0>:
 * Gets a value from an analog pin
 * TODO before reading setup the ADMUX and ADCSRA registers
 */
uint16_t analog_read0() {
	
	ADCSRA |= (0<<ADEN);
 3a8:	ea e7       	ldi	r30, 0x7A	; 122
 3aa:	f0 e0       	ldi	r31, 0x00	; 0
 3ac:	80 81       	ld	r24, Z
 3ae:	80 83       	st	Z, r24
	
	ADMUX |= (1<<REFS0); 
 3b0:	ac e7       	ldi	r26, 0x7C	; 124
 3b2:	b0 e0       	ldi	r27, 0x00	; 0
 3b4:	8c 91       	ld	r24, X
 3b6:	80 64       	ori	r24, 0x40	; 64
 3b8:	8c 93       	st	X, r24

	ADCSRA |= (1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2); 
 3ba:	80 81       	ld	r24, Z
 3bc:	87 60       	ori	r24, 0x07	; 7
 3be:	80 83       	st	Z, r24
	
	ADMUX = (ADMUX & 0xF8) & ~(1 << MUX0);
 3c0:	8c 91       	ld	r24, X
 3c2:	88 7f       	andi	r24, 0xF8	; 248
 3c4:	8c 93       	st	X, r24
	
	
	ADCSRA |= (1<<ADEN);
 3c6:	80 81       	ld	r24, Z
 3c8:	80 68       	ori	r24, 0x80	; 128
 3ca:	80 83       	st	Z, r24

	ADCSRA |= (1<<ADSC);
 3cc:	80 81       	ld	r24, Z
 3ce:	80 64       	ori	r24, 0x40	; 64
 3d0:	80 83       	st	Z, r24
	

	loop_until_bit_is_set(ADCSRA,ADSC);
 3d2:	80 81       	ld	r24, Z
 3d4:	86 ff       	sbrs	r24, 6
 3d6:	fd cf       	rjmp	.-6      	; 0x3d2 <analog_read0+0x2a>
	
	return (ADC);
 3d8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 3dc:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	
}
 3e0:	08 95       	ret

000003e2 <analog_read1>:

uint16_t analog_read1() {
	
	ADCSRA |= (0<<ADEN);
 3e2:	ea e7       	ldi	r30, 0x7A	; 122
 3e4:	f0 e0       	ldi	r31, 0x00	; 0
 3e6:	80 81       	ld	r24, Z
 3e8:	80 83       	st	Z, r24
	
	ADMUX |= (1<<REFS0);
 3ea:	ac e7       	ldi	r26, 0x7C	; 124
 3ec:	b0 e0       	ldi	r27, 0x00	; 0
 3ee:	8c 91       	ld	r24, X
 3f0:	80 64       	ori	r24, 0x40	; 64
 3f2:	8c 93       	st	X, r24

	ADCSRA |= (1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2);
 3f4:	80 81       	ld	r24, Z
 3f6:	87 60       	ori	r24, 0x07	; 7
 3f8:	80 83       	st	Z, r24
	
	ADMUX = (ADMUX & 0xF8)|(1 << MUX1);
 3fa:	8c 91       	ld	r24, X
 3fc:	88 7f       	andi	r24, 0xF8	; 248
 3fe:	82 60       	ori	r24, 0x02	; 2
 400:	8c 93       	st	X, r24
	
	
	ADCSRA |= (1<<ADEN);
 402:	80 81       	ld	r24, Z
 404:	80 68       	ori	r24, 0x80	; 128
 406:	80 83       	st	Z, r24

	ADCSRA |= (1<<ADSC);
 408:	80 81       	ld	r24, Z
 40a:	80 64       	ori	r24, 0x40	; 64
 40c:	80 83       	st	Z, r24
	

	loop_until_bit_is_set(ADCSRA,ADSC);
 40e:	80 81       	ld	r24, Z
 410:	86 ff       	sbrs	r24, 6
 412:	fd cf       	rjmp	.-6      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
	
	return (ADC);
 414:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 418:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	
}
 41c:	08 95       	ret

0000041e <temperatureInC>:
	// keer 5.0 omdat het om 5 volt gaat en gedeelt door 1024 omdat het een 10 bits getal is
	// voorbeeld: 2.5 volt = 512 * 5.0 / 1024. Je krijgt 512(0x200) binnen
	float temperatureC = (volt - 0.5) * 100;
	// de formule die ervoor zorgt dat het omgezet wordt.
	// voorbeeld: (1.2 - 0.5) * 100 = 70 graden Celsius.
	return temperatureC;
 41e:	bc 01       	movw	r22, r24
 420:	80 e0       	ldi	r24, 0x00	; 0
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	0e 94 ee 02 	call	0x5dc	; 0x5dc <__floatunsisf>
 428:	20 e0       	ldi	r18, 0x00	; 0
 42a:	30 e0       	ldi	r19, 0x00	; 0
 42c:	40 ea       	ldi	r20, 0xA0	; 160
 42e:	50 e4       	ldi	r21, 0x40	; 64
 430:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <__mulsf3>
 434:	20 e0       	ldi	r18, 0x00	; 0
 436:	30 e0       	ldi	r19, 0x00	; 0
 438:	40 e8       	ldi	r20, 0x80	; 128
 43a:	5a e3       	ldi	r21, 0x3A	; 58
 43c:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <__mulsf3>
 440:	20 e0       	ldi	r18, 0x00	; 0
 442:	30 e0       	ldi	r19, 0x00	; 0
 444:	40 e0       	ldi	r20, 0x00	; 0
 446:	5f e3       	ldi	r21, 0x3F	; 63
 448:	0e 94 52 02 	call	0x4a4	; 0x4a4 <__subsf3>
 44c:	20 e0       	ldi	r18, 0x00	; 0
 44e:	30 e0       	ldi	r19, 0x00	; 0
 450:	48 ec       	ldi	r20, 0xC8	; 200
 452:	52 e4       	ldi	r21, 0x42	; 66
 454:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <__mulsf3>
	
}
 458:	08 95       	ret

0000045a <getTemp>:


uint8_t getTemp(){
	uint8_t tempInC = temperatureInC(analog_read0()); // lees ADC uit (A0) en maak er volt van en dan Celsius
 45a:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <analog_read0>
 45e:	0e 94 0f 02 	call	0x41e	; 0x41e <temperatureInC>
	return tempInC;
 462:	0e 94 bf 02 	call	0x57e	; 0x57e <__fixunssfsi>
 466:	86 2f       	mov	r24, r22
}
 468:	08 95       	ret

0000046a <getLight>:
/* Photocell sensor 
*********************************************************************************************************************/


uint8_t getLight(){
	uint8_t light = (analog_read1()>>2); 
 46a:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <analog_read1>
	// lees A1 uit, met een shift /4 
	// Je krijgt een 10 bits getal. We schuiven hem twee keer naar rechts zodat je 8 bits hebt.
	// Je verliest hier alleen de waarden 0-3 mee. Voor dit project niet erg.
	
	return light;
 46e:	95 95       	asr	r25
 470:	87 95       	ror	r24
 472:	95 95       	asr	r25
 474:	87 95       	ror	r24
}
 476:	08 95       	ret

00000478 <initSerial>:
uint8_t receiveSerial() {
	// wait for data to be received
	while ( !(UCSR0A & (1 << RXC0)) );
	// get and return received data from buffer
	return UDR0;
}
 478:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 47c:	83 e3       	ldi	r24, 0x33	; 51
 47e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 482:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 486:	88 e1       	ldi	r24, 0x18	; 24
 488:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 48c:	86 e0       	ldi	r24, 0x06	; 6
 48e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 492:	08 95       	ret

00000494 <transmitSerial>:

void transmitSerial(uint8_t data) {
	// wait for an empty transmit buffer
	// UDRE is set when the transmit buffer is empty
	loop_until_bit_is_set(UCSR0A, UDRE0);
 494:	e0 ec       	ldi	r30, 0xC0	; 192
 496:	f0 e0       	ldi	r31, 0x00	; 0
 498:	90 81       	ld	r25, Z
 49a:	95 ff       	sbrs	r25, 5
 49c:	fd cf       	rjmp	.-6      	; 0x498 <transmitSerial+0x4>
	// send the data
	UDR0 = data;
 49e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 4a2:	08 95       	ret

000004a4 <__subsf3>:
 4a4:	50 58       	subi	r21, 0x80	; 128

000004a6 <__addsf3>:
 4a6:	bb 27       	eor	r27, r27
 4a8:	aa 27       	eor	r26, r26
 4aa:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <__addsf3x>
 4ae:	0c 94 42 03 	jmp	0x684	; 0x684 <__fp_round>
 4b2:	0e 94 34 03 	call	0x668	; 0x668 <__fp_pscA>
 4b6:	38 f0       	brcs	.+14     	; 0x4c6 <__addsf3+0x20>
 4b8:	0e 94 3b 03 	call	0x676	; 0x676 <__fp_pscB>
 4bc:	20 f0       	brcs	.+8      	; 0x4c6 <__addsf3+0x20>
 4be:	39 f4       	brne	.+14     	; 0x4ce <__addsf3+0x28>
 4c0:	9f 3f       	cpi	r25, 0xFF	; 255
 4c2:	19 f4       	brne	.+6      	; 0x4ca <__addsf3+0x24>
 4c4:	26 f4       	brtc	.+8      	; 0x4ce <__addsf3+0x28>
 4c6:	0c 94 31 03 	jmp	0x662	; 0x662 <__fp_nan>
 4ca:	0e f4       	brtc	.+2      	; 0x4ce <__addsf3+0x28>
 4cc:	e0 95       	com	r30
 4ce:	e7 fb       	bst	r30, 7
 4d0:	0c 94 2b 03 	jmp	0x656	; 0x656 <__fp_inf>

000004d4 <__addsf3x>:
 4d4:	e9 2f       	mov	r30, r25
 4d6:	0e 94 53 03 	call	0x6a6	; 0x6a6 <__fp_split3>
 4da:	58 f3       	brcs	.-42     	; 0x4b2 <__addsf3+0xc>
 4dc:	ba 17       	cp	r27, r26
 4de:	62 07       	cpc	r22, r18
 4e0:	73 07       	cpc	r23, r19
 4e2:	84 07       	cpc	r24, r20
 4e4:	95 07       	cpc	r25, r21
 4e6:	20 f0       	brcs	.+8      	; 0x4f0 <__addsf3x+0x1c>
 4e8:	79 f4       	brne	.+30     	; 0x508 <__addsf3x+0x34>
 4ea:	a6 f5       	brtc	.+104    	; 0x554 <__addsf3x+0x80>
 4ec:	0c 94 75 03 	jmp	0x6ea	; 0x6ea <__fp_zero>
 4f0:	0e f4       	brtc	.+2      	; 0x4f4 <__addsf3x+0x20>
 4f2:	e0 95       	com	r30
 4f4:	0b 2e       	mov	r0, r27
 4f6:	ba 2f       	mov	r27, r26
 4f8:	a0 2d       	mov	r26, r0
 4fa:	0b 01       	movw	r0, r22
 4fc:	b9 01       	movw	r22, r18
 4fe:	90 01       	movw	r18, r0
 500:	0c 01       	movw	r0, r24
 502:	ca 01       	movw	r24, r20
 504:	a0 01       	movw	r20, r0
 506:	11 24       	eor	r1, r1
 508:	ff 27       	eor	r31, r31
 50a:	59 1b       	sub	r21, r25
 50c:	99 f0       	breq	.+38     	; 0x534 <__addsf3x+0x60>
 50e:	59 3f       	cpi	r21, 0xF9	; 249
 510:	50 f4       	brcc	.+20     	; 0x526 <__addsf3x+0x52>
 512:	50 3e       	cpi	r21, 0xE0	; 224
 514:	68 f1       	brcs	.+90     	; 0x570 <__addsf3x+0x9c>
 516:	1a 16       	cp	r1, r26
 518:	f0 40       	sbci	r31, 0x00	; 0
 51a:	a2 2f       	mov	r26, r18
 51c:	23 2f       	mov	r18, r19
 51e:	34 2f       	mov	r19, r20
 520:	44 27       	eor	r20, r20
 522:	58 5f       	subi	r21, 0xF8	; 248
 524:	f3 cf       	rjmp	.-26     	; 0x50c <__addsf3x+0x38>
 526:	46 95       	lsr	r20
 528:	37 95       	ror	r19
 52a:	27 95       	ror	r18
 52c:	a7 95       	ror	r26
 52e:	f0 40       	sbci	r31, 0x00	; 0
 530:	53 95       	inc	r21
 532:	c9 f7       	brne	.-14     	; 0x526 <__addsf3x+0x52>
 534:	7e f4       	brtc	.+30     	; 0x554 <__addsf3x+0x80>
 536:	1f 16       	cp	r1, r31
 538:	ba 0b       	sbc	r27, r26
 53a:	62 0b       	sbc	r22, r18
 53c:	73 0b       	sbc	r23, r19
 53e:	84 0b       	sbc	r24, r20
 540:	ba f0       	brmi	.+46     	; 0x570 <__addsf3x+0x9c>
 542:	91 50       	subi	r25, 0x01	; 1
 544:	a1 f0       	breq	.+40     	; 0x56e <__addsf3x+0x9a>
 546:	ff 0f       	add	r31, r31
 548:	bb 1f       	adc	r27, r27
 54a:	66 1f       	adc	r22, r22
 54c:	77 1f       	adc	r23, r23
 54e:	88 1f       	adc	r24, r24
 550:	c2 f7       	brpl	.-16     	; 0x542 <__addsf3x+0x6e>
 552:	0e c0       	rjmp	.+28     	; 0x570 <__addsf3x+0x9c>
 554:	ba 0f       	add	r27, r26
 556:	62 1f       	adc	r22, r18
 558:	73 1f       	adc	r23, r19
 55a:	84 1f       	adc	r24, r20
 55c:	48 f4       	brcc	.+18     	; 0x570 <__addsf3x+0x9c>
 55e:	87 95       	ror	r24
 560:	77 95       	ror	r23
 562:	67 95       	ror	r22
 564:	b7 95       	ror	r27
 566:	f7 95       	ror	r31
 568:	9e 3f       	cpi	r25, 0xFE	; 254
 56a:	08 f0       	brcs	.+2      	; 0x56e <__addsf3x+0x9a>
 56c:	b0 cf       	rjmp	.-160    	; 0x4ce <__addsf3+0x28>
 56e:	93 95       	inc	r25
 570:	88 0f       	add	r24, r24
 572:	08 f0       	brcs	.+2      	; 0x576 <__addsf3x+0xa2>
 574:	99 27       	eor	r25, r25
 576:	ee 0f       	add	r30, r30
 578:	97 95       	ror	r25
 57a:	87 95       	ror	r24
 57c:	08 95       	ret

0000057e <__fixunssfsi>:
 57e:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <__fp_splitA>
 582:	88 f0       	brcs	.+34     	; 0x5a6 <__fixunssfsi+0x28>
 584:	9f 57       	subi	r25, 0x7F	; 127
 586:	98 f0       	brcs	.+38     	; 0x5ae <__fixunssfsi+0x30>
 588:	b9 2f       	mov	r27, r25
 58a:	99 27       	eor	r25, r25
 58c:	b7 51       	subi	r27, 0x17	; 23
 58e:	b0 f0       	brcs	.+44     	; 0x5bc <__fixunssfsi+0x3e>
 590:	e1 f0       	breq	.+56     	; 0x5ca <__fixunssfsi+0x4c>
 592:	66 0f       	add	r22, r22
 594:	77 1f       	adc	r23, r23
 596:	88 1f       	adc	r24, r24
 598:	99 1f       	adc	r25, r25
 59a:	1a f0       	brmi	.+6      	; 0x5a2 <__fixunssfsi+0x24>
 59c:	ba 95       	dec	r27
 59e:	c9 f7       	brne	.-14     	; 0x592 <__fixunssfsi+0x14>
 5a0:	14 c0       	rjmp	.+40     	; 0x5ca <__fixunssfsi+0x4c>
 5a2:	b1 30       	cpi	r27, 0x01	; 1
 5a4:	91 f0       	breq	.+36     	; 0x5ca <__fixunssfsi+0x4c>
 5a6:	0e 94 75 03 	call	0x6ea	; 0x6ea <__fp_zero>
 5aa:	b1 e0       	ldi	r27, 0x01	; 1
 5ac:	08 95       	ret
 5ae:	0c 94 75 03 	jmp	0x6ea	; 0x6ea <__fp_zero>
 5b2:	67 2f       	mov	r22, r23
 5b4:	78 2f       	mov	r23, r24
 5b6:	88 27       	eor	r24, r24
 5b8:	b8 5f       	subi	r27, 0xF8	; 248
 5ba:	39 f0       	breq	.+14     	; 0x5ca <__fixunssfsi+0x4c>
 5bc:	b9 3f       	cpi	r27, 0xF9	; 249
 5be:	cc f3       	brlt	.-14     	; 0x5b2 <__fixunssfsi+0x34>
 5c0:	86 95       	lsr	r24
 5c2:	77 95       	ror	r23
 5c4:	67 95       	ror	r22
 5c6:	b3 95       	inc	r27
 5c8:	d9 f7       	brne	.-10     	; 0x5c0 <__fixunssfsi+0x42>
 5ca:	3e f4       	brtc	.+14     	; 0x5da <__fixunssfsi+0x5c>
 5cc:	90 95       	com	r25
 5ce:	80 95       	com	r24
 5d0:	70 95       	com	r23
 5d2:	61 95       	neg	r22
 5d4:	7f 4f       	sbci	r23, 0xFF	; 255
 5d6:	8f 4f       	sbci	r24, 0xFF	; 255
 5d8:	9f 4f       	sbci	r25, 0xFF	; 255
 5da:	08 95       	ret

000005dc <__floatunsisf>:
 5dc:	e8 94       	clt
 5de:	09 c0       	rjmp	.+18     	; 0x5f2 <__floatsisf+0x12>

000005e0 <__floatsisf>:
 5e0:	97 fb       	bst	r25, 7
 5e2:	3e f4       	brtc	.+14     	; 0x5f2 <__floatsisf+0x12>
 5e4:	90 95       	com	r25
 5e6:	80 95       	com	r24
 5e8:	70 95       	com	r23
 5ea:	61 95       	neg	r22
 5ec:	7f 4f       	sbci	r23, 0xFF	; 255
 5ee:	8f 4f       	sbci	r24, 0xFF	; 255
 5f0:	9f 4f       	sbci	r25, 0xFF	; 255
 5f2:	99 23       	and	r25, r25
 5f4:	a9 f0       	breq	.+42     	; 0x620 <__floatsisf+0x40>
 5f6:	f9 2f       	mov	r31, r25
 5f8:	96 e9       	ldi	r25, 0x96	; 150
 5fa:	bb 27       	eor	r27, r27
 5fc:	93 95       	inc	r25
 5fe:	f6 95       	lsr	r31
 600:	87 95       	ror	r24
 602:	77 95       	ror	r23
 604:	67 95       	ror	r22
 606:	b7 95       	ror	r27
 608:	f1 11       	cpse	r31, r1
 60a:	f8 cf       	rjmp	.-16     	; 0x5fc <__floatsisf+0x1c>
 60c:	fa f4       	brpl	.+62     	; 0x64c <__floatsisf+0x6c>
 60e:	bb 0f       	add	r27, r27
 610:	11 f4       	brne	.+4      	; 0x616 <__floatsisf+0x36>
 612:	60 ff       	sbrs	r22, 0
 614:	1b c0       	rjmp	.+54     	; 0x64c <__floatsisf+0x6c>
 616:	6f 5f       	subi	r22, 0xFF	; 255
 618:	7f 4f       	sbci	r23, 0xFF	; 255
 61a:	8f 4f       	sbci	r24, 0xFF	; 255
 61c:	9f 4f       	sbci	r25, 0xFF	; 255
 61e:	16 c0       	rjmp	.+44     	; 0x64c <__floatsisf+0x6c>
 620:	88 23       	and	r24, r24
 622:	11 f0       	breq	.+4      	; 0x628 <__floatsisf+0x48>
 624:	96 e9       	ldi	r25, 0x96	; 150
 626:	11 c0       	rjmp	.+34     	; 0x64a <__floatsisf+0x6a>
 628:	77 23       	and	r23, r23
 62a:	21 f0       	breq	.+8      	; 0x634 <__floatsisf+0x54>
 62c:	9e e8       	ldi	r25, 0x8E	; 142
 62e:	87 2f       	mov	r24, r23
 630:	76 2f       	mov	r23, r22
 632:	05 c0       	rjmp	.+10     	; 0x63e <__floatsisf+0x5e>
 634:	66 23       	and	r22, r22
 636:	71 f0       	breq	.+28     	; 0x654 <__floatsisf+0x74>
 638:	96 e8       	ldi	r25, 0x86	; 134
 63a:	86 2f       	mov	r24, r22
 63c:	70 e0       	ldi	r23, 0x00	; 0
 63e:	60 e0       	ldi	r22, 0x00	; 0
 640:	2a f0       	brmi	.+10     	; 0x64c <__floatsisf+0x6c>
 642:	9a 95       	dec	r25
 644:	66 0f       	add	r22, r22
 646:	77 1f       	adc	r23, r23
 648:	88 1f       	adc	r24, r24
 64a:	da f7       	brpl	.-10     	; 0x642 <__floatsisf+0x62>
 64c:	88 0f       	add	r24, r24
 64e:	96 95       	lsr	r25
 650:	87 95       	ror	r24
 652:	97 f9       	bld	r25, 7
 654:	08 95       	ret

00000656 <__fp_inf>:
 656:	97 f9       	bld	r25, 7
 658:	9f 67       	ori	r25, 0x7F	; 127
 65a:	80 e8       	ldi	r24, 0x80	; 128
 65c:	70 e0       	ldi	r23, 0x00	; 0
 65e:	60 e0       	ldi	r22, 0x00	; 0
 660:	08 95       	ret

00000662 <__fp_nan>:
 662:	9f ef       	ldi	r25, 0xFF	; 255
 664:	80 ec       	ldi	r24, 0xC0	; 192
 666:	08 95       	ret

00000668 <__fp_pscA>:
 668:	00 24       	eor	r0, r0
 66a:	0a 94       	dec	r0
 66c:	16 16       	cp	r1, r22
 66e:	17 06       	cpc	r1, r23
 670:	18 06       	cpc	r1, r24
 672:	09 06       	cpc	r0, r25
 674:	08 95       	ret

00000676 <__fp_pscB>:
 676:	00 24       	eor	r0, r0
 678:	0a 94       	dec	r0
 67a:	12 16       	cp	r1, r18
 67c:	13 06       	cpc	r1, r19
 67e:	14 06       	cpc	r1, r20
 680:	05 06       	cpc	r0, r21
 682:	08 95       	ret

00000684 <__fp_round>:
 684:	09 2e       	mov	r0, r25
 686:	03 94       	inc	r0
 688:	00 0c       	add	r0, r0
 68a:	11 f4       	brne	.+4      	; 0x690 <__fp_round+0xc>
 68c:	88 23       	and	r24, r24
 68e:	52 f0       	brmi	.+20     	; 0x6a4 <__fp_round+0x20>
 690:	bb 0f       	add	r27, r27
 692:	40 f4       	brcc	.+16     	; 0x6a4 <__fp_round+0x20>
 694:	bf 2b       	or	r27, r31
 696:	11 f4       	brne	.+4      	; 0x69c <__fp_round+0x18>
 698:	60 ff       	sbrs	r22, 0
 69a:	04 c0       	rjmp	.+8      	; 0x6a4 <__fp_round+0x20>
 69c:	6f 5f       	subi	r22, 0xFF	; 255
 69e:	7f 4f       	sbci	r23, 0xFF	; 255
 6a0:	8f 4f       	sbci	r24, 0xFF	; 255
 6a2:	9f 4f       	sbci	r25, 0xFF	; 255
 6a4:	08 95       	ret

000006a6 <__fp_split3>:
 6a6:	57 fd       	sbrc	r21, 7
 6a8:	90 58       	subi	r25, 0x80	; 128
 6aa:	44 0f       	add	r20, r20
 6ac:	55 1f       	adc	r21, r21
 6ae:	59 f0       	breq	.+22     	; 0x6c6 <__fp_splitA+0x10>
 6b0:	5f 3f       	cpi	r21, 0xFF	; 255
 6b2:	71 f0       	breq	.+28     	; 0x6d0 <__fp_splitA+0x1a>
 6b4:	47 95       	ror	r20

000006b6 <__fp_splitA>:
 6b6:	88 0f       	add	r24, r24
 6b8:	97 fb       	bst	r25, 7
 6ba:	99 1f       	adc	r25, r25
 6bc:	61 f0       	breq	.+24     	; 0x6d6 <__fp_splitA+0x20>
 6be:	9f 3f       	cpi	r25, 0xFF	; 255
 6c0:	79 f0       	breq	.+30     	; 0x6e0 <__fp_splitA+0x2a>
 6c2:	87 95       	ror	r24
 6c4:	08 95       	ret
 6c6:	12 16       	cp	r1, r18
 6c8:	13 06       	cpc	r1, r19
 6ca:	14 06       	cpc	r1, r20
 6cc:	55 1f       	adc	r21, r21
 6ce:	f2 cf       	rjmp	.-28     	; 0x6b4 <__fp_split3+0xe>
 6d0:	46 95       	lsr	r20
 6d2:	f1 df       	rcall	.-30     	; 0x6b6 <__fp_splitA>
 6d4:	08 c0       	rjmp	.+16     	; 0x6e6 <__fp_splitA+0x30>
 6d6:	16 16       	cp	r1, r22
 6d8:	17 06       	cpc	r1, r23
 6da:	18 06       	cpc	r1, r24
 6dc:	99 1f       	adc	r25, r25
 6de:	f1 cf       	rjmp	.-30     	; 0x6c2 <__fp_splitA+0xc>
 6e0:	86 95       	lsr	r24
 6e2:	71 05       	cpc	r23, r1
 6e4:	61 05       	cpc	r22, r1
 6e6:	08 94       	sec
 6e8:	08 95       	ret

000006ea <__fp_zero>:
 6ea:	e8 94       	clt

000006ec <__fp_szero>:
 6ec:	bb 27       	eor	r27, r27
 6ee:	66 27       	eor	r22, r22
 6f0:	77 27       	eor	r23, r23
 6f2:	cb 01       	movw	r24, r22
 6f4:	97 f9       	bld	r25, 7
 6f6:	08 95       	ret

000006f8 <__mulsf3>:
 6f8:	0e 94 8f 03 	call	0x71e	; 0x71e <__mulsf3x>
 6fc:	0c 94 42 03 	jmp	0x684	; 0x684 <__fp_round>
 700:	0e 94 34 03 	call	0x668	; 0x668 <__fp_pscA>
 704:	38 f0       	brcs	.+14     	; 0x714 <__mulsf3+0x1c>
 706:	0e 94 3b 03 	call	0x676	; 0x676 <__fp_pscB>
 70a:	20 f0       	brcs	.+8      	; 0x714 <__mulsf3+0x1c>
 70c:	95 23       	and	r25, r21
 70e:	11 f0       	breq	.+4      	; 0x714 <__mulsf3+0x1c>
 710:	0c 94 2b 03 	jmp	0x656	; 0x656 <__fp_inf>
 714:	0c 94 31 03 	jmp	0x662	; 0x662 <__fp_nan>
 718:	11 24       	eor	r1, r1
 71a:	0c 94 76 03 	jmp	0x6ec	; 0x6ec <__fp_szero>

0000071e <__mulsf3x>:
 71e:	0e 94 53 03 	call	0x6a6	; 0x6a6 <__fp_split3>
 722:	70 f3       	brcs	.-36     	; 0x700 <__mulsf3+0x8>

00000724 <__mulsf3_pse>:
 724:	95 9f       	mul	r25, r21
 726:	c1 f3       	breq	.-16     	; 0x718 <__mulsf3+0x20>
 728:	95 0f       	add	r25, r21
 72a:	50 e0       	ldi	r21, 0x00	; 0
 72c:	55 1f       	adc	r21, r21
 72e:	62 9f       	mul	r22, r18
 730:	f0 01       	movw	r30, r0
 732:	72 9f       	mul	r23, r18
 734:	bb 27       	eor	r27, r27
 736:	f0 0d       	add	r31, r0
 738:	b1 1d       	adc	r27, r1
 73a:	63 9f       	mul	r22, r19
 73c:	aa 27       	eor	r26, r26
 73e:	f0 0d       	add	r31, r0
 740:	b1 1d       	adc	r27, r1
 742:	aa 1f       	adc	r26, r26
 744:	64 9f       	mul	r22, r20
 746:	66 27       	eor	r22, r22
 748:	b0 0d       	add	r27, r0
 74a:	a1 1d       	adc	r26, r1
 74c:	66 1f       	adc	r22, r22
 74e:	82 9f       	mul	r24, r18
 750:	22 27       	eor	r18, r18
 752:	b0 0d       	add	r27, r0
 754:	a1 1d       	adc	r26, r1
 756:	62 1f       	adc	r22, r18
 758:	73 9f       	mul	r23, r19
 75a:	b0 0d       	add	r27, r0
 75c:	a1 1d       	adc	r26, r1
 75e:	62 1f       	adc	r22, r18
 760:	83 9f       	mul	r24, r19
 762:	a0 0d       	add	r26, r0
 764:	61 1d       	adc	r22, r1
 766:	22 1f       	adc	r18, r18
 768:	74 9f       	mul	r23, r20
 76a:	33 27       	eor	r19, r19
 76c:	a0 0d       	add	r26, r0
 76e:	61 1d       	adc	r22, r1
 770:	23 1f       	adc	r18, r19
 772:	84 9f       	mul	r24, r20
 774:	60 0d       	add	r22, r0
 776:	21 1d       	adc	r18, r1
 778:	82 2f       	mov	r24, r18
 77a:	76 2f       	mov	r23, r22
 77c:	6a 2f       	mov	r22, r26
 77e:	11 24       	eor	r1, r1
 780:	9f 57       	subi	r25, 0x7F	; 127
 782:	50 40       	sbci	r21, 0x00	; 0
 784:	9a f0       	brmi	.+38     	; 0x7ac <__mulsf3_pse+0x88>
 786:	f1 f0       	breq	.+60     	; 0x7c4 <__mulsf3_pse+0xa0>
 788:	88 23       	and	r24, r24
 78a:	4a f0       	brmi	.+18     	; 0x79e <__mulsf3_pse+0x7a>
 78c:	ee 0f       	add	r30, r30
 78e:	ff 1f       	adc	r31, r31
 790:	bb 1f       	adc	r27, r27
 792:	66 1f       	adc	r22, r22
 794:	77 1f       	adc	r23, r23
 796:	88 1f       	adc	r24, r24
 798:	91 50       	subi	r25, 0x01	; 1
 79a:	50 40       	sbci	r21, 0x00	; 0
 79c:	a9 f7       	brne	.-22     	; 0x788 <__mulsf3_pse+0x64>
 79e:	9e 3f       	cpi	r25, 0xFE	; 254
 7a0:	51 05       	cpc	r21, r1
 7a2:	80 f0       	brcs	.+32     	; 0x7c4 <__mulsf3_pse+0xa0>
 7a4:	0c 94 2b 03 	jmp	0x656	; 0x656 <__fp_inf>
 7a8:	0c 94 76 03 	jmp	0x6ec	; 0x6ec <__fp_szero>
 7ac:	5f 3f       	cpi	r21, 0xFF	; 255
 7ae:	e4 f3       	brlt	.-8      	; 0x7a8 <__mulsf3_pse+0x84>
 7b0:	98 3e       	cpi	r25, 0xE8	; 232
 7b2:	d4 f3       	brlt	.-12     	; 0x7a8 <__mulsf3_pse+0x84>
 7b4:	86 95       	lsr	r24
 7b6:	77 95       	ror	r23
 7b8:	67 95       	ror	r22
 7ba:	b7 95       	ror	r27
 7bc:	f7 95       	ror	r31
 7be:	e7 95       	ror	r30
 7c0:	9f 5f       	subi	r25, 0xFF	; 255
 7c2:	c1 f7       	brne	.-16     	; 0x7b4 <__mulsf3_pse+0x90>
 7c4:	fe 2b       	or	r31, r30
 7c6:	88 0f       	add	r24, r24
 7c8:	91 1d       	adc	r25, r1
 7ca:	96 95       	lsr	r25
 7cc:	87 95       	ror	r24
 7ce:	97 f9       	bld	r25, 7
 7d0:	08 95       	ret

000007d2 <_exit>:
 7d2:	f8 94       	cli

000007d4 <__stop_program>:
 7d4:	ff cf       	rjmp	.-2      	; 0x7d4 <__stop_program>
