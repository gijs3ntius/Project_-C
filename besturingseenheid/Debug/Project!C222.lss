
Project!C222.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000006f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000067c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000027  00800100  00800100  000006f0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006f0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000720  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  00000760  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001306  00000000  00000000  000008a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b64  00000000  00000000  00001ba6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000aa6  00000000  00000000  0000270a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000026c  00000000  00000000  000031b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006a2  00000000  00000000  0000341c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006e9  00000000  00000000  00003abe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  000041a7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e7       	ldi	r30, 0x7C	; 124
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 32       	cpi	r26, 0x27	; 39
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 1c 01 	call	0x238	; 0x238 <main>
  9e:	0c 94 3c 03 	jmp	0x678	; 0x678 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SCH_Add_Task>:
  a6:	0f 93       	push	r16
  a8:	1f 93       	push	r17
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
  ae:	8c 01       	movw	r16, r24
  b0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <SCH_tasks_G>
  b4:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <SCH_tasks_G+0x1>
  b8:	89 2b       	or	r24, r25
  ba:	81 f0       	breq	.+32     	; 0xdc <SCH_Add_Task+0x36>
  bc:	e1 e0       	ldi	r30, 0x01	; 1
  be:	f1 e0       	ldi	r31, 0x01	; 1
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	82 2f       	mov	r24, r18
  c6:	e9 01       	movw	r28, r18
  c8:	a7 81       	ldd	r26, Z+7	; 0x07
  ca:	b0 85       	ldd	r27, Z+8	; 0x08
  cc:	2f 5f       	subi	r18, 0xFF	; 255
  ce:	3f 4f       	sbci	r19, 0xFF	; 255
  d0:	37 96       	adiw	r30, 0x07	; 7
  d2:	ab 2b       	or	r26, r27
  d4:	b9 f7       	brne	.-18     	; 0xc4 <SCH_Add_Task+0x1e>
  d6:	85 30       	cpi	r24, 0x05	; 5
  d8:	21 f4       	brne	.+8      	; 0xe2 <SCH_Add_Task+0x3c>
  da:	15 c0       	rjmp	.+42     	; 0x106 <SCH_Add_Task+0x60>
  dc:	c0 e0       	ldi	r28, 0x00	; 0
  de:	d0 e0       	ldi	r29, 0x00	; 0
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	fe 01       	movw	r30, r28
  e4:	ee 0f       	add	r30, r30
  e6:	ff 1f       	adc	r31, r31
  e8:	ee 0f       	add	r30, r30
  ea:	ff 1f       	adc	r31, r31
  ec:	ee 0f       	add	r30, r30
  ee:	ff 1f       	adc	r31, r31
  f0:	ec 1b       	sub	r30, r28
  f2:	fd 0b       	sbc	r31, r29
  f4:	ef 5f       	subi	r30, 0xFF	; 255
  f6:	fe 4f       	sbci	r31, 0xFE	; 254
  f8:	11 83       	std	Z+1, r17	; 0x01
  fa:	00 83       	st	Z, r16
  fc:	73 83       	std	Z+3, r23	; 0x03
  fe:	62 83       	std	Z+2, r22	; 0x02
 100:	55 83       	std	Z+5, r21	; 0x05
 102:	44 83       	std	Z+4, r20	; 0x04
 104:	16 82       	std	Z+6, r1	; 0x06
 106:	df 91       	pop	r29
 108:	cf 91       	pop	r28
 10a:	1f 91       	pop	r17
 10c:	0f 91       	pop	r16
 10e:	08 95       	ret

00000110 <SCH_Delete_Task>:
 110:	27 e0       	ldi	r18, 0x07	; 7
 112:	82 9f       	mul	r24, r18
 114:	c0 01       	movw	r24, r0
 116:	11 24       	eor	r1, r1
 118:	fc 01       	movw	r30, r24
 11a:	ef 5f       	subi	r30, 0xFF	; 255
 11c:	fe 4f       	sbci	r31, 0xFE	; 254
 11e:	11 82       	std	Z+1, r1	; 0x01
 120:	10 82       	st	Z, r1
 122:	13 82       	std	Z+3, r1	; 0x03
 124:	12 82       	std	Z+2, r1	; 0x02
 126:	15 82       	std	Z+5, r1	; 0x05
 128:	14 82       	std	Z+4, r1	; 0x04
 12a:	16 82       	std	Z+6, r1	; 0x06
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	08 95       	ret

00000130 <SCH_Dispatch_Tasks>:
 130:	ef 92       	push	r14
 132:	ff 92       	push	r15
 134:	1f 93       	push	r17
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	c1 e0       	ldi	r28, 0x01	; 1
 13c:	d1 e0       	ldi	r29, 0x01	; 1
 13e:	10 e0       	ldi	r17, 0x00	; 0
 140:	8e 81       	ldd	r24, Y+6	; 0x06
 142:	88 23       	and	r24, r24
 144:	79 f0       	breq	.+30     	; 0x164 <SCH_Dispatch_Tasks+0x34>
 146:	e8 81       	ld	r30, Y
 148:	f9 81       	ldd	r31, Y+1	; 0x01
 14a:	30 97       	sbiw	r30, 0x00	; 0
 14c:	59 f0       	breq	.+22     	; 0x164 <SCH_Dispatch_Tasks+0x34>
 14e:	09 95       	icall
 150:	8e 81       	ldd	r24, Y+6	; 0x06
 152:	81 50       	subi	r24, 0x01	; 1
 154:	8e 83       	std	Y+6, r24	; 0x06
 156:	8c 81       	ldd	r24, Y+4	; 0x04
 158:	9d 81       	ldd	r25, Y+5	; 0x05
 15a:	89 2b       	or	r24, r25
 15c:	19 f4       	brne	.+6      	; 0x164 <SCH_Dispatch_Tasks+0x34>
 15e:	81 2f       	mov	r24, r17
 160:	0e 94 88 00 	call	0x110	; 0x110 <SCH_Delete_Task>
 164:	1f 5f       	subi	r17, 0xFF	; 255
 166:	27 96       	adiw	r28, 0x07	; 7
 168:	15 30       	cpi	r17, 0x05	; 5
 16a:	51 f7       	brne	.-44     	; 0x140 <SCH_Dispatch_Tasks+0x10>
 16c:	df 91       	pop	r29
 16e:	cf 91       	pop	r28
 170:	1f 91       	pop	r17
 172:	ff 90       	pop	r15
 174:	ef 90       	pop	r14
 176:	08 95       	ret

00000178 <SCH_Init_T1>:
 178:	cf 93       	push	r28
 17a:	c0 e0       	ldi	r28, 0x00	; 0
 17c:	8c 2f       	mov	r24, r28
 17e:	0e 94 88 00 	call	0x110	; 0x110 <SCH_Delete_Task>
 182:	cf 5f       	subi	r28, 0xFF	; 255
 184:	c5 30       	cpi	r28, 0x05	; 5
 186:	d1 f7       	brne	.-12     	; 0x17c <SCH_Init_T1+0x4>
 188:	81 e7       	ldi	r24, 0x71	; 113
 18a:	92 e0       	ldi	r25, 0x02	; 2
 18c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 190:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 194:	8c e0       	ldi	r24, 0x0C	; 12
 196:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 19a:	82 e0       	ldi	r24, 0x02	; 2
 19c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 1a0:	cf 91       	pop	r28
 1a2:	08 95       	ret

000001a4 <SCH_Start>:
 1a4:	78 94       	sei
 1a6:	08 95       	ret

000001a8 <__vector_11>:
 1a8:	1f 92       	push	r1
 1aa:	0f 92       	push	r0
 1ac:	0f b6       	in	r0, 0x3f	; 63
 1ae:	0f 92       	push	r0
 1b0:	11 24       	eor	r1, r1
 1b2:	2f 93       	push	r18
 1b4:	3f 93       	push	r19
 1b6:	8f 93       	push	r24
 1b8:	9f 93       	push	r25
 1ba:	af 93       	push	r26
 1bc:	bf 93       	push	r27
 1be:	ef 93       	push	r30
 1c0:	ff 93       	push	r31
 1c2:	e1 e0       	ldi	r30, 0x01	; 1
 1c4:	f1 e0       	ldi	r31, 0x01	; 1
 1c6:	24 e2       	ldi	r18, 0x24	; 36
 1c8:	31 e0       	ldi	r19, 0x01	; 1
 1ca:	80 81       	ld	r24, Z
 1cc:	91 81       	ldd	r25, Z+1	; 0x01
 1ce:	89 2b       	or	r24, r25
 1d0:	91 f0       	breq	.+36     	; 0x1f6 <__vector_11+0x4e>
 1d2:	82 81       	ldd	r24, Z+2	; 0x02
 1d4:	93 81       	ldd	r25, Z+3	; 0x03
 1d6:	00 97       	sbiw	r24, 0x00	; 0
 1d8:	59 f4       	brne	.+22     	; 0x1f0 <__vector_11+0x48>
 1da:	86 81       	ldd	r24, Z+6	; 0x06
 1dc:	8f 5f       	subi	r24, 0xFF	; 255
 1de:	86 83       	std	Z+6, r24	; 0x06
 1e0:	84 81       	ldd	r24, Z+4	; 0x04
 1e2:	95 81       	ldd	r25, Z+5	; 0x05
 1e4:	00 97       	sbiw	r24, 0x00	; 0
 1e6:	39 f0       	breq	.+14     	; 0x1f6 <__vector_11+0x4e>
 1e8:	01 97       	sbiw	r24, 0x01	; 1
 1ea:	93 83       	std	Z+3, r25	; 0x03
 1ec:	82 83       	std	Z+2, r24	; 0x02
 1ee:	03 c0       	rjmp	.+6      	; 0x1f6 <__vector_11+0x4e>
 1f0:	01 97       	sbiw	r24, 0x01	; 1
 1f2:	93 83       	std	Z+3, r25	; 0x03
 1f4:	82 83       	std	Z+2, r24	; 0x02
 1f6:	37 96       	adiw	r30, 0x07	; 7
 1f8:	e2 17       	cp	r30, r18
 1fa:	f3 07       	cpc	r31, r19
 1fc:	31 f7       	brne	.-52     	; 0x1ca <__vector_11+0x22>
 1fe:	ff 91       	pop	r31
 200:	ef 91       	pop	r30
 202:	bf 91       	pop	r27
 204:	af 91       	pop	r26
 206:	9f 91       	pop	r25
 208:	8f 91       	pop	r24
 20a:	3f 91       	pop	r19
 20c:	2f 91       	pop	r18
 20e:	0f 90       	pop	r0
 210:	0f be       	out	0x3f, r0	; 63
 212:	0f 90       	pop	r0
 214:	1f 90       	pop	r1
 216:	18 95       	reti

00000218 <Distance>:
		rolledInOrOut(2, getMaxRoll());
	}
	
	if (data2 >= getMaxTemp())
	{
		rolledInOrOut(2, getMaxRoll());
 218:	0e 94 2d 01 	call	0x25a	; 0x25a <calcDistance>
 21c:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <data3>
 220:	0e 94 05 02 	call	0x40a	; 0x40a <transmitSerial>
 224:	2f ef       	ldi	r18, 0xFF	; 255
 226:	89 ef       	ldi	r24, 0xF9	; 249
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	21 50       	subi	r18, 0x01	; 1
 22c:	80 40       	sbci	r24, 0x00	; 0
 22e:	90 40       	sbci	r25, 0x00	; 0
 230:	e1 f7       	brne	.-8      	; 0x22a <Distance+0x12>
 232:	00 c0       	rjmp	.+0      	; 0x234 <Distance+0x1c>
 234:	00 00       	nop
 236:	08 95       	ret

00000238 <main>:
	//_delay_ms(1000);
	
	//setDefaultValues();
	
	
	initSerial();
 238:	0e 94 f7 01 	call	0x3ee	; 0x3ee <initSerial>
	
	SCH_Init_T1(); // stel de scheduler in
 23c:	0e 94 bc 00 	call	0x178	; 0x178 <SCH_Init_T1>
	//SCH_Add_Task(Temperature, 0, 200); // temp zit op A1.
	//SCH_Add_Task(Light, 100, 200); // Voeg taken toe aan de scheduler Light zit op A0.
	//SCH_Add_Task(settingsChecker, 200, 200); // misschien om de minuut
	//SCH_Add_Task(serialReactor,0,1);
	
	SCH_Add_Task(Distance, 0, 200);
 240:	48 ec       	ldi	r20, 0xC8	; 200
 242:	50 e0       	ldi	r21, 0x00	; 0
 244:	60 e0       	ldi	r22, 0x00	; 0
 246:	70 e0       	ldi	r23, 0x00	; 0
 248:	8c e0       	ldi	r24, 0x0C	; 12
 24a:	91 e0       	ldi	r25, 0x01	; 1
 24c:	0e 94 53 00 	call	0xa6	; 0xa6 <SCH_Add_Task>
	//SCH_Add_Task(testkutkloteding,100,200);
	
	
	SCH_Start();// start de scheduler 
 250:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <SCH_Start>
	
	
    while (1)
    {
		SCH_Dispatch_Tasks(); // verzend de taken
 254:	0e 94 98 00 	call	0x130	; 0x130 <SCH_Dispatch_Tasks>
 258:	fd cf       	rjmp	.-6      	; 0x254 <main+0x1c>

0000025a <calcDistance>:
#define echoPin 9

uint8_t pulsie = 0;

uint8_t calcDistance()
{
 25a:	cf 93       	push	r28
 25c:	df 93       	push	r29
		
		digital_write(echoPin, LOW);
 25e:	60 e0       	ldi	r22, 0x00	; 0
 260:	70 e0       	ldi	r23, 0x00	; 0
 262:	89 e0       	ldi	r24, 0x09	; 9
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <digital_write>
		digital_write(trigPin, HIGH);
 26a:	61 e0       	ldi	r22, 0x01	; 1
 26c:	70 e0       	ldi	r23, 0x00	; 0
 26e:	88 e0       	ldi	r24, 0x08	; 8
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <digital_write>
	
		int counter = 0;
	
		digital_write(trigPin, LOW); // zorg ervoor dat trigger leeg is!
 276:	60 e0       	ldi	r22, 0x00	; 0
 278:	70 e0       	ldi	r23, 0x00	; 0
 27a:	88 e0       	ldi	r24, 0x08	; 8
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <digital_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 282:	00 c0       	rjmp	.+0      	; 0x284 <calcDistance+0x2a>
		_delay_us(2);
		digital_write(trigPin, HIGH);
 284:	61 e0       	ldi	r22, 0x01	; 1
 286:	70 e0       	ldi	r23, 0x00	; 0
 288:	88 e0       	ldi	r24, 0x08	; 8
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <digital_write>
 290:	83 e0       	ldi	r24, 0x03	; 3
 292:	8a 95       	dec	r24
 294:	f1 f7       	brne	.-4      	; 0x292 <calcDistance+0x38>
 296:	00 00       	nop
		
		_delay_us(10);
		digital_write(trigPin, LOW);
 298:	60 e0       	ldi	r22, 0x00	; 0
 29a:	70 e0       	ldi	r23, 0x00	; 0
 29c:	88 e0       	ldi	r24, 0x08	; 8
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <digital_write>

		//
		while(!digital_read(echoPin)){}
 2a4:	89 e0       	ldi	r24, 0x09	; 9
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	0e 94 c8 01 	call	0x390	; 0x390 <digital_read>
 2ac:	89 2b       	or	r24, r25
 2ae:	d1 f3       	breq	.-12     	; 0x2a4 <calcDistance+0x4a>
 2b0:	c0 e0       	ldi	r28, 0x00	; 0
 2b2:	d0 e0       	ldi	r29, 0x00	; 0
 2b4:	01 c0       	rjmp	.+2      	; 0x2b8 <calcDistance+0x5e>
		
		//
		while(digital_read(echoPin)){
			counter += 1;
 2b6:	21 96       	adiw	r28, 0x01	; 1

		//
		while(!digital_read(echoPin)){}
		
		//
		while(digital_read(echoPin)){
 2b8:	89 e0       	ldi	r24, 0x09	; 9
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	0e 94 c8 01 	call	0x390	; 0x390 <digital_read>
 2c0:	89 2b       	or	r24, r25
 2c2:	c9 f7       	brne	.-14     	; 0x2b6 <calcDistance+0x5c>
			counter += 1;
		}
		
		// Bereken de afstand
		pulsie = (counter >> 2)/ 5.7; // dit hebben we gekalibreerd.
 2c4:	be 01       	movw	r22, r28
 2c6:	75 95       	asr	r23
 2c8:	67 95       	ror	r22
 2ca:	75 95       	asr	r23
 2cc:	67 95       	ror	r22
 2ce:	07 2e       	mov	r0, r23
 2d0:	00 0c       	add	r0, r0
 2d2:	88 0b       	sbc	r24, r24
 2d4:	99 0b       	sbc	r25, r25
 2d6:	0e 94 b0 02 	call	0x560	; 0x560 <__floatsisf>
 2da:	26 e6       	ldi	r18, 0x66	; 102
 2dc:	36 e6       	ldi	r19, 0x66	; 102
 2de:	46 eb       	ldi	r20, 0xB6	; 182
 2e0:	50 e4       	ldi	r21, 0x40	; 64
 2e2:	0e 94 0d 02 	call	0x41a	; 0x41a <__divsf3>
 2e6:	0e 94 7f 02 	call	0x4fe	; 0x4fe <__fixunssfsi>
 2ea:	86 2f       	mov	r24, r22
 2ec:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_end>
		// Bereken de afstand
		
		return pulsie;
	
}
 2f0:	df 91       	pop	r29
 2f2:	cf 91       	pop	r28
 2f4:	08 95       	ret

000002f6 <digital_write>:
 2f6:	88 30       	cpi	r24, 0x08	; 8
 2f8:	91 05       	cpc	r25, r1
 2fa:	ec f4       	brge	.+58     	; 0x336 <digital_write+0x40>
 2fc:	67 2b       	or	r22, r23
 2fe:	71 f4       	brne	.+28     	; 0x31c <digital_write+0x26>
 300:	4b b1       	in	r20, 0x0b	; 11
 302:	21 e0       	ldi	r18, 0x01	; 1
 304:	30 e0       	ldi	r19, 0x00	; 0
 306:	b9 01       	movw	r22, r18
 308:	02 c0       	rjmp	.+4      	; 0x30e <digital_write+0x18>
 30a:	66 0f       	add	r22, r22
 30c:	77 1f       	adc	r23, r23
 30e:	8a 95       	dec	r24
 310:	e2 f7       	brpl	.-8      	; 0x30a <digital_write+0x14>
 312:	cb 01       	movw	r24, r22
 314:	80 95       	com	r24
 316:	84 23       	and	r24, r20
 318:	8b b9       	out	0x0b, r24	; 11
 31a:	08 95       	ret
 31c:	4b b1       	in	r20, 0x0b	; 11
 31e:	21 e0       	ldi	r18, 0x01	; 1
 320:	30 e0       	ldi	r19, 0x00	; 0
 322:	b9 01       	movw	r22, r18
 324:	02 c0       	rjmp	.+4      	; 0x32a <digital_write+0x34>
 326:	66 0f       	add	r22, r22
 328:	77 1f       	adc	r23, r23
 32a:	8a 95       	dec	r24
 32c:	e2 f7       	brpl	.-8      	; 0x326 <digital_write+0x30>
 32e:	cb 01       	movw	r24, r22
 330:	84 2b       	or	r24, r20
 332:	8b b9       	out	0x0b, r24	; 11
 334:	08 95       	ret
 336:	67 2b       	or	r22, r23
 338:	b1 f4       	brne	.+44     	; 0x366 <digital_write+0x70>
 33a:	45 b1       	in	r20, 0x05	; 5
 33c:	87 70       	andi	r24, 0x07	; 7
 33e:	90 78       	andi	r25, 0x80	; 128
 340:	99 23       	and	r25, r25
 342:	24 f4       	brge	.+8      	; 0x34c <digital_write+0x56>
 344:	01 97       	sbiw	r24, 0x01	; 1
 346:	88 6f       	ori	r24, 0xF8	; 248
 348:	9f 6f       	ori	r25, 0xFF	; 255
 34a:	01 96       	adiw	r24, 0x01	; 1
 34c:	21 e0       	ldi	r18, 0x01	; 1
 34e:	30 e0       	ldi	r19, 0x00	; 0
 350:	b9 01       	movw	r22, r18
 352:	02 c0       	rjmp	.+4      	; 0x358 <digital_write+0x62>
 354:	66 0f       	add	r22, r22
 356:	77 1f       	adc	r23, r23
 358:	8a 95       	dec	r24
 35a:	e2 f7       	brpl	.-8      	; 0x354 <digital_write+0x5e>
 35c:	cb 01       	movw	r24, r22
 35e:	80 95       	com	r24
 360:	84 23       	and	r24, r20
 362:	85 b9       	out	0x05, r24	; 5
 364:	08 95       	ret
 366:	45 b1       	in	r20, 0x05	; 5
 368:	87 70       	andi	r24, 0x07	; 7
 36a:	90 78       	andi	r25, 0x80	; 128
 36c:	99 23       	and	r25, r25
 36e:	24 f4       	brge	.+8      	; 0x378 <digital_write+0x82>
 370:	01 97       	sbiw	r24, 0x01	; 1
 372:	88 6f       	ori	r24, 0xF8	; 248
 374:	9f 6f       	ori	r25, 0xFF	; 255
 376:	01 96       	adiw	r24, 0x01	; 1
 378:	21 e0       	ldi	r18, 0x01	; 1
 37a:	30 e0       	ldi	r19, 0x00	; 0
 37c:	b9 01       	movw	r22, r18
 37e:	02 c0       	rjmp	.+4      	; 0x384 <digital_write+0x8e>
 380:	66 0f       	add	r22, r22
 382:	77 1f       	adc	r23, r23
 384:	8a 95       	dec	r24
 386:	e2 f7       	brpl	.-8      	; 0x380 <digital_write+0x8a>
 388:	cb 01       	movw	r24, r22
 38a:	84 2b       	or	r24, r20
 38c:	85 b9       	out	0x05, r24	; 5
 38e:	08 95       	ret

00000390 <digital_read>:
 390:	88 30       	cpi	r24, 0x08	; 8
 392:	91 05       	cpc	r25, r1
 394:	b4 f4       	brge	.+44     	; 0x3c2 <digital_read+0x32>
 396:	29 b1       	in	r18, 0x09	; 9
 398:	87 70       	andi	r24, 0x07	; 7
 39a:	90 78       	andi	r25, 0x80	; 128
 39c:	99 23       	and	r25, r25
 39e:	24 f4       	brge	.+8      	; 0x3a8 <digital_read+0x18>
 3a0:	01 97       	sbiw	r24, 0x01	; 1
 3a2:	88 6f       	ori	r24, 0xF8	; 248
 3a4:	9f 6f       	ori	r25, 0xFF	; 255
 3a6:	01 96       	adiw	r24, 0x01	; 1
 3a8:	41 e0       	ldi	r20, 0x01	; 1
 3aa:	50 e0       	ldi	r21, 0x00	; 0
 3ac:	ba 01       	movw	r22, r20
 3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <digital_read+0x24>
 3b0:	66 0f       	add	r22, r22
 3b2:	77 1f       	adc	r23, r23
 3b4:	8a 95       	dec	r24
 3b6:	e2 f7       	brpl	.-8      	; 0x3b0 <digital_read+0x20>
 3b8:	cb 01       	movw	r24, r22
 3ba:	30 e0       	ldi	r19, 0x00	; 0
 3bc:	82 23       	and	r24, r18
 3be:	93 23       	and	r25, r19
 3c0:	08 95       	ret
 3c2:	23 b1       	in	r18, 0x03	; 3
 3c4:	87 70       	andi	r24, 0x07	; 7
 3c6:	90 78       	andi	r25, 0x80	; 128
 3c8:	99 23       	and	r25, r25
 3ca:	24 f4       	brge	.+8      	; 0x3d4 <digital_read+0x44>
 3cc:	01 97       	sbiw	r24, 0x01	; 1
 3ce:	88 6f       	ori	r24, 0xF8	; 248
 3d0:	9f 6f       	ori	r25, 0xFF	; 255
 3d2:	01 96       	adiw	r24, 0x01	; 1
 3d4:	41 e0       	ldi	r20, 0x01	; 1
 3d6:	50 e0       	ldi	r21, 0x00	; 0
 3d8:	ba 01       	movw	r22, r20
 3da:	02 c0       	rjmp	.+4      	; 0x3e0 <digital_read+0x50>
 3dc:	66 0f       	add	r22, r22
 3de:	77 1f       	adc	r23, r23
 3e0:	8a 95       	dec	r24
 3e2:	e2 f7       	brpl	.-8      	; 0x3dc <digital_read+0x4c>
 3e4:	cb 01       	movw	r24, r22
 3e6:	30 e0       	ldi	r19, 0x00	; 0
 3e8:	82 23       	and	r24, r18
 3ea:	93 23       	and	r25, r19
 3ec:	08 95       	ret

000003ee <initSerial>:
uint8_t receiveSerial() {
	// wait for data to be received
	while ( !(UCSR0A & (1 << RXC0)) );
	// get and return received data from buffer
	return UDR0;
}
 3ee:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 3f2:	83 e3       	ldi	r24, 0x33	; 51
 3f4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 3f8:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 3fc:	88 e1       	ldi	r24, 0x18	; 24
 3fe:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 402:	86 e0       	ldi	r24, 0x06	; 6
 404:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 408:	08 95       	ret

0000040a <transmitSerial>:

void transmitSerial(uint8_t data) {
	// wait for an empty transmit buffer
	// UDRE is set when the transmit buffer is empty
	loop_until_bit_is_set(UCSR0A, UDRE0);
 40a:	e0 ec       	ldi	r30, 0xC0	; 192
 40c:	f0 e0       	ldi	r31, 0x00	; 0
 40e:	90 81       	ld	r25, Z
 410:	95 ff       	sbrs	r25, 5
 412:	fd cf       	rjmp	.-6      	; 0x40e <transmitSerial+0x4>
	// send the data
	UDR0 = data;
 414:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 418:	08 95       	ret

0000041a <__divsf3>:
 41a:	0e 94 21 02 	call	0x442	; 0x442 <__divsf3x>
 41e:	0c 94 02 03 	jmp	0x604	; 0x604 <__fp_round>
 422:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__fp_pscB>
 426:	58 f0       	brcs	.+22     	; 0x43e <__divsf3+0x24>
 428:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <__fp_pscA>
 42c:	40 f0       	brcs	.+16     	; 0x43e <__divsf3+0x24>
 42e:	29 f4       	brne	.+10     	; 0x43a <__divsf3+0x20>
 430:	5f 3f       	cpi	r21, 0xFF	; 255
 432:	29 f0       	breq	.+10     	; 0x43e <__divsf3+0x24>
 434:	0c 94 eb 02 	jmp	0x5d6	; 0x5d6 <__fp_inf>
 438:	51 11       	cpse	r21, r1
 43a:	0c 94 36 03 	jmp	0x66c	; 0x66c <__fp_szero>
 43e:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__fp_nan>

00000442 <__divsf3x>:
 442:	0e 94 13 03 	call	0x626	; 0x626 <__fp_split3>
 446:	68 f3       	brcs	.-38     	; 0x422 <__divsf3+0x8>

00000448 <__divsf3_pse>:
 448:	99 23       	and	r25, r25
 44a:	b1 f3       	breq	.-20     	; 0x438 <__divsf3+0x1e>
 44c:	55 23       	and	r21, r21
 44e:	91 f3       	breq	.-28     	; 0x434 <__divsf3+0x1a>
 450:	95 1b       	sub	r25, r21
 452:	55 0b       	sbc	r21, r21
 454:	bb 27       	eor	r27, r27
 456:	aa 27       	eor	r26, r26
 458:	62 17       	cp	r22, r18
 45a:	73 07       	cpc	r23, r19
 45c:	84 07       	cpc	r24, r20
 45e:	38 f0       	brcs	.+14     	; 0x46e <__divsf3_pse+0x26>
 460:	9f 5f       	subi	r25, 0xFF	; 255
 462:	5f 4f       	sbci	r21, 0xFF	; 255
 464:	22 0f       	add	r18, r18
 466:	33 1f       	adc	r19, r19
 468:	44 1f       	adc	r20, r20
 46a:	aa 1f       	adc	r26, r26
 46c:	a9 f3       	breq	.-22     	; 0x458 <__divsf3_pse+0x10>
 46e:	35 d0       	rcall	.+106    	; 0x4da <__divsf3_pse+0x92>
 470:	0e 2e       	mov	r0, r30
 472:	3a f0       	brmi	.+14     	; 0x482 <__divsf3_pse+0x3a>
 474:	e0 e8       	ldi	r30, 0x80	; 128
 476:	32 d0       	rcall	.+100    	; 0x4dc <__divsf3_pse+0x94>
 478:	91 50       	subi	r25, 0x01	; 1
 47a:	50 40       	sbci	r21, 0x00	; 0
 47c:	e6 95       	lsr	r30
 47e:	00 1c       	adc	r0, r0
 480:	ca f7       	brpl	.-14     	; 0x474 <__divsf3_pse+0x2c>
 482:	2b d0       	rcall	.+86     	; 0x4da <__divsf3_pse+0x92>
 484:	fe 2f       	mov	r31, r30
 486:	29 d0       	rcall	.+82     	; 0x4da <__divsf3_pse+0x92>
 488:	66 0f       	add	r22, r22
 48a:	77 1f       	adc	r23, r23
 48c:	88 1f       	adc	r24, r24
 48e:	bb 1f       	adc	r27, r27
 490:	26 17       	cp	r18, r22
 492:	37 07       	cpc	r19, r23
 494:	48 07       	cpc	r20, r24
 496:	ab 07       	cpc	r26, r27
 498:	b0 e8       	ldi	r27, 0x80	; 128
 49a:	09 f0       	breq	.+2      	; 0x49e <__divsf3_pse+0x56>
 49c:	bb 0b       	sbc	r27, r27
 49e:	80 2d       	mov	r24, r0
 4a0:	bf 01       	movw	r22, r30
 4a2:	ff 27       	eor	r31, r31
 4a4:	93 58       	subi	r25, 0x83	; 131
 4a6:	5f 4f       	sbci	r21, 0xFF	; 255
 4a8:	3a f0       	brmi	.+14     	; 0x4b8 <__divsf3_pse+0x70>
 4aa:	9e 3f       	cpi	r25, 0xFE	; 254
 4ac:	51 05       	cpc	r21, r1
 4ae:	78 f0       	brcs	.+30     	; 0x4ce <__divsf3_pse+0x86>
 4b0:	0c 94 eb 02 	jmp	0x5d6	; 0x5d6 <__fp_inf>
 4b4:	0c 94 36 03 	jmp	0x66c	; 0x66c <__fp_szero>
 4b8:	5f 3f       	cpi	r21, 0xFF	; 255
 4ba:	e4 f3       	brlt	.-8      	; 0x4b4 <__divsf3_pse+0x6c>
 4bc:	98 3e       	cpi	r25, 0xE8	; 232
 4be:	d4 f3       	brlt	.-12     	; 0x4b4 <__divsf3_pse+0x6c>
 4c0:	86 95       	lsr	r24
 4c2:	77 95       	ror	r23
 4c4:	67 95       	ror	r22
 4c6:	b7 95       	ror	r27
 4c8:	f7 95       	ror	r31
 4ca:	9f 5f       	subi	r25, 0xFF	; 255
 4cc:	c9 f7       	brne	.-14     	; 0x4c0 <__divsf3_pse+0x78>
 4ce:	88 0f       	add	r24, r24
 4d0:	91 1d       	adc	r25, r1
 4d2:	96 95       	lsr	r25
 4d4:	87 95       	ror	r24
 4d6:	97 f9       	bld	r25, 7
 4d8:	08 95       	ret
 4da:	e1 e0       	ldi	r30, 0x01	; 1
 4dc:	66 0f       	add	r22, r22
 4de:	77 1f       	adc	r23, r23
 4e0:	88 1f       	adc	r24, r24
 4e2:	bb 1f       	adc	r27, r27
 4e4:	62 17       	cp	r22, r18
 4e6:	73 07       	cpc	r23, r19
 4e8:	84 07       	cpc	r24, r20
 4ea:	ba 07       	cpc	r27, r26
 4ec:	20 f0       	brcs	.+8      	; 0x4f6 <__divsf3_pse+0xae>
 4ee:	62 1b       	sub	r22, r18
 4f0:	73 0b       	sbc	r23, r19
 4f2:	84 0b       	sbc	r24, r20
 4f4:	ba 0b       	sbc	r27, r26
 4f6:	ee 1f       	adc	r30, r30
 4f8:	88 f7       	brcc	.-30     	; 0x4dc <__divsf3_pse+0x94>
 4fa:	e0 95       	com	r30
 4fc:	08 95       	ret

000004fe <__fixunssfsi>:
 4fe:	0e 94 1b 03 	call	0x636	; 0x636 <__fp_splitA>
 502:	88 f0       	brcs	.+34     	; 0x526 <__fixunssfsi+0x28>
 504:	9f 57       	subi	r25, 0x7F	; 127
 506:	98 f0       	brcs	.+38     	; 0x52e <__fixunssfsi+0x30>
 508:	b9 2f       	mov	r27, r25
 50a:	99 27       	eor	r25, r25
 50c:	b7 51       	subi	r27, 0x17	; 23
 50e:	b0 f0       	brcs	.+44     	; 0x53c <__fixunssfsi+0x3e>
 510:	e1 f0       	breq	.+56     	; 0x54a <__fixunssfsi+0x4c>
 512:	66 0f       	add	r22, r22
 514:	77 1f       	adc	r23, r23
 516:	88 1f       	adc	r24, r24
 518:	99 1f       	adc	r25, r25
 51a:	1a f0       	brmi	.+6      	; 0x522 <__fixunssfsi+0x24>
 51c:	ba 95       	dec	r27
 51e:	c9 f7       	brne	.-14     	; 0x512 <__fixunssfsi+0x14>
 520:	14 c0       	rjmp	.+40     	; 0x54a <__fixunssfsi+0x4c>
 522:	b1 30       	cpi	r27, 0x01	; 1
 524:	91 f0       	breq	.+36     	; 0x54a <__fixunssfsi+0x4c>
 526:	0e 94 35 03 	call	0x66a	; 0x66a <__fp_zero>
 52a:	b1 e0       	ldi	r27, 0x01	; 1
 52c:	08 95       	ret
 52e:	0c 94 35 03 	jmp	0x66a	; 0x66a <__fp_zero>
 532:	67 2f       	mov	r22, r23
 534:	78 2f       	mov	r23, r24
 536:	88 27       	eor	r24, r24
 538:	b8 5f       	subi	r27, 0xF8	; 248
 53a:	39 f0       	breq	.+14     	; 0x54a <__fixunssfsi+0x4c>
 53c:	b9 3f       	cpi	r27, 0xF9	; 249
 53e:	cc f3       	brlt	.-14     	; 0x532 <__fixunssfsi+0x34>
 540:	86 95       	lsr	r24
 542:	77 95       	ror	r23
 544:	67 95       	ror	r22
 546:	b3 95       	inc	r27
 548:	d9 f7       	brne	.-10     	; 0x540 <__fixunssfsi+0x42>
 54a:	3e f4       	brtc	.+14     	; 0x55a <__fixunssfsi+0x5c>
 54c:	90 95       	com	r25
 54e:	80 95       	com	r24
 550:	70 95       	com	r23
 552:	61 95       	neg	r22
 554:	7f 4f       	sbci	r23, 0xFF	; 255
 556:	8f 4f       	sbci	r24, 0xFF	; 255
 558:	9f 4f       	sbci	r25, 0xFF	; 255
 55a:	08 95       	ret

0000055c <__floatunsisf>:
 55c:	e8 94       	clt
 55e:	09 c0       	rjmp	.+18     	; 0x572 <__floatsisf+0x12>

00000560 <__floatsisf>:
 560:	97 fb       	bst	r25, 7
 562:	3e f4       	brtc	.+14     	; 0x572 <__floatsisf+0x12>
 564:	90 95       	com	r25
 566:	80 95       	com	r24
 568:	70 95       	com	r23
 56a:	61 95       	neg	r22
 56c:	7f 4f       	sbci	r23, 0xFF	; 255
 56e:	8f 4f       	sbci	r24, 0xFF	; 255
 570:	9f 4f       	sbci	r25, 0xFF	; 255
 572:	99 23       	and	r25, r25
 574:	a9 f0       	breq	.+42     	; 0x5a0 <__floatsisf+0x40>
 576:	f9 2f       	mov	r31, r25
 578:	96 e9       	ldi	r25, 0x96	; 150
 57a:	bb 27       	eor	r27, r27
 57c:	93 95       	inc	r25
 57e:	f6 95       	lsr	r31
 580:	87 95       	ror	r24
 582:	77 95       	ror	r23
 584:	67 95       	ror	r22
 586:	b7 95       	ror	r27
 588:	f1 11       	cpse	r31, r1
 58a:	f8 cf       	rjmp	.-16     	; 0x57c <__floatsisf+0x1c>
 58c:	fa f4       	brpl	.+62     	; 0x5cc <__floatsisf+0x6c>
 58e:	bb 0f       	add	r27, r27
 590:	11 f4       	brne	.+4      	; 0x596 <__floatsisf+0x36>
 592:	60 ff       	sbrs	r22, 0
 594:	1b c0       	rjmp	.+54     	; 0x5cc <__floatsisf+0x6c>
 596:	6f 5f       	subi	r22, 0xFF	; 255
 598:	7f 4f       	sbci	r23, 0xFF	; 255
 59a:	8f 4f       	sbci	r24, 0xFF	; 255
 59c:	9f 4f       	sbci	r25, 0xFF	; 255
 59e:	16 c0       	rjmp	.+44     	; 0x5cc <__floatsisf+0x6c>
 5a0:	88 23       	and	r24, r24
 5a2:	11 f0       	breq	.+4      	; 0x5a8 <__floatsisf+0x48>
 5a4:	96 e9       	ldi	r25, 0x96	; 150
 5a6:	11 c0       	rjmp	.+34     	; 0x5ca <__floatsisf+0x6a>
 5a8:	77 23       	and	r23, r23
 5aa:	21 f0       	breq	.+8      	; 0x5b4 <__floatsisf+0x54>
 5ac:	9e e8       	ldi	r25, 0x8E	; 142
 5ae:	87 2f       	mov	r24, r23
 5b0:	76 2f       	mov	r23, r22
 5b2:	05 c0       	rjmp	.+10     	; 0x5be <__floatsisf+0x5e>
 5b4:	66 23       	and	r22, r22
 5b6:	71 f0       	breq	.+28     	; 0x5d4 <__floatsisf+0x74>
 5b8:	96 e8       	ldi	r25, 0x86	; 134
 5ba:	86 2f       	mov	r24, r22
 5bc:	70 e0       	ldi	r23, 0x00	; 0
 5be:	60 e0       	ldi	r22, 0x00	; 0
 5c0:	2a f0       	brmi	.+10     	; 0x5cc <__floatsisf+0x6c>
 5c2:	9a 95       	dec	r25
 5c4:	66 0f       	add	r22, r22
 5c6:	77 1f       	adc	r23, r23
 5c8:	88 1f       	adc	r24, r24
 5ca:	da f7       	brpl	.-10     	; 0x5c2 <__floatsisf+0x62>
 5cc:	88 0f       	add	r24, r24
 5ce:	96 95       	lsr	r25
 5d0:	87 95       	ror	r24
 5d2:	97 f9       	bld	r25, 7
 5d4:	08 95       	ret

000005d6 <__fp_inf>:
 5d6:	97 f9       	bld	r25, 7
 5d8:	9f 67       	ori	r25, 0x7F	; 127
 5da:	80 e8       	ldi	r24, 0x80	; 128
 5dc:	70 e0       	ldi	r23, 0x00	; 0
 5de:	60 e0       	ldi	r22, 0x00	; 0
 5e0:	08 95       	ret

000005e2 <__fp_nan>:
 5e2:	9f ef       	ldi	r25, 0xFF	; 255
 5e4:	80 ec       	ldi	r24, 0xC0	; 192
 5e6:	08 95       	ret

000005e8 <__fp_pscA>:
 5e8:	00 24       	eor	r0, r0
 5ea:	0a 94       	dec	r0
 5ec:	16 16       	cp	r1, r22
 5ee:	17 06       	cpc	r1, r23
 5f0:	18 06       	cpc	r1, r24
 5f2:	09 06       	cpc	r0, r25
 5f4:	08 95       	ret

000005f6 <__fp_pscB>:
 5f6:	00 24       	eor	r0, r0
 5f8:	0a 94       	dec	r0
 5fa:	12 16       	cp	r1, r18
 5fc:	13 06       	cpc	r1, r19
 5fe:	14 06       	cpc	r1, r20
 600:	05 06       	cpc	r0, r21
 602:	08 95       	ret

00000604 <__fp_round>:
 604:	09 2e       	mov	r0, r25
 606:	03 94       	inc	r0
 608:	00 0c       	add	r0, r0
 60a:	11 f4       	brne	.+4      	; 0x610 <__fp_round+0xc>
 60c:	88 23       	and	r24, r24
 60e:	52 f0       	brmi	.+20     	; 0x624 <__fp_round+0x20>
 610:	bb 0f       	add	r27, r27
 612:	40 f4       	brcc	.+16     	; 0x624 <__fp_round+0x20>
 614:	bf 2b       	or	r27, r31
 616:	11 f4       	brne	.+4      	; 0x61c <__fp_round+0x18>
 618:	60 ff       	sbrs	r22, 0
 61a:	04 c0       	rjmp	.+8      	; 0x624 <__fp_round+0x20>
 61c:	6f 5f       	subi	r22, 0xFF	; 255
 61e:	7f 4f       	sbci	r23, 0xFF	; 255
 620:	8f 4f       	sbci	r24, 0xFF	; 255
 622:	9f 4f       	sbci	r25, 0xFF	; 255
 624:	08 95       	ret

00000626 <__fp_split3>:
 626:	57 fd       	sbrc	r21, 7
 628:	90 58       	subi	r25, 0x80	; 128
 62a:	44 0f       	add	r20, r20
 62c:	55 1f       	adc	r21, r21
 62e:	59 f0       	breq	.+22     	; 0x646 <__fp_splitA+0x10>
 630:	5f 3f       	cpi	r21, 0xFF	; 255
 632:	71 f0       	breq	.+28     	; 0x650 <__fp_splitA+0x1a>
 634:	47 95       	ror	r20

00000636 <__fp_splitA>:
 636:	88 0f       	add	r24, r24
 638:	97 fb       	bst	r25, 7
 63a:	99 1f       	adc	r25, r25
 63c:	61 f0       	breq	.+24     	; 0x656 <__fp_splitA+0x20>
 63e:	9f 3f       	cpi	r25, 0xFF	; 255
 640:	79 f0       	breq	.+30     	; 0x660 <__fp_splitA+0x2a>
 642:	87 95       	ror	r24
 644:	08 95       	ret
 646:	12 16       	cp	r1, r18
 648:	13 06       	cpc	r1, r19
 64a:	14 06       	cpc	r1, r20
 64c:	55 1f       	adc	r21, r21
 64e:	f2 cf       	rjmp	.-28     	; 0x634 <__fp_split3+0xe>
 650:	46 95       	lsr	r20
 652:	f1 df       	rcall	.-30     	; 0x636 <__fp_splitA>
 654:	08 c0       	rjmp	.+16     	; 0x666 <__fp_splitA+0x30>
 656:	16 16       	cp	r1, r22
 658:	17 06       	cpc	r1, r23
 65a:	18 06       	cpc	r1, r24
 65c:	99 1f       	adc	r25, r25
 65e:	f1 cf       	rjmp	.-30     	; 0x642 <__fp_splitA+0xc>
 660:	86 95       	lsr	r24
 662:	71 05       	cpc	r23, r1
 664:	61 05       	cpc	r22, r1
 666:	08 94       	sec
 668:	08 95       	ret

0000066a <__fp_zero>:
 66a:	e8 94       	clt

0000066c <__fp_szero>:
 66c:	bb 27       	eor	r27, r27
 66e:	66 27       	eor	r22, r22
 670:	77 27       	eor	r23, r23
 672:	cb 01       	movw	r24, r22
 674:	97 f9       	bld	r25, 7
 676:	08 95       	ret

00000678 <_exit>:
 678:	f8 94       	cli

0000067a <__stop_program>:
 67a:	ff cf       	rjmp	.-2      	; 0x67a <__stop_program>
